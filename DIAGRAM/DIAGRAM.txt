PROGRAM ::= 'program' 'id' '{' VARS (FUNCTION)* MAIN '}'

VARS ::= 'vars' DECLARE

TYPE ::=  'int' | 'float' | 'string' | 'object' | 'bool'

MAIN ::= 'main' '{' VARS? BODY '}'

INSTR ::= ((ASSIGN | FUNC_CALL) ';' | CONDITION | CYCLE)

DECLARE ::= (TYPE 'id' (',' 'id')* ';' | 'struct' 'id' STRUCT ';' | 'dict' 'id' DICT ';')+

INIT ::= '=' (EXPRESION | FUNC_CALL)

INIT_DICT ::= '=' '(' ('cte_s' | CTE | 'id') ':' ('cte_s' | CTE | 'id') ')'

PARAM ::= (TYPE 'id' (',' 'id')*) (';' TYPE 'id' (',' 'id')*)* 

FUNCTION ::= 'func' 'id' ('(' PARAM+ ')')? ('returns' TYPE)? '{' VARS? BODY '}'

STRUCT ::= TYPE '[' 'cte_d' ']' ('[' 'cte_d' ']')?

DICT ::= '(' TYPE ':' TYPE ')'

BODY ::=  (INSTR+)?

ASSIGN ::= 'id' (('[' EXPRESION ']' ('[' EXPRESION ']')?)? INIT | INIT_DICT)

CONDITION ::= 'if' '(' EXPRESION ')' '{' BODY '}' ('else' '{' BODY '}')?

CYCLE ::= FOR_CYCLE | WHLE_CYCLE

WHILE_CYCLE ::= 'while' '(' EXPRESION ')' '{' BODY '}'

FOR_CYCLE ::= 'for' '(' ASSIGN ';' EXPRESION ';' ASSIGN ')'  '{' BODY '}'

CTE ::= 'cte_d' | 'cte_f' | 'true' | 'false'

EXPRESION ::= S_EXP (('or' | 'and') S_EXP)*

S_EXP ::=  EXP (('>' | '>=' | '<' | '<=' | '!=' | '==') EXP)*

EXP ::= TERM (('+' | '-') TERM)*

TERM ::= FACT (('*' | '/') FACT)*

FACT ::= ('cte_s' | 'id' ('[' EXPRESION ']' ('[' EXPRESION ']')?)? | CTE | '(' EXPRESION ')' | FUNC_CALL )?

FUNC_CALL ::= 'id' '(' (EXPRESION (',' EXPRESION)*)? ')'