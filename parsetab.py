
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '0293704C54D81EE53A5B31AECE9A24F5'
    
_lr_action_items = {'RETURN':([7,9,10,19,20,21,48,51,53,61,62,63,64,66,72,73,75,76,77,78,83,90,92,96,111,140,225,229,233,234,240,241,],[-3,-4,-21,-20,-19,-7,-110,-110,-110,-39,-43,-44,-38,-40,-110,-49,-48,-45,-16,-46,-15,-110,-47,-14,-110,182,-50,-110,-68,-70,-51,-69,]),'VARS':([5,45,57,90,],[6,6,6,6,]),'DIF':([112,115,116,118,119,120,121,122,123,124,125,133,135,154,155,156,159,161,164,165,166,170,175,176,177,183,193,194,195,197,198,199,200,209,223,224,235,],[-108,147,-110,-92,-110,-109,-94,-93,-107,-106,-110,-110,-94,-97,-96,-99,-98,-84,-87,-88,-91,-58,-110,-92,-93,-95,-104,-105,-103,-86,-85,-89,-90,-110,-102,-100,-101,]),'OBJECT':([6,26,40,42,48,51,53,56,65,108,],[15,15,15,15,15,15,15,15,15,15,]),'WHILE':([7,9,10,19,20,21,45,48,51,53,57,59,61,62,63,64,66,70,72,73,75,77,83,90,96,111,196,207,225,229,233,234,236,237,240,241,],[-3,-4,-21,-20,-19,-7,-110,-110,-110,-110,-110,74,-39,-43,-44,-38,-40,74,74,-49,-48,-16,-15,-110,-14,74,74,74,-50,-110,-68,-70,74,74,-51,-69,]),'PROGRAM':([0,],[2,]),'TRUE':([93,97,99,102,103,113,132,142,144,146,147,148,149,150,151,157,162,163,167,168,169,172,182,203,205,218,222,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'LAST':([158,],[194,]),')':([12,14,15,16,18,39,50,54,68,88,89,97,98,100,101,109,110,112,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,131,133,134,135,137,139,141,143,145,152,153,154,155,156,159,161,164,165,166,170,171,173,175,176,177,183,184,185,186,187,188,189,190,191,193,194,195,197,198,199,200,202,209,212,213,214,215,216,217,223,224,226,227,235,],[-8,-9,-11,-10,-12,-42,-41,67,-110,107,-110,-110,-54,-52,-53,-29,-31,-108,-110,-110,-110,160,-92,-110,-109,-94,-93,-107,-106,-110,170,-60,-110,-22,-110,-23,-24,179,-30,183,-72,-75,-83,-76,-97,-96,-99,-98,-84,-87,-88,-91,-58,-59,-62,-110,-92,-93,-95,-73,-74,-77,-78,-80,-81,-79,-82,-104,-105,-103,-86,-85,-89,-90,-110,-110,-61,227,-26,-27,-28,-55,-102,-100,231,-25,-101,]),'(':([28,30,35,74,80,82,84,93,97,99,102,103,113,116,132,133,142,144,146,147,148,149,150,151,157,162,163,167,168,169,172,175,182,205,218,222,],[40,42,40,93,95,97,103,113,113,132,113,113,113,97,113,97,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,97,113,113,113,113,]),'+':([112,116,118,119,120,121,122,123,124,125,133,135,154,155,156,159,165,166,170,175,176,177,183,193,194,195,199,200,209,223,224,235,],[-108,-110,-92,163,-109,-94,-93,-107,-106,-110,-110,-94,-97,-96,-99,-98,-88,-91,-58,-110,-92,-93,-95,-104,-105,-103,-89,-90,-110,-102,-100,-101,]),'*':([112,116,118,120,121,122,123,124,125,133,135,154,155,156,159,170,175,176,177,183,193,194,195,209,223,224,235,],[-108,-110,-92,-109,-94,-93,-107,-106,167,-110,-94,-97,-96,-99,-98,-58,-110,-92,-93,-95,-104,-105,-103,-110,-102,-100,-101,]),'-':([112,116,118,119,120,121,122,123,124,125,133,135,154,155,156,159,165,166,170,175,176,177,183,193,194,195,199,200,209,223,224,235,],[-108,-110,-92,162,-109,-94,-93,-107,-106,-110,-110,-94,-97,-96,-99,-98,-88,-91,-58,-110,-92,-93,-95,-104,-105,-103,-89,-90,-110,-102,-100,-101,]),',':([27,68,112,114,115,116,118,119,120,121,122,123,124,125,130,143,145,152,153,154,155,156,159,161,164,165,166,170,183,184,185,186,187,188,189,190,191,193,194,195,197,198,199,200,202,209,223,224,235,],[37,37,-108,-110,-110,-110,-92,-110,-109,-94,-93,-107,-106,-110,172,-72,-75,-83,-76,-97,-96,-99,-98,-84,-87,-88,-91,-58,-95,-73,-74,-77,-78,-80,-81,-79,-82,-104,-105,-103,-86,-85,-89,-90,172,-110,-102,-100,-101,]),'/':([112,116,118,120,121,122,123,124,125,133,135,154,155,156,159,170,175,176,177,183,193,194,195,209,223,224,235,],[-108,-110,-92,-109,-94,-93,-107,-106,168,-110,-94,-97,-96,-99,-98,-58,-110,-92,-93,-95,-104,-105,-103,-110,-102,-100,-101,]),'.':([116,133,175,],[158,158,158,]),'FIRST':([158,],[193,]),'BOOL':([6,26,40,42,48,51,53,56,65,108,],[18,18,18,18,18,18,18,18,18,18,]),';':([27,34,38,39,41,50,68,81,85,86,87,89,98,100,101,104,106,107,112,114,115,116,118,119,120,121,122,123,124,125,127,131,133,134,135,143,145,152,153,154,155,156,159,161,164,165,166,170,180,183,184,185,186,187,188,189,190,191,193,194,195,197,198,199,200,201,208,209,217,223,224,227,235,],[-110,48,51,-42,53,-41,-110,96,-18,-17,-110,108,-54,-52,-53,-63,-67,-71,-108,-110,-110,-110,-92,-110,-109,-94,-93,-107,-106,-110,169,-22,-110,-23,-24,-72,-75,-83,-76,-97,-96,-99,-98,-84,-87,-88,-91,-58,-66,-95,-73,-74,-77,-78,-80,-81,-79,-82,-104,-105,-103,-86,-85,-89,-90,211,221,-110,-55,-102,-100,-25,-101,]),':':([12,14,15,16,18,52,112,120,123,124,174,175,176,177,],[-8,-9,-11,-10,-12,65,-108,-109,-107,-106,203,-28,-26,-27,]),'=':([82,126,178,204,206,228,],[99,99,-110,218,-57,-56,]),'<':([112,115,116,118,119,120,121,122,123,124,125,133,135,154,155,156,159,161,164,165,166,170,175,176,177,183,193,194,195,197,198,199,200,209,223,224,235,],[-108,151,-110,-92,-110,-109,-94,-93,-107,-106,-110,-110,-94,-97,-96,-99,-98,-84,-87,-88,-91,-58,-110,-92,-93,-95,-104,-105,-103,-86,-85,-89,-90,-110,-102,-100,-101,]),'$end':([1,46,],[0,-1,]),'STRING':([6,26,40,42,48,51,53,56,65,108,],[16,16,16,16,16,16,16,16,16,16,]),'FOR':([7,9,10,19,20,21,45,48,51,53,57,59,61,62,63,64,66,70,72,73,75,77,83,90,96,111,196,207,225,229,233,234,236,237,240,241,],[-3,-4,-21,-20,-19,-7,-110,-110,-110,-110,-110,80,-39,-43,-44,-38,-40,80,80,-49,-48,-16,-15,-110,-14,80,80,80,-50,-110,-68,-70,80,80,-51,-69,]),'ELSE':([229,],[232,]),'>':([112,115,116,118,119,120,121,122,123,124,125,133,135,154,155,156,159,161,164,165,166,170,175,176,177,183,193,194,195,197,198,199,200,209,223,224,235,],[-108,149,-110,-92,-110,-109,-94,-93,-107,-106,-110,-110,-94,-97,-96,-99,-98,-84,-87,-88,-91,-58,-110,-92,-93,-95,-104,-105,-103,-86,-85,-89,-90,-110,-102,-100,-101,]),'RETURNS':([30,43,44,67,],[-110,56,-35,-34,]),'FUNC':([5,7,8,9,10,19,20,21,22,48,51,53,61,62,63,64,66,71,],[-110,-3,23,-4,-21,-20,-19,-7,23,-110,-110,-110,-39,-43,-44,-38,-40,-32,]),'[':([12,14,15,16,18,33,36,49,82,87,107,116,126,133,175,178,209,],[-8,-9,-11,-10,-12,47,-64,-65,102,105,-71,157,102,157,157,205,222,]),']':([60,112,114,115,116,118,119,120,121,122,123,124,125,136,138,143,145,152,153,154,155,156,159,161,164,165,166,170,183,184,185,186,187,188,189,190,191,192,193,194,195,197,198,199,200,209,219,223,224,230,235,],[87,-108,-110,-110,-110,-92,-110,-109,-94,-93,-107,-106,-110,178,180,-72,-75,-83,-76,-97,-96,-99,-98,-84,-87,-88,-91,-58,-95,-73,-74,-77,-78,-80,-81,-79,-82,209,-104,-105,-103,-86,-85,-89,-90,-110,228,-102,-100,235,-101,]),'ID':([2,3,7,9,10,11,12,13,14,15,16,17,18,19,20,21,23,37,45,48,51,53,55,57,59,61,62,63,64,66,70,72,73,75,77,83,90,93,95,96,97,99,102,103,111,113,132,142,144,146,147,148,149,150,151,157,162,163,167,168,169,172,182,196,203,205,207,211,218,222,225,229,233,234,236,237,240,241,],[-2,4,-3,-4,-21,26,-8,27,-9,-11,-10,28,-12,-20,-19,-7,30,50,-110,-110,-110,-110,68,-110,82,-39,-43,-44,-38,-40,82,82,-49,-48,-16,-15,-110,116,126,-14,116,133,116,116,82,116,175,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,82,216,116,82,126,133,116,-50,-110,-68,-70,82,82,-51,-69,]),'IF':([7,9,10,19,20,21,45,48,51,53,57,59,61,62,63,64,66,70,72,73,75,77,83,90,96,111,196,207,225,229,233,234,236,237,240,241,],[-3,-4,-21,-20,-19,-7,-110,-110,-110,-110,-110,84,-39,-43,-44,-38,-40,84,84,-49,-48,-16,-15,-110,-14,84,84,84,-50,-110,-68,-70,84,84,-51,-69,]),'AND':([112,114,115,116,118,119,120,121,122,123,124,125,133,135,152,153,154,155,156,159,161,164,165,166,170,175,176,177,183,186,187,188,189,190,191,193,194,195,197,198,199,200,209,223,224,235,],[-108,142,-110,-110,-92,-110,-109,-94,-93,-107,-106,-110,-110,-94,-83,-76,-97,-96,-99,-98,-84,-87,-88,-91,-58,-110,-92,-93,-95,-77,-78,-80,-81,-79,-82,-104,-105,-103,-86,-85,-89,-90,-110,-102,-100,-101,]),'CTES':([93,97,99,102,103,113,132,142,144,146,147,148,149,150,151,157,162,163,167,168,169,172,182,203,205,218,222,],[118,118,118,118,118,118,176,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,214,118,118,118,]),'LTOEQ':([112,115,116,118,119,120,121,122,123,124,125,133,135,154,155,156,159,161,164,165,166,170,175,176,177,183,193,194,195,197,198,199,200,209,223,224,235,],[-108,150,-110,-92,-110,-109,-94,-93,-107,-106,-110,-110,-94,-97,-96,-99,-98,-84,-87,-88,-91,-58,-110,-92,-93,-95,-104,-105,-103,-86,-85,-89,-90,-110,-102,-100,-101,]),'FALSE':([93,97,99,102,103,113,132,142,144,146,147,148,149,150,151,157,162,163,167,168,169,172,182,203,205,218,222,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'STRUCT':([6,48,51,53,],[11,11,11,11,]),'INT':([6,26,40,42,48,51,53,56,65,108,],[12,12,12,12,12,12,12,12,12,12,]),'EQ':([112,115,116,118,119,120,121,122,123,124,125,133,135,154,155,156,159,161,164,165,166,170,175,176,177,183,193,194,195,197,198,199,200,209,223,224,235,],[-108,146,-110,-92,-110,-109,-94,-93,-107,-106,-110,-110,-94,-97,-96,-99,-98,-84,-87,-88,-91,-58,-110,-92,-93,-95,-104,-105,-103,-86,-85,-89,-90,-110,-102,-100,-101,]),'FLOAT':([6,26,40,42,48,51,53,56,65,108,],[14,14,14,14,14,14,14,14,14,14,]),'OR':([112,114,115,116,118,119,120,121,122,123,124,125,133,135,152,153,154,155,156,159,161,164,165,166,170,175,176,177,183,186,187,188,189,190,191,193,194,195,197,198,199,200,209,223,224,235,],[-108,144,-110,-110,-92,-110,-109,-94,-93,-107,-106,-110,-110,-94,-83,-76,-97,-96,-99,-98,-84,-87,-88,-91,-58,-110,-92,-93,-95,-77,-78,-80,-81,-79,-82,-104,-105,-103,-86,-85,-89,-90,-110,-102,-100,-101,]),'DICT':([6,26,48,51,53,],[17,35,17,17,17,]),'CTED':([47,93,97,99,102,103,105,113,132,142,144,146,147,148,149,150,151,157,162,163,167,168,169,172,182,203,205,218,222,],[60,124,124,124,124,124,138,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'GTOEQ':([112,115,116,118,119,120,121,122,123,124,125,133,135,154,155,156,159,161,164,165,166,170,175,176,177,183,193,194,195,197,198,199,200,209,223,224,235,],[-108,148,-110,-92,-110,-109,-94,-93,-107,-106,-110,-110,-94,-97,-96,-99,-98,-84,-87,-88,-91,-58,-110,-92,-93,-95,-104,-105,-103,-86,-85,-89,-90,-110,-102,-100,-101,]),'{':([4,12,14,15,16,18,30,31,43,44,67,69,160,179,231,232,],[5,-8,-9,-11,-10,-12,-110,45,57,-35,-34,90,196,207,236,237,]),'MAIN':([5,7,8,9,10,19,20,21,22,24,25,29,48,51,53,61,62,63,64,66,71,],[-110,-3,-110,-4,-21,-20,-19,-7,-110,-6,31,-5,-110,-110,-110,-39,-43,-44,-38,-40,-32,]),'}':([7,9,10,19,20,21,32,45,48,51,53,57,58,59,61,62,63,64,66,70,72,73,75,76,77,78,79,83,91,92,94,96,181,196,207,210,220,221,225,229,233,234,236,237,238,239,240,241,],[-3,-4,-21,-20,-19,-7,46,-110,-110,-110,-110,-110,71,-110,-39,-43,-44,-38,-40,-110,-110,-49,-48,-45,-16,-46,94,-15,-37,-47,-13,-14,-36,-110,-110,225,229,-33,-50,-110,-68,-70,-110,-110,240,241,-51,-69,]),'CTEF':([93,97,99,102,103,113,132,142,144,146,147,148,149,150,151,157,162,163,167,168,169,172,182,203,205,218,222,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cyExp':([119,],[161,]),'dictDeclare':([6,48,51,53,],[10,10,10,10,]),'vars':([5,45,57,90,],[7,7,7,7,]),'instr':([59,70,72,111,196,207,236,237,],[72,72,72,72,72,72,72,72,]),'optionalMatrix':([87,],[104,]),'errorProgram':([2,],[3,]),'cyTerm':([125,],[165,]),'whileCycle':([59,70,72,111,196,207,236,237,],[73,73,73,73,73,73,73,73,]),'opParamCall':([97,],[128,]),'cyTypeParam':([27,68,],[38,89,]),'assignMatrix':([178,],[204,]),'optionalElse':([229,],[233,]),'forCycle':([59,70,72,111,196,207,236,237,],[75,75,75,75,75,75,75,75,]),'opFunctions':([8,22,],[25,29,]),'dictType':([132,203,],[174,213,]),'structType':([26,],[33,]),'initWith':([99,218,],[131,131,]),'cyDeclare':([48,51,53,],[61,64,66,]),'struct':([26,],[34,]),'opVars':([5,45,57,90,],[8,59,70,111,]),'opStruct':([116,133,175,],[154,154,154,]),'cyExpresion':([114,],[143,]),'param':([42,108,],[54,139,]),'sExp':([93,97,99,102,103,113,132,142,144,157,169,172,182,205,218,222,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'init':([82,126,204,],[101,101,217,]),'program':([0,],[1,]),'dict':([28,35,],[41,49,]),'opMatrix':([209,],[224,]),'main':([25,],[32,]),'type':([6,26,40,42,48,51,53,56,65,108,],[13,36,52,55,13,13,13,69,88,55,]),'dictIndex':([158,],[195,]),'empty':([5,8,22,27,30,45,48,51,53,57,59,68,70,72,87,89,90,97,111,114,115,116,119,125,130,133,175,178,196,202,207,209,229,236,237,],[9,24,24,39,44,9,63,63,63,9,78,39,78,78,106,110,9,129,78,145,152,156,164,166,173,156,156,206,78,173,78,223,234,78,78,]),'opReturns':([43,],[58,]),'function':([8,22,],[22,22,]),'return':([140,],[181,]),'opDictionary':([116,133,175,],[159,159,159,]),'body':([59,70,72,111,196,207,236,237,],[79,91,92,140,210,220,238,239,]),'assignOptions':([82,126,],[100,100,]),'opAccess':([116,133,175,],[155,155,155,]),'basicStatements':([59,70,72,111,196,207,236,237,],[81,81,81,81,81,81,81,81,]),'structDeclare':([6,48,51,53,],[19,19,19,19,]),'cyParam':([89,],[109,]),'basicDeclare':([6,48,51,53,],[20,20,20,20,]),'cyInstruction':([59,70,72,111,196,207,236,237,],[76,76,76,76,76,76,76,76,]),'condition':([59,70,72,111,196,207,236,237,],[83,83,83,83,83,83,83,83,]),'cycle':([59,70,72,111,196,207,236,237,],[77,77,77,77,77,77,77,77,]),'expresion':([93,97,99,102,103,113,132,142,144,157,169,172,182,205,218,222,],[117,130,134,136,137,141,141,184,185,192,201,202,208,219,134,230,]),'term':([93,97,99,102,103,113,132,142,144,146,147,148,149,150,151,157,162,163,169,172,182,205,218,222,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,197,198,119,119,119,119,119,119,]),'funcCall':([59,70,72,93,97,99,102,103,111,113,132,142,144,146,147,148,149,150,151,157,162,163,167,168,169,172,182,196,205,207,218,222,236,237,],[85,85,85,121,121,135,121,121,85,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,85,121,85,135,121,85,85,]),'opParameters':([30,],[43,]),'initDict':([82,126,],[98,98,]),'assign':([59,70,72,95,111,196,207,211,236,237,],[86,86,86,127,86,86,86,226,86,86,]),'cte':([93,97,99,102,103,113,132,142,144,146,147,148,149,150,151,157,162,163,167,168,169,172,182,203,205,218,222,],[122,122,122,122,122,122,177,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,215,122,122,122,]),'exp':([93,97,99,102,103,113,132,142,144,146,147,148,149,150,151,157,169,172,182,205,218,222,],[115,115,115,115,115,115,115,115,115,186,187,188,189,190,191,115,115,115,115,115,115,115,]),'opSExp':([115,],[153,]),'cyParamCall':([130,202,],[171,212,]),'declare':([6,48,51,53,],[21,62,62,62,]),'fact':([93,97,99,102,103,113,132,142,144,146,147,148,149,150,151,157,162,163,167,168,169,172,182,205,218,222,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,199,200,125,125,125,125,125,125,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM errorProgram ID { opVars opFunctions main }','program',8,'p_program','CT.py',60),
  ('errorProgram -> <empty>','errorProgram',0,'p_errorProgram','CT.py',65),
  ('opVars -> vars','opVars',1,'p_opVars','CT.py',69),
  ('opVars -> empty','opVars',1,'p_opVars','CT.py',70),
  ('opFunctions -> function opFunctions','opFunctions',2,'p_opFunctions','CT.py',75),
  ('opFunctions -> empty','opFunctions',1,'p_opFunctions','CT.py',76),
  ('vars -> VARS declare','vars',2,'p_vars','CT.py',80),
  ('type -> INT','type',1,'p_type','CT.py',85),
  ('type -> FLOAT','type',1,'p_type','CT.py',86),
  ('type -> STRING','type',1,'p_type','CT.py',87),
  ('type -> OBJECT','type',1,'p_type','CT.py',88),
  ('type -> BOOL','type',1,'p_type','CT.py',89),
  ('main -> MAIN { opVars body }','main',5,'p_main','CT.py',94),
  ('instr -> basicStatements ;','instr',2,'p_instr','CT.py',99),
  ('instr -> condition','instr',1,'p_instr','CT.py',100),
  ('instr -> cycle','instr',1,'p_instr','CT.py',101),
  ('basicStatements -> assign','basicStatements',1,'p_basicStatements','CT.py',105),
  ('basicStatements -> funcCall','basicStatements',1,'p_basicStatements','CT.py',106),
  ('declare -> basicDeclare','declare',1,'p_declare','CT.py',110),
  ('declare -> structDeclare','declare',1,'p_declare','CT.py',111),
  ('declare -> dictDeclare','declare',1,'p_declare','CT.py',112),
  ('init -> = initWith','init',2,'p_init','CT.py',117),
  ('initWith -> expresion','initWith',1,'p_initWith','CT.py',122),
  ('initWith -> funcCall','initWith',1,'p_initWith','CT.py',123),
  ('initDict -> = ( dictType : dictType )','initDict',6,'p_initDict','CT.py',128),
  ('dictType -> CTES','dictType',1,'p_dictType','CT.py',133),
  ('dictType -> cte','dictType',1,'p_dictType','CT.py',134),
  ('dictType -> ID','dictType',1,'p_dictType','CT.py',135),
  ('param -> type ID cyTypeParam cyParam','param',4,'p_param','CT.py',140),
  ('cyParam -> ; param','cyParam',2,'p_cyParam','CT.py',145),
  ('cyParam -> empty','cyParam',1,'p_cyParam','CT.py',146),
  ('function -> FUNC ID opParameters opReturns }','function',5,'p_function','CT.py',151),
  ('return -> RETURN expresion ;','return',3,'p_return','CT.py',156),
  ('opParameters -> ( param )','opParameters',3,'p_opParameters','CT.py',161),
  ('opParameters -> empty','opParameters',1,'p_opParameters','CT.py',162),
  ('opReturns -> RETURNS type { opVars body return','opReturns',6,'p_opReturns','CT.py',167),
  ('opReturns -> { opVars body','opReturns',3,'p_opReturns','CT.py',168),
  ('basicDeclare -> type ID cyTypeParam ; cyDeclare','basicDeclare',5,'p_basicDeclare','CT.py',173),
  ('structDeclare -> STRUCT ID struct ; cyDeclare','structDeclare',5,'p_structDeclare','CT.py',178),
  ('dictDeclare -> DICT ID dict ; cyDeclare','dictDeclare',5,'p_dictDeclare','CT.py',183),
  ('cyTypeParam -> , ID','cyTypeParam',2,'p_cyTypeParam','CT.py',188),
  ('cyTypeParam -> empty','cyTypeParam',1,'p_cyTypeParam','CT.py',189),
  ('cyDeclare -> declare','cyDeclare',1,'p_cyDeclare','CT.py',194),
  ('cyDeclare -> empty','cyDeclare',1,'p_cyDeclare','CT.py',195),
  ('body -> cyInstruction','body',1,'p_body','CT.py',200),
  ('body -> empty','body',1,'p_body','CT.py',201),
  ('cyInstruction -> instr body','cyInstruction',2,'p_cyInstruction','CT.py',206),
  ('cycle -> forCycle','cycle',1,'p_cycle','CT.py',211),
  ('cycle -> whileCycle','cycle',1,'p_cycle','CT.py',212),
  ('whileCycle -> WHILE ( expresion ) { body }','whileCycle',7,'p_whileCycle','CT.py',217),
  ('forCycle -> FOR ( assign ; expresion ; assign ) { body }','forCycle',11,'p_forCycle','CT.py',222),
  ('assign -> ID assignOptions','assign',2,'p_assign','CT.py',227),
  ('assignOptions -> init','assignOptions',1,'p_assignOptions','CT.py',232),
  ('assignOptions -> initDict','assignOptions',1,'p_assignOptions','CT.py',233),
  ('assignOptions -> [ expresion ] assignMatrix init','assignOptions',5,'p_assignOptions','CT.py',234),
  ('assignMatrix -> [ expresion ]','assignMatrix',3,'p_assignMatrix','CT.py',239),
  ('assignMatrix -> empty','assignMatrix',1,'p_assignMatrix','CT.py',240),
  ('funcCall -> ID ( opParamCall )','funcCall',4,'p_funcCall','CT.py',245),
  ('opParamCall -> expresion cyParamCall','opParamCall',2,'p_opParamCall','CT.py',250),
  ('opParamCall -> empty','opParamCall',1,'p_opParamCall','CT.py',251),
  ('cyParamCall -> , expresion cyParamCall','cyParamCall',3,'p_cyParamCall','CT.py',256),
  ('cyParamCall -> empty','cyParamCall',1,'p_cyParamCall','CT.py',257),
  ('struct -> structType [ CTED ] optionalMatrix','struct',5,'p_struct','CT.py',262),
  ('structType -> type','structType',1,'p_structType','CT.py',267),
  ('structType -> DICT dict','structType',2,'p_structType','CT.py',268),
  ('optionalMatrix -> [ CTED ]','optionalMatrix',3,'p_optionalMatrix','CT.py',273),
  ('optionalMatrix -> empty','optionalMatrix',1,'p_optionalMatrix','CT.py',274),
  ('condition -> IF ( expresion ) { body } optionalElse','condition',8,'p_condition','CT.py',279),
  ('optionalElse -> ELSE { body }','optionalElse',4,'p_optionalElse','CT.py',284),
  ('optionalElse -> empty','optionalElse',1,'p_optionalElse','CT.py',285),
  ('dict -> ( type : type )','dict',5,'p_dict','CT.py',290),
  ('expresion -> sExp cyExpresion','expresion',2,'p_expresion','CT.py',295),
  ('cyExpresion -> AND expresion','cyExpresion',2,'p_cyExpresion','CT.py',300),
  ('cyExpresion -> OR expresion','cyExpresion',2,'p_cyExpresion','CT.py',301),
  ('cyExpresion -> empty','cyExpresion',1,'p_cyExpresion','CT.py',302),
  ('sExp -> exp opSExp','sExp',2,'p_sExp','CT.py',307),
  ('opSExp -> EQ exp','opSExp',2,'p_opSExp','CT.py',312),
  ('opSExp -> DIF exp','opSExp',2,'p_opSExp','CT.py',313),
  ('opSExp -> LTOEQ exp','opSExp',2,'p_opSExp','CT.py',314),
  ('opSExp -> GTOEQ exp','opSExp',2,'p_opSExp','CT.py',315),
  ('opSExp -> > exp','opSExp',2,'p_opSExp','CT.py',316),
  ('opSExp -> < exp','opSExp',2,'p_opSExp','CT.py',317),
  ('opSExp -> empty','opSExp',1,'p_opSExp','CT.py',318),
  ('exp -> term cyExp','exp',2,'p_exp','CT.py',323),
  ('cyExp -> + term','cyExp',2,'p_cyExp','CT.py',328),
  ('cyExp -> - term','cyExp',2,'p_cyExp','CT.py',329),
  ('cyExp -> empty','cyExp',1,'p_cyExp','CT.py',330),
  ('term -> fact cyTerm','term',2,'p_term','CT.py',335),
  ('cyTerm -> * fact','cyTerm',2,'p_cyTerm','CT.py',340),
  ('cyTerm -> / fact','cyTerm',2,'p_cyTerm','CT.py',341),
  ('cyTerm -> empty','cyTerm',1,'p_cyTerm','CT.py',342),
  ('fact -> CTES','fact',1,'p_fact','CT.py',347),
  ('fact -> cte','fact',1,'p_fact','CT.py',348),
  ('fact -> funcCall','fact',1,'p_fact','CT.py',349),
  ('fact -> ( expresion )','fact',3,'p_fact','CT.py',350),
  ('fact -> ID opAccess','fact',2,'p_fact','CT.py',351),
  ('opAccess -> opStruct','opAccess',1,'p_opAccess','CT.py',356),
  ('opAccess -> opDictionary','opAccess',1,'p_opAccess','CT.py',357),
  ('opAccess -> empty','opAccess',1,'p_opAccess','CT.py',358),
  ('opStruct -> [ expresion ] opMatrix','opStruct',4,'p_opStruct','CT.py',363),
  ('opMatrix -> [ expresion ]','opMatrix',3,'p_opMatrix','CT.py',368),
  ('opMatrix -> empty','opMatrix',1,'p_opMatrix','CT.py',369),
  ('opDictionary -> . dictIndex','opDictionary',2,'p_opDictionary','CT.py',374),
  ('dictIndex -> FIRST','dictIndex',1,'p_dictIndex','CT.py',379),
  ('dictIndex -> LAST','dictIndex',1,'p_dictIndex','CT.py',380),
  ('cte -> CTED','cte',1,'p_cte','CT.py',385),
  ('cte -> CTEF','cte',1,'p_cte','CT.py',386),
  ('cte -> TRUE','cte',1,'p_cte','CT.py',387),
  ('cte -> FALSE','cte',1,'p_cte','CT.py',388),
  ('empty -> <empty>','empty',0,'p_empty','CT.py',393),
]
