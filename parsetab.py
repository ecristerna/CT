
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'C72FD28BD564EE99A9E1F1C3DF73BC23'
    
_lr_action_items = {'RETURN':([6,8,10,11,12,19,47,48,51,60,61,62,63,65,70,71,73,74,75,76,80,88,90,101,109,139,225,229,233,234,240,241,],[-2,-3,-19,-18,-20,-6,-109,-109,-109,-39,-42,-43,-37,-38,-109,-48,-47,-44,-15,-45,-14,-109,-46,-13,-109,181,-49,-109,-67,-69,-50,-68,]),'VARS':([4,44,56,88,],[5,5,5,5,]),'DIF':([111,114,115,117,118,119,120,121,122,123,124,131,133,153,154,155,158,160,163,164,165,169,173,174,176,182,192,193,194,196,197,198,199,209,223,224,235,],[-107,146,-109,-91,-109,-108,-93,-92,-106,-105,-109,-109,-93,-96,-95,-98,-97,-83,-86,-87,-90,-57,-109,-91,-92,-94,-103,-104,-102,-85,-84,-88,-89,-109,-101,-99,-100,]),'OBJECT':([5,27,32,41,47,48,51,55,59,107,],[9,9,9,9,9,9,9,9,9,9,]),'WHILE':([6,8,10,11,12,19,44,47,48,51,56,58,60,61,62,63,65,69,70,71,73,75,80,88,101,109,195,206,225,229,233,234,236,237,240,241,],[-2,-3,-19,-18,-20,-6,-109,-109,-109,-109,-109,72,-39,-42,-43,-37,-38,72,72,-48,-47,-15,-14,-109,-13,72,72,72,-49,-109,-67,-69,72,72,-50,-68,]),'PROGRAM':([0,],[2,]),'TRUE':([91,94,96,99,100,112,130,141,143,145,146,147,148,149,150,156,161,162,166,167,168,171,181,202,204,218,222,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'LAST':([157,],[193,]),')':([9,13,14,15,17,36,49,53,67,85,87,94,95,97,98,106,108,111,113,114,115,116,117,118,119,120,121,122,123,124,127,128,129,131,132,133,134,136,138,140,142,144,151,152,153,154,155,158,160,163,164,165,169,170,172,173,174,176,182,183,184,185,186,187,188,189,190,192,193,194,196,197,198,199,201,209,212,213,214,215,216,217,223,224,226,227,235,],[-10,-7,-8,-9,-11,-41,-40,66,-109,102,-109,-109,-53,-51,-52,-28,-30,-107,-109,-109,-109,159,-91,-109,-108,-93,-92,-106,-105,-109,169,-59,-109,-109,-22,-23,-21,178,-29,182,-71,-74,-82,-75,-96,-95,-98,-97,-83,-86,-87,-90,-57,-58,-61,-109,-91,-92,-94,-72,-73,-76,-77,-79,-80,-78,-81,-103,-104,-102,-85,-84,-88,-89,-109,-109,-60,-25,227,-26,-27,-54,-101,-99,231,-24,-100,]),'(':([25,29,40,72,78,79,81,91,94,96,99,100,112,115,130,131,141,143,145,146,147,148,149,150,156,161,162,166,167,168,171,173,181,204,218,222,],[32,41,32,91,93,94,100,112,112,130,112,112,112,94,112,94,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,94,112,112,112,112,]),'+':([111,115,117,118,119,120,121,122,123,124,131,133,153,154,155,158,164,165,169,173,174,176,182,192,193,194,198,199,209,223,224,235,],[-107,-109,-91,162,-108,-93,-92,-106,-105,-109,-109,-93,-96,-95,-98,-97,-87,-90,-57,-109,-91,-92,-94,-103,-104,-102,-88,-89,-109,-101,-99,-100,]),'*':([111,115,117,119,120,121,122,123,124,131,133,153,154,155,158,169,173,174,176,182,192,193,194,209,223,224,235,],[-107,-109,-91,-108,-93,-92,-106,-105,166,-109,-93,-96,-95,-98,-97,-57,-109,-91,-92,-94,-103,-104,-102,-109,-101,-99,-100,]),'-':([111,115,117,118,119,120,121,122,123,124,131,133,153,154,155,158,164,165,169,173,174,176,182,192,193,194,198,199,209,223,224,235,],[-107,-109,-91,161,-108,-93,-92,-106,-105,-109,-109,-93,-96,-95,-98,-97,-87,-90,-57,-109,-91,-92,-94,-103,-104,-102,-88,-89,-109,-101,-99,-100,]),',':([26,67,111,113,114,115,117,118,119,120,121,122,123,124,129,142,144,151,152,153,154,155,158,160,163,164,165,169,182,183,184,185,186,187,188,189,190,192,193,194,196,197,198,199,201,209,223,224,235,],[35,35,-107,-109,-109,-109,-91,-109,-108,-93,-92,-106,-105,-109,171,-71,-74,-82,-75,-96,-95,-98,-97,-83,-86,-87,-90,-57,-94,-72,-73,-76,-77,-79,-80,-78,-81,-103,-104,-102,-85,-84,-88,-89,171,-109,-101,-99,-100,]),'/':([111,115,117,119,120,121,122,123,124,131,133,153,154,155,158,169,173,174,176,182,192,193,194,209,223,224,235,],[-107,-109,-91,-108,-93,-92,-106,-105,167,-109,-93,-96,-95,-98,-97,-57,-109,-91,-92,-94,-103,-104,-102,-109,-101,-99,-100,]),'.':([115,131,173,],[157,157,157,]),'FIRST':([157,],[192,]),'BOOL':([5,27,32,41,47,48,51,55,59,107,],[17,17,17,17,17,17,17,17,17,17,]),';':([26,33,34,36,39,49,67,82,83,84,86,87,95,97,98,102,103,105,111,113,114,115,117,118,119,120,121,122,123,124,126,131,132,133,134,142,144,151,152,153,154,155,158,160,163,164,165,169,179,182,183,184,185,186,187,188,189,190,192,193,194,196,197,198,199,200,208,209,217,223,224,227,235,],[-109,47,48,-41,51,-40,-109,101,-17,-16,-109,107,-53,-51,-52,-70,-62,-66,-107,-109,-109,-109,-91,-109,-108,-93,-92,-106,-105,-109,168,-109,-22,-23,-21,-71,-74,-82,-75,-96,-95,-98,-97,-83,-86,-87,-90,-57,-65,-94,-72,-73,-76,-77,-79,-80,-78,-81,-103,-104,-102,-85,-84,-88,-89,211,221,-109,-54,-101,-99,-24,-100,]),':':([9,13,14,15,17,46,111,119,122,123,173,174,175,176,],[-10,-7,-8,-9,-11,59,-107,-108,-106,-105,-27,-25,202,-26,]),'=':([79,125,177,203,205,228,],[96,96,-109,218,-56,-55,]),'<':([111,114,115,117,118,119,120,121,122,123,124,131,133,153,154,155,158,160,163,164,165,169,173,174,176,182,192,193,194,196,197,198,199,209,223,224,235,],[-107,150,-109,-91,-109,-108,-93,-92,-106,-105,-109,-109,-93,-96,-95,-98,-97,-83,-86,-87,-90,-57,-109,-91,-92,-94,-103,-104,-102,-85,-84,-88,-89,-109,-101,-99,-100,]),'$end':([1,45,],[0,-1,]),'STRING':([5,27,32,41,47,48,51,55,59,107,],[15,15,15,15,15,15,15,15,15,15,]),'FOR':([6,8,10,11,12,19,44,47,48,51,56,58,60,61,62,63,65,69,70,71,73,75,80,88,101,109,195,206,225,229,233,234,236,237,240,241,],[-2,-3,-19,-18,-20,-6,-109,-109,-109,-109,-109,78,-39,-42,-43,-37,-38,78,78,-48,-47,-15,-14,-109,-13,78,78,78,-49,-109,-67,-69,78,78,-50,-68,]),'ELSE':([229,],[232,]),'>':([111,114,115,117,118,119,120,121,122,123,124,131,133,153,154,155,158,160,163,164,165,169,173,174,176,182,192,193,194,196,197,198,199,209,223,224,235,],[-107,148,-109,-91,-109,-108,-93,-92,-106,-105,-109,-109,-93,-96,-95,-98,-97,-83,-86,-87,-90,-57,-109,-91,-92,-94,-103,-104,-102,-85,-84,-88,-89,-109,-101,-99,-100,]),'RETURNS':([29,42,43,66,],[-109,55,-34,-33,]),'FUNC':([4,6,7,8,10,11,12,19,21,47,48,51,57,60,61,62,63,65,110,207,],[-109,-2,22,-3,-19,-18,-20,-6,22,-109,-109,-109,-31,-39,-42,-43,-37,-38,-36,-35,]),'[':([9,13,14,15,17,37,38,52,79,86,102,115,125,131,173,177,209,],[-10,-7,-8,-9,-11,50,-63,-64,99,104,-70,156,99,156,156,204,222,]),']':([64,111,113,114,115,117,118,119,120,121,122,123,124,135,137,142,144,151,152,153,154,155,158,160,163,164,165,169,182,183,184,185,186,187,188,189,190,191,192,193,194,196,197,198,199,209,219,223,224,230,235,],[86,-107,-109,-109,-109,-91,-109,-108,-93,-92,-106,-105,-109,177,179,-71,-74,-82,-75,-96,-95,-98,-97,-83,-86,-87,-90,-57,-94,-72,-73,-76,-77,-79,-80,-78,-81,209,-103,-104,-102,-85,-84,-88,-89,-109,228,-101,-99,235,-100,]),'ID':([2,6,8,9,10,11,12,13,14,15,16,17,18,19,20,22,35,44,47,48,51,54,56,58,60,61,62,63,65,69,70,71,73,75,80,88,91,93,94,96,99,100,101,109,112,130,141,143,145,146,147,148,149,150,156,161,162,166,167,168,171,181,195,202,204,206,211,218,222,225,229,233,234,236,237,240,241,],[3,-2,-3,-10,-19,-18,-20,-7,-8,-9,25,-11,26,-6,27,29,49,-109,-109,-109,-109,67,-109,79,-39,-42,-43,-37,-38,79,79,-48,-47,-15,-14,-109,115,125,115,131,115,115,-13,79,115,173,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,79,216,115,79,125,131,115,-49,-109,-67,-69,79,79,-50,-68,]),'IF':([6,8,10,11,12,19,44,47,48,51,56,58,60,61,62,63,65,69,70,71,73,75,80,88,101,109,195,206,225,229,233,234,236,237,240,241,],[-2,-3,-19,-18,-20,-6,-109,-109,-109,-109,-109,81,-39,-42,-43,-37,-38,81,81,-48,-47,-15,-14,-109,-13,81,81,81,-49,-109,-67,-69,81,81,-50,-68,]),'AND':([111,113,114,115,117,118,119,120,121,122,123,124,131,133,151,152,153,154,155,158,160,163,164,165,169,173,174,176,182,185,186,187,188,189,190,192,193,194,196,197,198,199,209,223,224,235,],[-107,141,-109,-109,-91,-109,-108,-93,-92,-106,-105,-109,-109,-93,-82,-75,-96,-95,-98,-97,-83,-86,-87,-90,-57,-109,-91,-92,-94,-76,-77,-79,-80,-78,-81,-103,-104,-102,-85,-84,-88,-89,-109,-101,-99,-100,]),'CTES':([91,94,96,99,100,112,130,141,143,145,146,147,148,149,150,156,161,162,166,167,168,171,181,202,204,218,222,],[117,117,117,117,117,117,174,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,213,117,117,117,]),'LTOEQ':([111,114,115,117,118,119,120,121,122,123,124,131,133,153,154,155,158,160,163,164,165,169,173,174,176,182,192,193,194,196,197,198,199,209,223,224,235,],[-107,149,-109,-91,-109,-108,-93,-92,-106,-105,-109,-109,-93,-96,-95,-98,-97,-83,-86,-87,-90,-57,-109,-91,-92,-94,-103,-104,-102,-85,-84,-88,-89,-109,-101,-99,-100,]),'FALSE':([91,94,96,99,100,112,130,141,143,145,146,147,148,149,150,156,161,162,166,167,168,171,181,202,204,218,222,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'STRUCT':([5,47,48,51,],[20,20,20,20,]),'INT':([5,27,32,41,47,48,51,55,59,107,],[13,13,13,13,13,13,13,13,13,13,]),'EQ':([111,114,115,117,118,119,120,121,122,123,124,131,133,153,154,155,158,160,163,164,165,169,173,174,176,182,192,193,194,196,197,198,199,209,223,224,235,],[-107,145,-109,-91,-109,-108,-93,-92,-106,-105,-109,-109,-93,-96,-95,-98,-97,-83,-86,-87,-90,-57,-109,-91,-92,-94,-103,-104,-102,-85,-84,-88,-89,-109,-101,-99,-100,]),'FLOAT':([5,27,32,41,47,48,51,55,59,107,],[14,14,14,14,14,14,14,14,14,14,]),'OR':([111,113,114,115,117,118,119,120,121,122,123,124,131,133,151,152,153,154,155,158,160,163,164,165,169,173,174,176,182,185,186,187,188,189,190,192,193,194,196,197,198,199,209,223,224,235,],[-107,143,-109,-109,-91,-109,-108,-93,-92,-106,-105,-109,-109,-93,-82,-75,-96,-95,-98,-97,-83,-86,-87,-90,-57,-109,-91,-92,-94,-76,-77,-79,-80,-78,-81,-103,-104,-102,-85,-84,-88,-89,-109,-101,-99,-100,]),'DICT':([5,27,47,48,51,],[16,40,16,16,16,]),'CTED':([50,91,94,96,99,100,104,112,130,141,143,145,146,147,148,149,150,156,161,162,166,167,168,171,181,202,204,218,222,],[64,123,123,123,123,123,137,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'GTOEQ':([111,114,115,117,118,119,120,121,122,123,124,131,133,153,154,155,158,160,163,164,165,169,173,174,176,182,192,193,194,196,197,198,199,209,223,224,235,],[-107,147,-109,-91,-109,-108,-93,-92,-106,-105,-109,-109,-93,-96,-95,-98,-97,-83,-86,-87,-90,-57,-109,-91,-92,-94,-103,-104,-102,-85,-84,-88,-89,-109,-101,-99,-100,]),'{':([3,9,13,14,15,17,29,30,42,43,66,68,159,178,231,232,],[4,-10,-7,-8,-9,-11,-109,44,56,-34,-33,88,195,206,236,237,]),'MAIN':([4,6,7,8,10,11,12,19,21,23,24,28,47,48,51,57,60,61,62,63,65,110,207,],[-109,-2,-109,-3,-19,-18,-20,-6,-109,-5,30,-4,-109,-109,-109,-31,-39,-42,-43,-37,-38,-36,-35,]),'}':([6,8,10,11,12,19,31,44,47,48,51,56,58,60,61,62,63,65,69,70,71,73,74,75,76,77,80,89,90,92,101,180,195,206,210,220,221,225,229,233,234,236,237,238,239,240,241,],[-2,-3,-19,-18,-20,-6,45,-109,-109,-109,-109,-109,-109,-39,-42,-43,-37,-38,-109,-109,-48,-47,-44,-15,-45,92,-14,110,-46,-12,-13,207,-109,-109,225,229,-32,-49,-109,-67,-69,-109,-109,240,241,-50,-68,]),'CTEF':([91,94,96,99,100,112,130,141,143,145,146,147,148,149,150,156,161,162,166,167,168,171,181,202,204,218,222,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cyExp':([118,],[160,]),'body':([58,69,70,109,195,206,236,237,],[77,89,90,139,210,220,238,239,]),'vars':([4,44,56,88,],[6,6,6,6,]),'instr':([58,69,70,109,195,206,236,237,],[70,70,70,70,70,70,70,70,]),'optionalMatrix':([86,],[103,]),'funcCall':([58,69,70,91,94,96,99,100,109,112,130,141,143,145,146,147,148,149,150,156,161,162,166,167,168,171,181,195,204,206,218,222,236,237,],[83,83,83,120,120,133,120,120,83,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,83,120,83,133,120,83,83,]),'cyTerm':([124,],[164,]),'whileCycle':([58,69,70,109,195,206,236,237,],[71,71,71,71,71,71,71,71,]),'opParamCall':([94,],[127,]),'assignMatrix':([177,],[203,]),'optionalElse':([229,],[233,]),'forCycle':([58,69,70,109,195,206,236,237,],[73,73,73,73,73,73,73,73,]),'opFunctions':([7,21,],[24,28,]),'structType':([27,],[37,]),'struct':([27,],[39,]),'opVars':([4,44,56,88,],[7,58,69,109,]),'opStruct':([115,131,173,],[153,153,153,]),'cyExpresion':([113,],[142,]),'param':([41,107,],[53,138,]),'sExp':([91,94,96,99,100,112,130,141,143,156,168,171,181,204,218,222,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'init':([79,125,203,],[98,98,217,]),'program':([0,],[1,]),'dict':([25,40,],[33,52,]),'opMatrix':([209,],[224,]),'main':([24,],[31,]),'type':([5,27,32,41,47,48,51,55,59,107,],[18,38,46,54,18,18,18,68,85,54,]),'dictIndex':([157,],[194,]),'empty':([4,7,21,26,29,44,47,48,51,56,58,67,69,70,86,87,88,94,109,113,114,115,118,124,129,131,173,177,195,201,206,209,229,236,237,],[8,23,23,36,43,8,62,62,62,8,76,36,76,76,105,108,8,128,76,144,151,155,163,165,172,155,155,205,76,172,76,223,234,76,76,]),'opReturns':([42,],[57,]),'function':([7,21,],[21,21,]),'return':([139,],[180,]),'opDictionary':([115,131,173,],[158,158,158,]),'term':([91,94,96,99,100,112,130,141,143,145,146,147,148,149,150,156,161,162,168,171,181,204,218,222,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,196,197,118,118,118,118,118,118,]),'assignOptions':([79,125,],[97,97,]),'opAccess':([115,131,173,],[154,154,154,]),'cyInstruction':([58,69,70,109,195,206,236,237,],[74,74,74,74,74,74,74,74,]),'condition':([58,69,70,109,195,206,236,237,],[80,80,80,80,80,80,80,80,]),'cycle':([58,69,70,109,195,206,236,237,],[75,75,75,75,75,75,75,75,]),'expresion':([91,94,96,99,100,112,130,141,143,156,168,171,181,204,218,222,],[116,129,132,135,136,140,140,183,184,191,200,201,208,219,132,230,]),'c':([58,69,70,109,195,206,236,237,],[82,82,82,82,82,82,82,82,]),'e':([5,47,48,51,],[10,10,10,10,]),'d':([5,47,48,51,],[11,11,11,11,]),'g':([26,67,],[34,87,]),'f':([5,47,48,51,],[12,12,12,12,]),'i':([96,218,],[134,134,]),'h':([47,48,51,],[60,63,65,]),'initDict':([79,125,],[95,95,]),'j':([130,202,],[175,214,]),'assign':([58,69,70,93,109,195,206,211,236,237,],[84,84,84,126,84,84,84,226,84,84,]),'cte':([91,94,96,99,100,112,130,141,143,145,146,147,148,149,150,156,161,162,166,167,168,171,181,202,204,218,222,],[121,121,121,121,121,121,176,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,215,121,121,121,]),'exp':([91,94,96,99,100,112,130,141,143,145,146,147,148,149,150,156,168,171,181,204,218,222,],[114,114,114,114,114,114,114,114,114,185,186,187,188,189,190,114,114,114,114,114,114,114,]),'opParameters':([29,],[42,]),'k':([87,],[106,]),'opSExp':([114,],[152,]),'cyParamCall':([129,201,],[170,212,]),'declare':([5,47,48,51,],[19,61,61,61,]),'fact':([91,94,96,99,100,112,130,141,143,145,146,147,148,149,150,156,161,162,166,167,168,171,181,204,218,222,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,198,199,124,124,124,124,124,124,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID { opVars opFunctions main }','program',7,'p_program','CT.py',56),
  ('opVars -> vars','opVars',1,'p_opVars','CT.py',61),
  ('opVars -> empty','opVars',1,'p_opVars','CT.py',62),
  ('opFunctions -> function opFunctions','opFunctions',2,'p_opFunctions','CT.py',67),
  ('opFunctions -> empty','opFunctions',1,'p_opFunctions','CT.py',68),
  ('vars -> VARS declare','vars',2,'p_vars','CT.py',72),
  ('type -> INT','type',1,'p_type','CT.py',77),
  ('type -> FLOAT','type',1,'p_type','CT.py',78),
  ('type -> STRING','type',1,'p_type','CT.py',79),
  ('type -> OBJECT','type',1,'p_type','CT.py',80),
  ('type -> BOOL','type',1,'p_type','CT.py',81),
  ('main -> MAIN { opVars body }','main',5,'p_main','CT.py',86),
  ('instr -> c ;','instr',2,'p_instr','CT.py',91),
  ('instr -> condition','instr',1,'p_instr','CT.py',92),
  ('instr -> cycle','instr',1,'p_instr','CT.py',93),
  ('c -> assign','c',1,'p_c','CT.py',97),
  ('c -> funcCall','c',1,'p_c','CT.py',98),
  ('declare -> d','declare',1,'p_declare','CT.py',102),
  ('declare -> e','declare',1,'p_declare','CT.py',103),
  ('declare -> f','declare',1,'p_declare','CT.py',104),
  ('init -> = i','init',2,'p_init','CT.py',109),
  ('i -> expresion','i',1,'p_i','CT.py',114),
  ('i -> funcCall','i',1,'p_i','CT.py',115),
  ('initDict -> = ( j : j )','initDict',6,'p_initDict','CT.py',120),
  ('j -> CTES','j',1,'p_j','CT.py',125),
  ('j -> cte','j',1,'p_j','CT.py',126),
  ('j -> ID','j',1,'p_j','CT.py',127),
  ('param -> type ID g k','param',4,'p_param','CT.py',132),
  ('k -> ; param','k',2,'p_k','CT.py',137),
  ('k -> empty','k',1,'p_k','CT.py',138),
  ('function -> FUNC ID opParameters opReturns','function',4,'p_function','CT.py',143),
  ('return -> RETURN expresion ;','return',3,'p_return','CT.py',148),
  ('opParameters -> ( param )','opParameters',3,'p_opParameters','CT.py',153),
  ('opParameters -> empty','opParameters',1,'p_opParameters','CT.py',154),
  ('opReturns -> RETURNS type { opVars body return }','opReturns',7,'p_opReturns','CT.py',159),
  ('opReturns -> { opVars body }','opReturns',4,'p_opReturns','CT.py',160),
  ('d -> type ID g ; h','d',5,'p_d','CT.py',165),
  ('e -> STRUCT ID struct ; h','e',5,'p_e','CT.py',170),
  ('f -> DICT ID dict ; h','f',5,'p_f','CT.py',175),
  ('g -> , ID','g',2,'p_g','CT.py',180),
  ('g -> empty','g',1,'p_g','CT.py',181),
  ('h -> declare','h',1,'p_h','CT.py',186),
  ('h -> empty','h',1,'p_h','CT.py',187),
  ('body -> cyInstruction','body',1,'p_body','CT.py',192),
  ('body -> empty','body',1,'p_body','CT.py',193),
  ('cyInstruction -> instr body','cyInstruction',2,'p_cyInstruction','CT.py',198),
  ('cycle -> forCycle','cycle',1,'p_cycle','CT.py',203),
  ('cycle -> whileCycle','cycle',1,'p_cycle','CT.py',204),
  ('whileCycle -> WHILE ( expresion ) { body }','whileCycle',7,'p_whileCycle','CT.py',209),
  ('forCycle -> FOR ( assign ; expresion ; assign ) { body }','forCycle',11,'p_forCycle','CT.py',214),
  ('assign -> ID assignOptions','assign',2,'p_assign','CT.py',219),
  ('assignOptions -> init','assignOptions',1,'p_assignOptions','CT.py',224),
  ('assignOptions -> initDict','assignOptions',1,'p_assignOptions','CT.py',225),
  ('assignOptions -> [ expresion ] assignMatrix init','assignOptions',5,'p_assignOptions','CT.py',226),
  ('assignMatrix -> [ expresion ]','assignMatrix',3,'p_assignMatrix','CT.py',231),
  ('assignMatrix -> empty','assignMatrix',1,'p_assignMatrix','CT.py',232),
  ('funcCall -> ID ( opParamCall )','funcCall',4,'p_funcCall','CT.py',237),
  ('opParamCall -> expresion cyParamCall','opParamCall',2,'p_opParamCall','CT.py',242),
  ('opParamCall -> empty','opParamCall',1,'p_opParamCall','CT.py',243),
  ('cyParamCall -> , expresion cyParamCall','cyParamCall',3,'p_cyParamCall','CT.py',248),
  ('cyParamCall -> empty','cyParamCall',1,'p_cyParamCall','CT.py',249),
  ('struct -> structType [ CTED ] optionalMatrix','struct',5,'p_struct','CT.py',254),
  ('structType -> type','structType',1,'p_structType','CT.py',259),
  ('structType -> DICT dict','structType',2,'p_structType','CT.py',260),
  ('optionalMatrix -> [ CTED ]','optionalMatrix',3,'p_optionalMatrix','CT.py',265),
  ('optionalMatrix -> empty','optionalMatrix',1,'p_optionalMatrix','CT.py',266),
  ('condition -> IF ( expresion ) { body } optionalElse','condition',8,'p_condition','CT.py',271),
  ('optionalElse -> ELSE { body }','optionalElse',4,'p_optionalElse','CT.py',276),
  ('optionalElse -> empty','optionalElse',1,'p_optionalElse','CT.py',277),
  ('dict -> ( type : type )','dict',5,'p_dict','CT.py',282),
  ('expresion -> sExp cyExpresion','expresion',2,'p_expresion','CT.py',287),
  ('cyExpresion -> AND expresion','cyExpresion',2,'p_cyExpresion','CT.py',292),
  ('cyExpresion -> OR expresion','cyExpresion',2,'p_cyExpresion','CT.py',293),
  ('cyExpresion -> empty','cyExpresion',1,'p_cyExpresion','CT.py',294),
  ('sExp -> exp opSExp','sExp',2,'p_sExp','CT.py',299),
  ('opSExp -> EQ exp','opSExp',2,'p_opSExp','CT.py',304),
  ('opSExp -> DIF exp','opSExp',2,'p_opSExp','CT.py',305),
  ('opSExp -> LTOEQ exp','opSExp',2,'p_opSExp','CT.py',306),
  ('opSExp -> GTOEQ exp','opSExp',2,'p_opSExp','CT.py',307),
  ('opSExp -> > exp','opSExp',2,'p_opSExp','CT.py',308),
  ('opSExp -> < exp','opSExp',2,'p_opSExp','CT.py',309),
  ('opSExp -> empty','opSExp',1,'p_opSExp','CT.py',310),
  ('exp -> term cyExp','exp',2,'p_exp','CT.py',315),
  ('cyExp -> + term','cyExp',2,'p_cyExp','CT.py',320),
  ('cyExp -> - term','cyExp',2,'p_cyExp','CT.py',321),
  ('cyExp -> empty','cyExp',1,'p_cyExp','CT.py',322),
  ('term -> fact cyTerm','term',2,'p_term','CT.py',327),
  ('cyTerm -> * fact','cyTerm',2,'p_cyTerm','CT.py',332),
  ('cyTerm -> / fact','cyTerm',2,'p_cyTerm','CT.py',333),
  ('cyTerm -> empty','cyTerm',1,'p_cyTerm','CT.py',334),
  ('fact -> CTES','fact',1,'p_fact','CT.py',339),
  ('fact -> cte','fact',1,'p_fact','CT.py',340),
  ('fact -> funcCall','fact',1,'p_fact','CT.py',341),
  ('fact -> ( expresion )','fact',3,'p_fact','CT.py',342),
  ('fact -> ID opAccess','fact',2,'p_fact','CT.py',343),
  ('opAccess -> opStruct','opAccess',1,'p_opAccess','CT.py',348),
  ('opAccess -> opDictionary','opAccess',1,'p_opAccess','CT.py',349),
  ('opAccess -> empty','opAccess',1,'p_opAccess','CT.py',350),
  ('opStruct -> [ expresion ] opMatrix','opStruct',4,'p_opStruct','CT.py',355),
  ('opMatrix -> [ expresion ]','opMatrix',3,'p_opMatrix','CT.py',360),
  ('opMatrix -> empty','opMatrix',1,'p_opMatrix','CT.py',361),
  ('opDictionary -> . dictIndex','opDictionary',2,'p_opDictionary','CT.py',366),
  ('dictIndex -> FIRST','dictIndex',1,'p_dictIndex','CT.py',371),
  ('dictIndex -> LAST','dictIndex',1,'p_dictIndex','CT.py',372),
  ('cte -> CTED','cte',1,'p_cte','CT.py',377),
  ('cte -> CTEF','cte',1,'p_cte','CT.py',378),
  ('cte -> TRUE','cte',1,'p_cte','CT.py',379),
  ('cte -> FALSE','cte',1,'p_cte','CT.py',380),
  ('empty -> <empty>','empty',0,'p_empty','CT.py',385),
]
