
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '71E256867032F5D4FE9803EA5020DCAF'
    
_lr_action_items = {'VARS':([4,32,74,],[6,6,6,]),'OBJECT':([6,31,34,36,40,44,47,50,51,52,53,73,76,96,113,114,115,137,],[13,13,13,13,-41,13,13,13,13,-40,13,-73,13,-73,-28,13,-30,-29,]),'WHILE':([7,8,14,15,16,23,32,43,50,51,53,55,56,58,60,65,74,77,78,79,80,81,94,97,140,148,157,161,164,165,166,167,170,171,],[-2,-3,-19,-18,-20,-6,-73,57,-73,-73,-73,57,-48,-47,-15,-14,-73,-39,-42,-43,-37,-38,-13,57,57,57,-49,-73,-64,-66,57,57,-50,-65,]),'PROGRAM':([0,],[2,]),'TRUE':([109,144,],[134,134,]),')':([13,17,18,19,21,40,44,52,68,69,70,71,72,73,84,87,88,89,90,91,93,96,98,100,101,104,105,106,107,108,112,113,115,123,124,125,126,127,130,131,132,133,134,137,142,143,152,153,154,158,159,],[-10,-7,-8,-9,-11,-41,-73,-40,-17,-16,-33,95,-34,-73,-73,-73,-53,-73,-51,-52,-73,-73,117,121,-68,-73,126,-22,-23,-21,136,-28,-30,-58,-73,-60,-57,-25,-26,-70,-69,-27,-71,-29,-59,-72,159,-54,-73,162,-24,]),'(':([28,29,57,63,64,66,89,110,],[34,36,84,86,87,93,109,87,]),',':([30,73,87,101,104,124,],[39,39,-73,-68,124,-73,]),'BOOL':([6,31,34,36,40,44,47,50,51,52,53,73,76,96,113,114,115,137,],[21,21,21,21,-41,21,21,21,21,-40,21,-73,21,-73,-28,21,-30,-29,]),';':([30,37,38,40,41,52,67,68,69,73,88,89,90,91,96,99,101,103,106,107,108,117,118,120,122,126,141,149,153,154,159,],[-73,50,51,-41,53,-40,94,-17,-16,-73,-53,-73,-51,-52,114,-73,-68,122,-22,-23,-21,-67,-61,-63,-73,-57,151,-62,-54,-73,-24,]),':':([13,17,18,19,21,49,68,69,88,89,90,91,101,106,107,108,126,127,129,130,131,132,133,134,143,153,154,159,],[-10,-7,-8,-9,-11,76,-17,-16,-53,-73,-51,-52,-68,-22,-23,-21,-57,-25,144,-26,-70,-69,-27,-71,-72,-54,-73,-24,]),'=':([64,102,135,145,147,160,],[89,89,-73,154,-56,-55,]),'$end':([1,33,],[0,-1,]),'STRING':([6,31,34,36,40,44,47,50,51,52,53,73,76,96,113,114,115,137,],[19,19,19,19,-41,19,19,19,19,-40,19,-73,19,-73,-28,19,-30,-29,]),'FOR':([7,8,14,15,16,23,32,43,50,51,53,55,56,58,60,65,74,77,78,79,80,81,94,97,140,148,157,161,164,165,166,167,170,171,],[-2,-3,-19,-18,-20,-6,-73,63,-73,-73,-73,63,-48,-47,-15,-14,-73,-39,-42,-43,-37,-38,-13,63,63,63,-49,-73,-64,-66,63,63,-50,-65,]),'ELSE':([161,],[163,]),'RETURNS':([35,95,],[47,-32,]),'FUNC':([4,5,7,8,9,14,15,16,23,50,51,53,77,78,79,80,81,138,],[-73,11,-2,-3,11,-19,-18,-20,-6,-73,-73,-73,-39,-42,-43,-37,-38,-31,]),'[':([13,17,18,19,21,42,64,99,102,135,],[-10,-7,-8,-9,-11,54,92,119,92,146,]),']':([82,92,101,111,139,146,155,],[99,-73,-68,135,149,-73,160,]),'ID':([2,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,32,39,43,45,50,51,53,55,56,58,60,65,74,77,78,79,80,81,86,89,94,97,109,128,140,144,148,151,154,157,161,164,165,166,167,170,171,],[3,-2,-3,28,-10,-19,-18,-20,-7,-8,-9,29,-11,30,-6,31,-73,52,64,73,-73,-73,-73,64,-48,-47,-15,-14,-73,-39,-42,-43,-37,-38,102,110,-13,64,133,64,64,133,64,102,110,-49,-73,-64,-66,64,64,-50,-65,]),'IF':([7,8,14,15,16,23,32,43,50,51,53,55,56,58,60,65,74,77,78,79,80,81,94,97,140,148,157,161,164,165,166,167,170,171,],[-2,-3,-19,-18,-20,-6,-73,66,-73,-73,-73,66,-48,-47,-15,-14,-73,-39,-42,-43,-37,-38,-13,66,66,66,-49,-73,-64,-66,66,66,-50,-65,]),'CTES':([109,144,],[127,127,]),'FALSE':([109,144,],[128,128,]),'STRUCT':([6,50,51,53,],[24,24,24,24,]),'INT':([6,31,34,36,40,44,47,50,51,52,53,73,76,96,113,114,115,137,],[17,17,17,17,-41,17,17,17,17,-40,17,-73,17,-73,-28,17,-30,-29,]),'FLOAT':([6,31,34,36,40,44,47,50,51,52,53,73,76,96,113,114,115,137,],[18,18,18,18,-41,18,18,18,18,-40,18,-73,18,-73,-28,18,-30,-29,]),'DICT':([6,50,51,53,],[20,20,20,20,]),'CTED':([54,109,119,144,],[82,132,139,132,]),'{':([3,13,17,18,19,21,26,35,46,48,75,95,121,136,162,163,],[4,-10,-7,-8,-9,-11,32,-73,74,-36,-35,-32,140,148,166,167,]),'MAIN':([4,5,7,8,9,10,12,14,15,16,23,25,50,51,53,77,78,79,80,81,138,],[-73,-73,-2,-3,-73,26,-5,-19,-18,-20,-6,-4,-73,-73,-73,-39,-42,-43,-37,-38,-31,]),'}':([7,8,14,15,16,23,27,32,43,50,51,53,55,56,58,59,60,61,62,65,74,77,78,79,80,81,83,85,94,97,116,140,148,150,156,157,161,164,165,166,167,168,169,170,171,],[-2,-3,-19,-18,-20,-6,33,-73,-73,-73,-73,-73,-73,-48,-47,-44,-15,-45,85,-14,-73,-39,-42,-43,-37,-38,-46,-12,-13,-73,138,-73,-73,157,161,-49,-73,-64,-66,-73,-73,170,171,-50,-65,]),'CTEF':([109,144,],[131,131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([43,55,97,140,148,166,167,],[62,83,116,150,156,168,169,]),'vars':([4,32,74,],[7,7,7,]),'instr':([43,55,97,140,148,166,167,],[55,55,55,55,55,55,55,]),'optionalMatrix':([99,],[118,]),'whileCycle':([43,55,97,140,148,166,167,],[56,56,56,56,56,56,56,]),'opParamCall':([87,124,],[105,142,]),'n':([44,],[71,]),'forCycle':([43,55,97,140,148,166,167,],[58,58,58,58,58,58,58,]),'optionalElse':([161,],[164,]),'struct':([31,],[41,]),'cycleInstruction':([43,55,97,140,148,166,167,],[59,59,59,59,59,59,59,]),'param':([34,44,114,],[44,70,137,]),'init':([64,102,145,],[91,91,153,]),'program':([0,],[1,]),'dict':([29,],[37,]),'main':([10,],[27,]),'type':([6,31,34,36,44,47,50,51,53,76,114,],[22,42,45,49,45,75,22,22,22,98,45,]),'empty':([4,5,9,30,32,35,43,44,50,51,53,55,73,74,84,87,89,92,93,96,97,99,104,122,124,135,140,146,148,154,161,166,167,],[8,12,12,40,8,48,61,72,79,79,79,61,40,8,101,101,101,101,101,115,61,120,125,101,101,147,61,101,61,101,165,61,61,]),'function':([5,9,],[9,9,]),'expresion':([84,87,89,92,93,122,124,146,154,],[100,104,106,111,112,141,104,155,106,]),'assignMatrix':([135,],[145,]),'assignOptions':([64,102,],[90,90,]),'g':([30,73,],[38,96,]),'condition':([43,55,97,140,148,166,167,],[65,65,65,65,65,65,65,]),'cycle':([43,55,97,140,148,166,167,],[60,60,60,60,60,60,60,]),'a':([4,32,74,],[5,43,97,]),'c':([43,55,97,128,140,148,166,167,],[67,67,67,143,67,67,67,67,]),'b':([5,9,],[10,25,]),'e':([6,50,51,53,],[14,14,14,14,]),'d':([6,50,51,53,],[15,15,15,15,]),'funcCall':([43,55,89,97,128,140,148,154,166,167,],[68,68,107,68,68,68,68,107,68,68,]),'f':([6,50,51,53,],[16,16,16,16,]),'i':([89,154,],[108,108,]),'h':([50,51,53,],[77,80,81,]),'initDict':([64,102,],[88,88,]),'j':([109,144,],[129,152,]),'m':([35,],[46,]),'l':([28,],[35,]),'assign':([43,55,86,97,128,140,148,151,166,167,],[69,69,103,69,69,69,69,158,69,69,]),'cte':([109,144,],[130,130,]),'k':([96,],[113,]),'cyParamCall':([104,],[123,]),'declare':([6,50,51,53,],[23,78,78,78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID { a b main }','program',7,'p_program','CT.py',56),
  ('a -> vars','a',1,'p_a','CT.py',61),
  ('a -> empty','a',1,'p_a','CT.py',62),
  ('b -> function b','b',2,'p_b','CT.py',67),
  ('b -> empty','b',1,'p_b','CT.py',68),
  ('vars -> VARS declare','vars',2,'p_vars','CT.py',72),
  ('type -> INT','type',1,'p_type','CT.py',77),
  ('type -> FLOAT','type',1,'p_type','CT.py',78),
  ('type -> STRING','type',1,'p_type','CT.py',79),
  ('type -> OBJECT','type',1,'p_type','CT.py',80),
  ('type -> BOOL','type',1,'p_type','CT.py',81),
  ('main -> MAIN { a body }','main',5,'p_main','CT.py',86),
  ('instr -> c ;','instr',2,'p_instr','CT.py',91),
  ('instr -> condition','instr',1,'p_instr','CT.py',92),
  ('instr -> cycle','instr',1,'p_instr','CT.py',93),
  ('c -> assign','c',1,'p_c','CT.py',97),
  ('c -> funcCall','c',1,'p_c','CT.py',98),
  ('declare -> d','declare',1,'p_declare','CT.py',102),
  ('declare -> e','declare',1,'p_declare','CT.py',103),
  ('declare -> f','declare',1,'p_declare','CT.py',104),
  ('init -> = i','init',2,'p_init','CT.py',109),
  ('i -> expresion','i',1,'p_i','CT.py',114),
  ('i -> funcCall','i',1,'p_i','CT.py',115),
  ('initDict -> = ( j : j )','initDict',6,'p_initDict','CT.py',120),
  ('j -> CTES','j',1,'p_j','CT.py',125),
  ('j -> cte','j',1,'p_j','CT.py',126),
  ('j -> ID','j',1,'p_j','CT.py',127),
  ('param -> type ID g k','param',4,'p_param','CT.py',132),
  ('k -> ; param','k',2,'p_k','CT.py',137),
  ('k -> empty','k',1,'p_k','CT.py',138),
  ('function -> FUNC ID l m { a body }','function',8,'p_function','CT.py',143),
  ('l -> ( param n )','l',4,'p_l','CT.py',148),
  ('n -> param','n',1,'p_n','CT.py',153),
  ('n -> empty','n',1,'p_n','CT.py',154),
  ('m -> RETURNS type','m',2,'p_m','CT.py',159),
  ('m -> empty','m',1,'p_m','CT.py',160),
  ('d -> type ID g ; h','d',5,'p_d','CT.py',165),
  ('e -> STRUCT ID struct ; h','e',5,'p_e','CT.py',170),
  ('f -> DICT ID dict ; h','f',5,'p_f','CT.py',175),
  ('g -> , ID','g',2,'p_g','CT.py',180),
  ('g -> empty','g',1,'p_g','CT.py',181),
  ('h -> declare','h',1,'p_h','CT.py',186),
  ('h -> empty','h',1,'p_h','CT.py',187),
  ('body -> cycleInstruction','body',1,'p_body','CT.py',192),
  ('body -> empty','body',1,'p_body','CT.py',193),
  ('cycleInstruction -> instr body','cycleInstruction',2,'p_cycleInstruction','CT.py',198),
  ('cycle -> forCycle','cycle',1,'p_cycle','CT.py',203),
  ('cycle -> whileCycle','cycle',1,'p_cycle','CT.py',204),
  ('whileCycle -> WHILE ( expresion ) { body }','whileCycle',7,'p_whileCycle','CT.py',209),
  ('forCycle -> FOR ( assign ; expresion ; assign ) { body }','forCycle',11,'p_forCycle','CT.py',214),
  ('assign -> ID assignOptions','assign',2,'p_assign','CT.py',219),
  ('assignOptions -> init','assignOptions',1,'p_assignOptions','CT.py',224),
  ('assignOptions -> initDict','assignOptions',1,'p_assignOptions','CT.py',225),
  ('assignOptions -> [ expresion ] assignMatrix init','assignOptions',5,'p_assignOptions','CT.py',226),
  ('assignMatrix -> [ expresion ]','assignMatrix',3,'p_assignMatrix','CT.py',231),
  ('assignMatrix -> empty','assignMatrix',1,'p_assignMatrix','CT.py',232),
  ('funcCall -> ID ( opParamCall )','funcCall',4,'p_funcCall','CT.py',237),
  ('opParamCall -> expresion cyParamCall','opParamCall',2,'p_opParamCall','CT.py',242),
  ('cyParamCall -> , opParamCall','cyParamCall',2,'p_cyParamCall','CT.py',247),
  ('cyParamCall -> empty','cyParamCall',1,'p_cyParamCall','CT.py',248),
  ('struct -> type [ CTED ] optionalMatrix','struct',5,'p_struct','CT.py',253),
  ('optionalMatrix -> [ CTED ]','optionalMatrix',3,'p_optionalMatrix','CT.py',258),
  ('optionalMatrix -> empty','optionalMatrix',1,'p_optionalMatrix','CT.py',259),
  ('condition -> IF ( expresion ) { body } optionalElse','condition',8,'p_condition','CT.py',264),
  ('optionalElse -> ELSE { body }','optionalElse',4,'p_optionalElse','CT.py',269),
  ('optionalElse -> empty','optionalElse',1,'p_optionalElse','CT.py',270),
  ('dict -> ( type : type )','dict',5,'p_dict','CT.py',275),
  ('expresion -> empty','expresion',1,'p_expresion','CT.py',280),
  ('cte -> CTED','cte',1,'p_cte','CT.py',285),
  ('cte -> CTEF','cte',1,'p_cte','CT.py',286),
  ('cte -> TRUE','cte',1,'p_cte','CT.py',287),
  ('cte -> FALSE c','cte',2,'p_cte','CT.py',288),
  ('empty -> <empty>','empty',0,'p_empty','CT.py',293),
]
