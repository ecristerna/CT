Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> errorProgram PROGRAM ID saveID { opVars opFunctions main }
Rule 2     saveID -> <empty>
Rule 3     errorProgram -> <empty>
Rule 4     opVars -> vars
Rule 5     opVars -> empty
Rule 6     opFunctions -> function opFunctions
Rule 7     opFunctions -> empty
Rule 8     vars -> errorVars VARS declare
Rule 9     createVarsTable -> <empty>
Rule 10    errorVars -> <empty>
Rule 11    type -> errorType INT
Rule 12    type -> FLOAT
Rule 13    type -> STRING
Rule 14    type -> OBJECT
Rule 15    type -> BOOL
Rule 16    errorType -> <empty>
Rule 17    main -> errorMain MAIN { opVars body }
Rule 18    errorMain -> <empty>
Rule 19    instr -> basicStatements ;
Rule 20    instr -> condition
Rule 21    instr -> cycle
Rule 22    basicStatements -> assign
Rule 23    basicStatements -> funcCall
Rule 24    declare -> basicDeclare
Rule 25    declare -> structDeclare
Rule 26    declare -> dictDeclare
Rule 27    init -> = initWith errorInit
Rule 28    errorInit -> <empty>
Rule 29    initWith -> expresion
Rule 30    initWith -> funcCall
Rule 31    initDict -> = ( dictType : dictType ) errorInitDict
Rule 32    errorInitDict -> <empty>
Rule 33    dictType -> errorDictType CTES
Rule 34    dictType -> cte
Rule 35    dictType -> ID
Rule 36    errorDictType -> <empty>
Rule 37    param -> type errorParam ID cyTypeParam cyParam
Rule 38    errorParam -> <empty>
Rule 39    cyParam -> errorCyParam ; param
Rule 40    cyParam -> empty
Rule 41    errorCyParam -> <empty>
Rule 42    function -> errorFunction FUNC ID opParameters opReturns }
Rule 43    errorFunction -> <empty>
Rule 44    return -> errorReturn RETURN expresion ;
Rule 45    errorReturn -> <empty>
Rule 46    opParameters -> ( param ) errorOpParameters
Rule 47    opParameters -> empty
Rule 48    errorOpParameters -> <empty>
Rule 49    opReturns -> errorOpReturns RETURNS type { opVars body return
Rule 50    opReturns -> { opVars body
Rule 51    errorOpReturns -> <empty>
Rule 52    basicDeclare -> type errorBasicDeclare ID cyTypeParam ; cyDeclare
Rule 53    errorBasicDeclare -> <empty>
Rule 54    structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare
Rule 55    errorStructDeclare -> <empty>
Rule 56    dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare
Rule 57    errorDictDeclare -> <empty>
Rule 58    cyTypeParam -> , ID
Rule 59    cyTypeParam -> empty
Rule 60    cyDeclare -> declare
Rule 61    cyDeclare -> empty
Rule 62    body -> errorBody cyInstruction
Rule 63    body -> empty
Rule 64    errorBody -> <empty>
Rule 65    cyInstruction -> instr body
Rule 66    cycle -> forCycle
Rule 67    cycle -> whileCycle
Rule 68    whileCycle -> errorWhileCycle WHILE ( expresion ) { body }
Rule 69    errorWhileCycle -> <empty>
Rule 70    forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body }
Rule 71    errorForCycle -> <empty>
Rule 72    assign -> ID errorAssign assignOptions
Rule 73    errorAssign -> <empty>
Rule 74    assignOptions -> init
Rule 75    assignOptions -> initDict
Rule 76    assignOptions -> [ expresion ] assignMatrix init
Rule 77    assignMatrix -> [ expresion ] errorAssignMatrix
Rule 78    assignMatrix -> empty
Rule 79    errorAssignMatrix -> <empty>
Rule 80    funcCall -> ID ( opParamCall )
Rule 81    opParamCall -> expresion cyParamCall
Rule 82    opParamCall -> empty
Rule 83    cyParamCall -> , expresion cyParamCall
Rule 84    cyParamCall -> empty
Rule 85    struct -> structType [ CTED ] optionalMatrix
Rule 86    structType -> type
Rule 87    structType -> DICT dict
Rule 88    optionalMatrix -> [ CTED ]
Rule 89    optionalMatrix -> empty
Rule 90    condition -> errorCondition IF ( expresion ) { body } optionalElse
Rule 91    errorCondition -> <empty>
Rule 92    optionalElse -> errorElse ELSE { body }
Rule 93    optionalElse -> empty
Rule 94    errorElse -> <empty>
Rule 95    dict -> errorDict ( type : type )
Rule 96    errorDict -> <empty>
Rule 97    expresion -> sExp cyExpresion errorExpresion
Rule 98    errorExpresion -> <empty>
Rule 99    cyExpresion -> AND expresion
Rule 100   cyExpresion -> OR expresion
Rule 101   cyExpresion -> empty
Rule 102   sExp -> exp errorOpSExp opSExp
Rule 103   opSExp -> EQ exp
Rule 104   opSExp -> DIF exp
Rule 105   opSExp -> LTOEQ exp
Rule 106   opSExp -> GTOEQ exp
Rule 107   opSExp -> > exp
Rule 108   opSExp -> < exp
Rule 109   opSExp -> empty
Rule 110   errorOpSExp -> <empty>
Rule 111   exp -> term errorCyExp cyExp
Rule 112   cyExp -> + term
Rule 113   cyExp -> - term
Rule 114   cyExp -> empty
Rule 115   errorCyExp -> <empty>
Rule 116   term -> fact cyTerm
Rule 117   cyTerm -> * errorFact fact
Rule 118   cyTerm -> / fact
Rule 119   cyTerm -> empty
Rule 120   fact -> CTES
Rule 121   fact -> cte
Rule 122   fact -> funcCall
Rule 123   fact -> ( expresion )
Rule 124   fact -> ID opAccess errorOpAccess
Rule 125   errorFact -> <empty>
Rule 126   opAccess -> opStruct
Rule 127   opAccess -> opDictionary
Rule 128   opAccess -> empty
Rule 129   errorOpAccess -> <empty>
Rule 130   opStruct -> errorOpStruct [ expresion ] opMatrix
Rule 131   errorOpStruct -> <empty>
Rule 132   opMatrix -> errorOpMatrix [ expresion ]
Rule 133   opMatrix -> empty
Rule 134   errorOpMatrix -> <empty>
Rule 135   opDictionary -> . dictIndex
Rule 136   dictIndex -> FIRST
Rule 137   dictIndex -> LAST
Rule 138   cte -> CTED
Rule 139   cte -> CTEF
Rule 140   cte -> TRUE
Rule 141   cte -> FALSE
Rule 142   empty -> <empty>

Terminals, with rules where they appear

(                    : 31 46 68 70 80 90 95 123
)                    : 31 46 68 70 80 90 95 123
*                    : 117
+                    : 112
,                    : 58 83
-                    : 113
.                    : 135
/                    : 118
:                    : 31 95
;                    : 19 39 44 52 54 56 70 70
<                    : 108
=                    : 27 31
>                    : 107
AND                  : 99
BOOL                 : 15
CTED                 : 85 88 138
CTEF                 : 139
CTES                 : 33 120
DICT                 : 56 87
DIF                  : 104
ELSE                 : 92
EQ                   : 103
FALSE                : 141
FIRST                : 136
FLOAT                : 12
FOR                  : 70
FUNC                 : 42
GTOEQ                : 106
ID                   : 1 35 37 42 52 54 56 58 72 80 124
IF                   : 90
INT                  : 11
LAST                 : 137
LTOEQ                : 105
MAIN                 : 17
OBJECT               : 14
OR                   : 100
PROGRAM              : 1
RETURN               : 44
RETURNS              : 49
STRING               : 13
STRUCT               : 54
TRUE                 : 140
VARS                 : 8
WHILE                : 68
[                    : 76 77 85 88 130 132
]                    : 76 77 85 88 130 132
error                : 
{                    : 1 17 49 50 68 70 90 92
}                    : 1 17 42 68 70 90 92

Nonterminals, with rules where they appear

assign               : 22 70 70
assignMatrix         : 76
assignOptions        : 72
basicDeclare         : 24
basicStatements      : 19
body                 : 17 49 50 65 68 70 90 92
condition            : 20
createVarsTable      : 
cte                  : 34 121
cyDeclare            : 52 54 56
cyExp                : 111
cyExpresion          : 97
cyInstruction        : 62
cyParam              : 37
cyParamCall          : 81 83
cyTerm               : 116
cyTypeParam          : 37 52
cycle                : 21
declare              : 8 60
dict                 : 56 87
dictDeclare          : 26
dictIndex            : 135
dictType             : 31 31
empty                : 5 7 40 47 59 61 63 78 82 84 89 93 101 109 114 119 128 133
errorAssign          : 72
errorAssignMatrix    : 77
errorBasicDeclare    : 52
errorBody            : 62
errorCondition       : 90
errorCyExp           : 111
errorCyParam         : 39
errorDict            : 95
errorDictDeclare     : 56
errorDictType        : 33
errorElse            : 92
errorExpresion       : 97
errorFact            : 117
errorForCycle        : 70
errorFunction        : 42
errorInit            : 27
errorInitDict        : 31
errorMain            : 17
errorOpAccess        : 124
errorOpMatrix        : 132
errorOpParameters    : 46
errorOpReturns       : 49
errorOpSExp          : 102
errorOpStruct        : 130
errorParam           : 37
errorProgram         : 1
errorReturn          : 44
errorStructDeclare   : 54
errorType            : 11
errorVars            : 8
errorWhileCycle      : 68
exp                  : 102 103 104 105 106 107 108
expresion            : 29 44 68 70 76 77 81 83 90 99 100 123 130 132
fact                 : 116 117 118
forCycle             : 66
funcCall             : 23 30 122
function             : 6
init                 : 74 76
initDict             : 75
initWith             : 27
instr                : 65
main                 : 1
opAccess             : 124
opDictionary         : 127
opFunctions          : 1 6
opMatrix             : 130
opParamCall          : 80
opParameters         : 42
opReturns            : 42
opSExp               : 102
opStruct             : 126
opVars               : 1 17 49 50
optionalElse         : 90
optionalMatrix       : 85
param                : 39 46
program              : 0
return               : 49
sExp                 : 97
saveID               : 1
struct               : 54
structDeclare        : 25
structType           : 85
term                 : 111 112 113
type                 : 37 49 52 86 95 95
vars                 : 4
whileCycle           : 67

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . errorProgram PROGRAM ID saveID { opVars opFunctions main }
    (3) errorProgram -> .

    PROGRAM         reduce using rule 3 (errorProgram -> .)

    errorProgram                   shift and go to state 2
    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> errorProgram . PROGRAM ID saveID { opVars opFunctions main }

    PROGRAM         shift and go to state 3


state 3

    (1) program -> errorProgram PROGRAM . ID saveID { opVars opFunctions main }

    ID              shift and go to state 4


state 4

    (1) program -> errorProgram PROGRAM ID . saveID { opVars opFunctions main }
    (2) saveID -> .

    {               reduce using rule 2 (saveID -> .)

    saveID                         shift and go to state 5

state 5

    (1) program -> errorProgram PROGRAM ID saveID . { opVars opFunctions main }

    {               shift and go to state 6


state 6

    (1) program -> errorProgram PROGRAM ID saveID { . opVars opFunctions main }
    (4) opVars -> . vars
    (5) opVars -> . empty
    (8) vars -> . errorVars VARS declare
    (142) empty -> .
    (10) errorVars -> .

    MAIN            reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    VARS            reduce using rule 10 (errorVars -> .)

    vars                           shift and go to state 7
    opVars                         shift and go to state 8
    empty                          shift and go to state 9
    errorVars                      shift and go to state 10

state 7

    (4) opVars -> vars .

    }               reduce using rule 4 (opVars -> vars .)
    ID              reduce using rule 4 (opVars -> vars .)
    IF              reduce using rule 4 (opVars -> vars .)
    FOR             reduce using rule 4 (opVars -> vars .)
    WHILE           reduce using rule 4 (opVars -> vars .)
    MAIN            reduce using rule 4 (opVars -> vars .)
    FUNC            reduce using rule 4 (opVars -> vars .)
    RETURN          reduce using rule 4 (opVars -> vars .)


state 8

    (1) program -> errorProgram PROGRAM ID saveID { opVars . opFunctions main }
    (6) opFunctions -> . function opFunctions
    (7) opFunctions -> . empty
    (42) function -> . errorFunction FUNC ID opParameters opReturns }
    (142) empty -> .
    (43) errorFunction -> .

    MAIN            reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 43 (errorFunction -> .)

    function                       shift and go to state 11
    errorFunction                  shift and go to state 12
    empty                          shift and go to state 13
    opFunctions                    shift and go to state 14

state 9

    (5) opVars -> empty .

    }               reduce using rule 5 (opVars -> empty .)
    ID              reduce using rule 5 (opVars -> empty .)
    IF              reduce using rule 5 (opVars -> empty .)
    FOR             reduce using rule 5 (opVars -> empty .)
    WHILE           reduce using rule 5 (opVars -> empty .)
    MAIN            reduce using rule 5 (opVars -> empty .)
    FUNC            reduce using rule 5 (opVars -> empty .)
    RETURN          reduce using rule 5 (opVars -> empty .)


state 10

    (8) vars -> errorVars . VARS declare

    VARS            shift and go to state 15


state 11

    (6) opFunctions -> function . opFunctions
    (6) opFunctions -> . function opFunctions
    (7) opFunctions -> . empty
    (42) function -> . errorFunction FUNC ID opParameters opReturns }
    (142) empty -> .
    (43) errorFunction -> .

    MAIN            reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 43 (errorFunction -> .)

    function                       shift and go to state 11
    errorFunction                  shift and go to state 12
    opFunctions                    shift and go to state 16
    empty                          shift and go to state 13

state 12

    (42) function -> errorFunction . FUNC ID opParameters opReturns }

    FUNC            shift and go to state 17


state 13

    (7) opFunctions -> empty .

    MAIN            reduce using rule 7 (opFunctions -> empty .)


state 14

    (1) program -> errorProgram PROGRAM ID saveID { opVars opFunctions . main }
    (17) main -> . errorMain MAIN { opVars body }
    (18) errorMain -> .

    MAIN            reduce using rule 18 (errorMain -> .)

    errorMain                      shift and go to state 18
    main                           shift and go to state 19

state 15

    (8) vars -> errorVars VARS . declare
    (24) declare -> . basicDeclare
    (25) declare -> . structDeclare
    (26) declare -> . dictDeclare
    (52) basicDeclare -> . type errorBasicDeclare ID cyTypeParam ; cyDeclare
    (54) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (56) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (11) type -> . errorType INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . OBJECT
    (15) type -> . BOOL
    (55) errorStructDeclare -> .
    (57) errorDictDeclare -> .
    (16) errorType -> .

    FLOAT           shift and go to state 29
    STRING          shift and go to state 25
    OBJECT          shift and go to state 21
    BOOL            shift and go to state 23
    STRUCT          reduce using rule 55 (errorStructDeclare -> .)
    DICT            reduce using rule 57 (errorDictDeclare -> .)
    INT             reduce using rule 16 (errorType -> .)

    dictDeclare                    shift and go to state 20
    errorType                      shift and go to state 26
    basicDeclare                   shift and go to state 28
    errorDictDeclare               shift and go to state 22
    structDeclare                  shift and go to state 27
    errorStructDeclare             shift and go to state 31
    type                           shift and go to state 24
    declare                        shift and go to state 30

state 16

    (6) opFunctions -> function opFunctions .

    MAIN            reduce using rule 6 (opFunctions -> function opFunctions .)


state 17

    (42) function -> errorFunction FUNC . ID opParameters opReturns }

    ID              shift and go to state 32


state 18

    (17) main -> errorMain . MAIN { opVars body }

    MAIN            shift and go to state 33


state 19

    (1) program -> errorProgram PROGRAM ID saveID { opVars opFunctions main . }

    }               shift and go to state 34


state 20

    (26) declare -> dictDeclare .

    MAIN            reduce using rule 26 (declare -> dictDeclare .)
    FUNC            reduce using rule 26 (declare -> dictDeclare .)
    }               reduce using rule 26 (declare -> dictDeclare .)
    ID              reduce using rule 26 (declare -> dictDeclare .)
    IF              reduce using rule 26 (declare -> dictDeclare .)
    FOR             reduce using rule 26 (declare -> dictDeclare .)
    WHILE           reduce using rule 26 (declare -> dictDeclare .)
    RETURN          reduce using rule 26 (declare -> dictDeclare .)


state 21

    (14) type -> OBJECT .

    ID              reduce using rule 14 (type -> OBJECT .)
    [               reduce using rule 14 (type -> OBJECT .)
    )               reduce using rule 14 (type -> OBJECT .)
    {               reduce using rule 14 (type -> OBJECT .)
    :               reduce using rule 14 (type -> OBJECT .)


state 22

    (56) dictDeclare -> errorDictDeclare . DICT ID dict ; cyDeclare

    DICT            shift and go to state 35


state 23

    (15) type -> BOOL .

    ID              reduce using rule 15 (type -> BOOL .)
    [               reduce using rule 15 (type -> BOOL .)
    )               reduce using rule 15 (type -> BOOL .)
    {               reduce using rule 15 (type -> BOOL .)
    :               reduce using rule 15 (type -> BOOL .)


state 24

    (52) basicDeclare -> type . errorBasicDeclare ID cyTypeParam ; cyDeclare
    (53) errorBasicDeclare -> .

    ID              reduce using rule 53 (errorBasicDeclare -> .)

    errorBasicDeclare              shift and go to state 36

state 25

    (13) type -> STRING .

    ID              reduce using rule 13 (type -> STRING .)
    [               reduce using rule 13 (type -> STRING .)
    )               reduce using rule 13 (type -> STRING .)
    {               reduce using rule 13 (type -> STRING .)
    :               reduce using rule 13 (type -> STRING .)


state 26

    (11) type -> errorType . INT

    INT             shift and go to state 37


state 27

    (25) declare -> structDeclare .

    MAIN            reduce using rule 25 (declare -> structDeclare .)
    FUNC            reduce using rule 25 (declare -> structDeclare .)
    }               reduce using rule 25 (declare -> structDeclare .)
    ID              reduce using rule 25 (declare -> structDeclare .)
    IF              reduce using rule 25 (declare -> structDeclare .)
    FOR             reduce using rule 25 (declare -> structDeclare .)
    WHILE           reduce using rule 25 (declare -> structDeclare .)
    RETURN          reduce using rule 25 (declare -> structDeclare .)


state 28

    (24) declare -> basicDeclare .

    MAIN            reduce using rule 24 (declare -> basicDeclare .)
    FUNC            reduce using rule 24 (declare -> basicDeclare .)
    }               reduce using rule 24 (declare -> basicDeclare .)
    ID              reduce using rule 24 (declare -> basicDeclare .)
    IF              reduce using rule 24 (declare -> basicDeclare .)
    FOR             reduce using rule 24 (declare -> basicDeclare .)
    WHILE           reduce using rule 24 (declare -> basicDeclare .)
    RETURN          reduce using rule 24 (declare -> basicDeclare .)


state 29

    (12) type -> FLOAT .

    ID              reduce using rule 12 (type -> FLOAT .)
    [               reduce using rule 12 (type -> FLOAT .)
    )               reduce using rule 12 (type -> FLOAT .)
    {               reduce using rule 12 (type -> FLOAT .)
    :               reduce using rule 12 (type -> FLOAT .)


state 30

    (8) vars -> errorVars VARS declare .

    ID              reduce using rule 8 (vars -> errorVars VARS declare .)
    IF              reduce using rule 8 (vars -> errorVars VARS declare .)
    FOR             reduce using rule 8 (vars -> errorVars VARS declare .)
    WHILE           reduce using rule 8 (vars -> errorVars VARS declare .)
    }               reduce using rule 8 (vars -> errorVars VARS declare .)
    MAIN            reduce using rule 8 (vars -> errorVars VARS declare .)
    FUNC            reduce using rule 8 (vars -> errorVars VARS declare .)
    RETURN          reduce using rule 8 (vars -> errorVars VARS declare .)


state 31

    (54) structDeclare -> errorStructDeclare . STRUCT ID struct ; cyDeclare

    STRUCT          shift and go to state 38


state 32

    (42) function -> errorFunction FUNC ID . opParameters opReturns }
    (46) opParameters -> . ( param ) errorOpParameters
    (47) opParameters -> . empty
    (142) empty -> .

    (               shift and go to state 40
    {               reduce using rule 142 (empty -> .)
    RETURNS         reduce using rule 142 (empty -> .)

    opParameters                   shift and go to state 39
    empty                          shift and go to state 41

state 33

    (17) main -> errorMain MAIN . { opVars body }

    {               shift and go to state 42


state 34

    (1) program -> errorProgram PROGRAM ID saveID { opVars opFunctions main } .

    $end            reduce using rule 1 (program -> errorProgram PROGRAM ID saveID { opVars opFunctions main } .)


state 35

    (56) dictDeclare -> errorDictDeclare DICT . ID dict ; cyDeclare

    ID              shift and go to state 43


state 36

    (52) basicDeclare -> type errorBasicDeclare . ID cyTypeParam ; cyDeclare

    ID              shift and go to state 44


state 37

    (11) type -> errorType INT .

    ID              reduce using rule 11 (type -> errorType INT .)
    [               reduce using rule 11 (type -> errorType INT .)
    )               reduce using rule 11 (type -> errorType INT .)
    {               reduce using rule 11 (type -> errorType INT .)
    :               reduce using rule 11 (type -> errorType INT .)


state 38

    (54) structDeclare -> errorStructDeclare STRUCT . ID struct ; cyDeclare

    ID              shift and go to state 45


state 39

    (42) function -> errorFunction FUNC ID opParameters . opReturns }
    (49) opReturns -> . errorOpReturns RETURNS type { opVars body return
    (50) opReturns -> . { opVars body
    (51) errorOpReturns -> .

    {               shift and go to state 47
    RETURNS         reduce using rule 51 (errorOpReturns -> .)

    errorOpReturns                 shift and go to state 46
    opReturns                      shift and go to state 48

state 40

    (46) opParameters -> ( . param ) errorOpParameters
    (37) param -> . type errorParam ID cyTypeParam cyParam
    (11) type -> . errorType INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . OBJECT
    (15) type -> . BOOL
    (16) errorType -> .

    FLOAT           shift and go to state 29
    STRING          shift and go to state 25
    OBJECT          shift and go to state 21
    BOOL            shift and go to state 23
    INT             reduce using rule 16 (errorType -> .)

    type                           shift and go to state 50
    errorType                      shift and go to state 26
    param                          shift and go to state 49

state 41

    (47) opParameters -> empty .

    {               reduce using rule 47 (opParameters -> empty .)
    RETURNS         reduce using rule 47 (opParameters -> empty .)


state 42

    (17) main -> errorMain MAIN { . opVars body }
    (4) opVars -> . vars
    (5) opVars -> . empty
    (8) vars -> . errorVars VARS declare
    (142) empty -> .
    (10) errorVars -> .

    }               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    VARS            reduce using rule 10 (errorVars -> .)

    vars                           shift and go to state 7
    opVars                         shift and go to state 51
    errorVars                      shift and go to state 10
    empty                          shift and go to state 9

state 43

    (56) dictDeclare -> errorDictDeclare DICT ID . dict ; cyDeclare
    (95) dict -> . errorDict ( type : type )
    (96) errorDict -> .

    (               reduce using rule 96 (errorDict -> .)

    dict                           shift and go to state 53
    errorDict                      shift and go to state 52

state 44

    (52) basicDeclare -> type errorBasicDeclare ID . cyTypeParam ; cyDeclare
    (58) cyTypeParam -> . , ID
    (59) cyTypeParam -> . empty
    (142) empty -> .

    ,               shift and go to state 54
    ;               reduce using rule 142 (empty -> .)

    cyTypeParam                    shift and go to state 55
    empty                          shift and go to state 56

state 45

    (54) structDeclare -> errorStructDeclare STRUCT ID . struct ; cyDeclare
    (85) struct -> . structType [ CTED ] optionalMatrix
    (86) structType -> . type
    (87) structType -> . DICT dict
    (11) type -> . errorType INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . OBJECT
    (15) type -> . BOOL
    (16) errorType -> .

    DICT            shift and go to state 59
    FLOAT           shift and go to state 29
    STRING          shift and go to state 25
    OBJECT          shift and go to state 21
    BOOL            shift and go to state 23
    INT             reduce using rule 16 (errorType -> .)

    structType                     shift and go to state 57
    struct                         shift and go to state 58
    errorType                      shift and go to state 26
    type                           shift and go to state 60

state 46

    (49) opReturns -> errorOpReturns . RETURNS type { opVars body return

    RETURNS         shift and go to state 61


state 47

    (50) opReturns -> { . opVars body
    (4) opVars -> . vars
    (5) opVars -> . empty
    (8) vars -> . errorVars VARS declare
    (142) empty -> .
    (10) errorVars -> .

    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    }               reduce using rule 142 (empty -> .)
    VARS            reduce using rule 10 (errorVars -> .)

    vars                           shift and go to state 7
    opVars                         shift and go to state 62
    errorVars                      shift and go to state 10
    empty                          shift and go to state 9

state 48

    (42) function -> errorFunction FUNC ID opParameters opReturns . }

    }               shift and go to state 63


state 49

    (46) opParameters -> ( param . ) errorOpParameters

    )               shift and go to state 64


state 50

    (37) param -> type . errorParam ID cyTypeParam cyParam
    (38) errorParam -> .

    ID              reduce using rule 38 (errorParam -> .)

    errorParam                     shift and go to state 65

state 51

    (17) main -> errorMain MAIN { opVars . body }
    (62) body -> . errorBody cyInstruction
    (63) body -> . empty
    (64) errorBody -> .
    (142) empty -> .

    ID              reduce using rule 64 (errorBody -> .)
    IF              reduce using rule 64 (errorBody -> .)
    FOR             reduce using rule 64 (errorBody -> .)
    WHILE           reduce using rule 64 (errorBody -> .)
    }               reduce using rule 142 (empty -> .)

    body                           shift and go to state 66
    errorBody                      shift and go to state 67
    empty                          shift and go to state 68

state 52

    (95) dict -> errorDict . ( type : type )

    (               shift and go to state 69


state 53

    (56) dictDeclare -> errorDictDeclare DICT ID dict . ; cyDeclare

    ;               shift and go to state 70


state 54

    (58) cyTypeParam -> , . ID

    ID              shift and go to state 71


state 55

    (52) basicDeclare -> type errorBasicDeclare ID cyTypeParam . ; cyDeclare

    ;               shift and go to state 72


state 56

    (59) cyTypeParam -> empty .

    ;               reduce using rule 59 (cyTypeParam -> empty .)
    )               reduce using rule 59 (cyTypeParam -> empty .)


state 57

    (85) struct -> structType . [ CTED ] optionalMatrix

    [               shift and go to state 73


state 58

    (54) structDeclare -> errorStructDeclare STRUCT ID struct . ; cyDeclare

    ;               shift and go to state 74


state 59

    (87) structType -> DICT . dict
    (95) dict -> . errorDict ( type : type )
    (96) errorDict -> .

    (               reduce using rule 96 (errorDict -> .)

    dict                           shift and go to state 75
    errorDict                      shift and go to state 52

state 60

    (86) structType -> type .

    [               reduce using rule 86 (structType -> type .)


state 61

    (49) opReturns -> errorOpReturns RETURNS . type { opVars body return
    (11) type -> . errorType INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . OBJECT
    (15) type -> . BOOL
    (16) errorType -> .

    FLOAT           shift and go to state 29
    STRING          shift and go to state 25
    OBJECT          shift and go to state 21
    BOOL            shift and go to state 23
    INT             reduce using rule 16 (errorType -> .)

    errorType                      shift and go to state 26
    type                           shift and go to state 76

state 62

    (50) opReturns -> { opVars . body
    (62) body -> . errorBody cyInstruction
    (63) body -> . empty
    (64) errorBody -> .
    (142) empty -> .

    ID              reduce using rule 64 (errorBody -> .)
    IF              reduce using rule 64 (errorBody -> .)
    FOR             reduce using rule 64 (errorBody -> .)
    WHILE           reduce using rule 64 (errorBody -> .)
    }               reduce using rule 142 (empty -> .)

    body                           shift and go to state 77
    empty                          shift and go to state 68
    errorBody                      shift and go to state 67

state 63

    (42) function -> errorFunction FUNC ID opParameters opReturns } .

    FUNC            reduce using rule 42 (function -> errorFunction FUNC ID opParameters opReturns } .)
    MAIN            reduce using rule 42 (function -> errorFunction FUNC ID opParameters opReturns } .)


state 64

    (46) opParameters -> ( param ) . errorOpParameters
    (48) errorOpParameters -> .

    {               reduce using rule 48 (errorOpParameters -> .)
    RETURNS         reduce using rule 48 (errorOpParameters -> .)

    errorOpParameters              shift and go to state 78

state 65

    (37) param -> type errorParam . ID cyTypeParam cyParam

    ID              shift and go to state 79


state 66

    (17) main -> errorMain MAIN { opVars body . }

    }               shift and go to state 80


state 67

    (62) body -> errorBody . cyInstruction
    (65) cyInstruction -> . instr body
    (19) instr -> . basicStatements ;
    (20) instr -> . condition
    (21) instr -> . cycle
    (22) basicStatements -> . assign
    (23) basicStatements -> . funcCall
    (90) condition -> . errorCondition IF ( expresion ) { body } optionalElse
    (66) cycle -> . forCycle
    (67) cycle -> . whileCycle
    (72) assign -> . ID errorAssign assignOptions
    (80) funcCall -> . ID ( opParamCall )
    (91) errorCondition -> .
    (70) forCycle -> . errorForCycle FOR ( assign ; expresion ; assign ) { body }
    (68) whileCycle -> . errorWhileCycle WHILE ( expresion ) { body }
    (71) errorForCycle -> .
    (69) errorWhileCycle -> .

    ID              shift and go to state 90
    IF              reduce using rule 91 (errorCondition -> .)
    FOR             reduce using rule 71 (errorForCycle -> .)
    WHILE           reduce using rule 69 (errorWhileCycle -> .)

    errorWhileCycle                shift and go to state 84
    funcCall                       shift and go to state 91
    instr                          shift and go to state 81
    forCycle                       shift and go to state 83
    assign                         shift and go to state 93
    whileCycle                     shift and go to state 82
    basicStatements                shift and go to state 88
    errorForCycle                  shift and go to state 89
    errorCondition                 shift and go to state 92
    cyInstruction                  shift and go to state 85
    condition                      shift and go to state 86
    cycle                          shift and go to state 87

state 68

    (63) body -> empty .

    }               reduce using rule 63 (body -> empty .)
    RETURN          reduce using rule 63 (body -> empty .)


state 69

    (95) dict -> errorDict ( . type : type )
    (11) type -> . errorType INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . OBJECT
    (15) type -> . BOOL
    (16) errorType -> .

    FLOAT           shift and go to state 29
    STRING          shift and go to state 25
    OBJECT          shift and go to state 21
    BOOL            shift and go to state 23
    INT             reduce using rule 16 (errorType -> .)

    errorType                      shift and go to state 26
    type                           shift and go to state 94

state 70

    (56) dictDeclare -> errorDictDeclare DICT ID dict ; . cyDeclare
    (60) cyDeclare -> . declare
    (61) cyDeclare -> . empty
    (24) declare -> . basicDeclare
    (25) declare -> . structDeclare
    (26) declare -> . dictDeclare
    (142) empty -> .
    (52) basicDeclare -> . type errorBasicDeclare ID cyTypeParam ; cyDeclare
    (54) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (56) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (11) type -> . errorType INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . OBJECT
    (15) type -> . BOOL
    (55) errorStructDeclare -> .
    (57) errorDictDeclare -> .
    (16) errorType -> .

    MAIN            reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    }               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    FLOAT           shift and go to state 29
    STRING          shift and go to state 25
    OBJECT          shift and go to state 21
    BOOL            shift and go to state 23
    STRUCT          reduce using rule 55 (errorStructDeclare -> .)
    DICT            reduce using rule 57 (errorDictDeclare -> .)
    INT             reduce using rule 16 (errorType -> .)

    dictDeclare                    shift and go to state 20
    cyDeclare                      shift and go to state 95
    type                           shift and go to state 24
    errorType                      shift and go to state 26
    structDeclare                  shift and go to state 27
    errorDictDeclare               shift and go to state 22
    errorStructDeclare             shift and go to state 31
    basicDeclare                   shift and go to state 28
    declare                        shift and go to state 97
    empty                          shift and go to state 96

state 71

    (58) cyTypeParam -> , ID .

    ;               reduce using rule 58 (cyTypeParam -> , ID .)
    )               reduce using rule 58 (cyTypeParam -> , ID .)


state 72

    (52) basicDeclare -> type errorBasicDeclare ID cyTypeParam ; . cyDeclare
    (60) cyDeclare -> . declare
    (61) cyDeclare -> . empty
    (24) declare -> . basicDeclare
    (25) declare -> . structDeclare
    (26) declare -> . dictDeclare
    (142) empty -> .
    (52) basicDeclare -> . type errorBasicDeclare ID cyTypeParam ; cyDeclare
    (54) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (56) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (11) type -> . errorType INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . OBJECT
    (15) type -> . BOOL
    (55) errorStructDeclare -> .
    (57) errorDictDeclare -> .
    (16) errorType -> .

    MAIN            reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    }               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    FLOAT           shift and go to state 29
    STRING          shift and go to state 25
    OBJECT          shift and go to state 21
    BOOL            shift and go to state 23
    STRUCT          reduce using rule 55 (errorStructDeclare -> .)
    DICT            reduce using rule 57 (errorDictDeclare -> .)
    INT             reduce using rule 16 (errorType -> .)

    dictDeclare                    shift and go to state 20
    cyDeclare                      shift and go to state 98
    basicDeclare                   shift and go to state 28
    errorType                      shift and go to state 26
    errorDictDeclare               shift and go to state 22
    structDeclare                  shift and go to state 27
    errorStructDeclare             shift and go to state 31
    type                           shift and go to state 24
    declare                        shift and go to state 97
    empty                          shift and go to state 96

state 73

    (85) struct -> structType [ . CTED ] optionalMatrix

    CTED            shift and go to state 99


state 74

    (54) structDeclare -> errorStructDeclare STRUCT ID struct ; . cyDeclare
    (60) cyDeclare -> . declare
    (61) cyDeclare -> . empty
    (24) declare -> . basicDeclare
    (25) declare -> . structDeclare
    (26) declare -> . dictDeclare
    (142) empty -> .
    (52) basicDeclare -> . type errorBasicDeclare ID cyTypeParam ; cyDeclare
    (54) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (56) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (11) type -> . errorType INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . OBJECT
    (15) type -> . BOOL
    (55) errorStructDeclare -> .
    (57) errorDictDeclare -> .
    (16) errorType -> .

    MAIN            reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    }               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    FLOAT           shift and go to state 29
    STRING          shift and go to state 25
    OBJECT          shift and go to state 21
    BOOL            shift and go to state 23
    STRUCT          reduce using rule 55 (errorStructDeclare -> .)
    DICT            reduce using rule 57 (errorDictDeclare -> .)
    INT             reduce using rule 16 (errorType -> .)

    dictDeclare                    shift and go to state 20
    cyDeclare                      shift and go to state 100
    type                           shift and go to state 24
    errorType                      shift and go to state 26
    errorDictDeclare               shift and go to state 22
    structDeclare                  shift and go to state 27
    basicDeclare                   shift and go to state 28
    declare                        shift and go to state 97
    empty                          shift and go to state 96
    errorStructDeclare             shift and go to state 31

state 75

    (87) structType -> DICT dict .

    [               reduce using rule 87 (structType -> DICT dict .)


state 76

    (49) opReturns -> errorOpReturns RETURNS type . { opVars body return

    {               shift and go to state 101


state 77

    (50) opReturns -> { opVars body .

    }               reduce using rule 50 (opReturns -> { opVars body .)


state 78

    (46) opParameters -> ( param ) errorOpParameters .

    {               reduce using rule 46 (opParameters -> ( param ) errorOpParameters .)
    RETURNS         reduce using rule 46 (opParameters -> ( param ) errorOpParameters .)


state 79

    (37) param -> type errorParam ID . cyTypeParam cyParam
    (58) cyTypeParam -> . , ID
    (59) cyTypeParam -> . empty
    (142) empty -> .

    ,               shift and go to state 54
    ;               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)

    cyTypeParam                    shift and go to state 102
    empty                          shift and go to state 56

state 80

    (17) main -> errorMain MAIN { opVars body } .

    }               reduce using rule 17 (main -> errorMain MAIN { opVars body } .)


state 81

    (65) cyInstruction -> instr . body
    (62) body -> . errorBody cyInstruction
    (63) body -> . empty
    (64) errorBody -> .
    (142) empty -> .

    ID              reduce using rule 64 (errorBody -> .)
    IF              reduce using rule 64 (errorBody -> .)
    FOR             reduce using rule 64 (errorBody -> .)
    WHILE           reduce using rule 64 (errorBody -> .)
    }               reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)

    body                           shift and go to state 103
    errorBody                      shift and go to state 67
    empty                          shift and go to state 68

state 82

    (67) cycle -> whileCycle .

    ID              reduce using rule 67 (cycle -> whileCycle .)
    IF              reduce using rule 67 (cycle -> whileCycle .)
    FOR             reduce using rule 67 (cycle -> whileCycle .)
    WHILE           reduce using rule 67 (cycle -> whileCycle .)
    }               reduce using rule 67 (cycle -> whileCycle .)
    RETURN          reduce using rule 67 (cycle -> whileCycle .)


state 83

    (66) cycle -> forCycle .

    ID              reduce using rule 66 (cycle -> forCycle .)
    IF              reduce using rule 66 (cycle -> forCycle .)
    FOR             reduce using rule 66 (cycle -> forCycle .)
    WHILE           reduce using rule 66 (cycle -> forCycle .)
    }               reduce using rule 66 (cycle -> forCycle .)
    RETURN          reduce using rule 66 (cycle -> forCycle .)


state 84

    (68) whileCycle -> errorWhileCycle . WHILE ( expresion ) { body }

    WHILE           shift and go to state 104


state 85

    (62) body -> errorBody cyInstruction .

    }               reduce using rule 62 (body -> errorBody cyInstruction .)
    RETURN          reduce using rule 62 (body -> errorBody cyInstruction .)


state 86

    (20) instr -> condition .

    ID              reduce using rule 20 (instr -> condition .)
    IF              reduce using rule 20 (instr -> condition .)
    FOR             reduce using rule 20 (instr -> condition .)
    WHILE           reduce using rule 20 (instr -> condition .)
    }               reduce using rule 20 (instr -> condition .)
    RETURN          reduce using rule 20 (instr -> condition .)


state 87

    (21) instr -> cycle .

    ID              reduce using rule 21 (instr -> cycle .)
    IF              reduce using rule 21 (instr -> cycle .)
    FOR             reduce using rule 21 (instr -> cycle .)
    WHILE           reduce using rule 21 (instr -> cycle .)
    }               reduce using rule 21 (instr -> cycle .)
    RETURN          reduce using rule 21 (instr -> cycle .)


state 88

    (19) instr -> basicStatements . ;

    ;               shift and go to state 105


state 89

    (70) forCycle -> errorForCycle . FOR ( assign ; expresion ; assign ) { body }

    FOR             shift and go to state 106


state 90

    (72) assign -> ID . errorAssign assignOptions
    (80) funcCall -> ID . ( opParamCall )
    (73) errorAssign -> .

    (               shift and go to state 107
    [               reduce using rule 73 (errorAssign -> .)
    =               reduce using rule 73 (errorAssign -> .)

    errorAssign                    shift and go to state 108

state 91

    (23) basicStatements -> funcCall .

    ;               reduce using rule 23 (basicStatements -> funcCall .)


state 92

    (90) condition -> errorCondition . IF ( expresion ) { body } optionalElse

    IF              shift and go to state 109


state 93

    (22) basicStatements -> assign .

    ;               reduce using rule 22 (basicStatements -> assign .)


state 94

    (95) dict -> errorDict ( type . : type )

    :               shift and go to state 110


state 95

    (56) dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .

    MAIN            reduce using rule 56 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    FUNC            reduce using rule 56 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    }               reduce using rule 56 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    ID              reduce using rule 56 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    IF              reduce using rule 56 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    FOR             reduce using rule 56 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    WHILE           reduce using rule 56 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    RETURN          reduce using rule 56 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)


state 96

    (61) cyDeclare -> empty .

    MAIN            reduce using rule 61 (cyDeclare -> empty .)
    FUNC            reduce using rule 61 (cyDeclare -> empty .)
    }               reduce using rule 61 (cyDeclare -> empty .)
    ID              reduce using rule 61 (cyDeclare -> empty .)
    IF              reduce using rule 61 (cyDeclare -> empty .)
    FOR             reduce using rule 61 (cyDeclare -> empty .)
    WHILE           reduce using rule 61 (cyDeclare -> empty .)
    RETURN          reduce using rule 61 (cyDeclare -> empty .)


state 97

    (60) cyDeclare -> declare .

    MAIN            reduce using rule 60 (cyDeclare -> declare .)
    FUNC            reduce using rule 60 (cyDeclare -> declare .)
    }               reduce using rule 60 (cyDeclare -> declare .)
    ID              reduce using rule 60 (cyDeclare -> declare .)
    IF              reduce using rule 60 (cyDeclare -> declare .)
    FOR             reduce using rule 60 (cyDeclare -> declare .)
    WHILE           reduce using rule 60 (cyDeclare -> declare .)
    RETURN          reduce using rule 60 (cyDeclare -> declare .)


state 98

    (52) basicDeclare -> type errorBasicDeclare ID cyTypeParam ; cyDeclare .

    MAIN            reduce using rule 52 (basicDeclare -> type errorBasicDeclare ID cyTypeParam ; cyDeclare .)
    FUNC            reduce using rule 52 (basicDeclare -> type errorBasicDeclare ID cyTypeParam ; cyDeclare .)
    }               reduce using rule 52 (basicDeclare -> type errorBasicDeclare ID cyTypeParam ; cyDeclare .)
    ID              reduce using rule 52 (basicDeclare -> type errorBasicDeclare ID cyTypeParam ; cyDeclare .)
    IF              reduce using rule 52 (basicDeclare -> type errorBasicDeclare ID cyTypeParam ; cyDeclare .)
    FOR             reduce using rule 52 (basicDeclare -> type errorBasicDeclare ID cyTypeParam ; cyDeclare .)
    WHILE           reduce using rule 52 (basicDeclare -> type errorBasicDeclare ID cyTypeParam ; cyDeclare .)
    RETURN          reduce using rule 52 (basicDeclare -> type errorBasicDeclare ID cyTypeParam ; cyDeclare .)


state 99

    (85) struct -> structType [ CTED . ] optionalMatrix

    ]               shift and go to state 111


state 100

    (54) structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .

    MAIN            reduce using rule 54 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    FUNC            reduce using rule 54 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    }               reduce using rule 54 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    ID              reduce using rule 54 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    IF              reduce using rule 54 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    FOR             reduce using rule 54 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    WHILE           reduce using rule 54 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    RETURN          reduce using rule 54 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)


state 101

    (49) opReturns -> errorOpReturns RETURNS type { . opVars body return
    (4) opVars -> . vars
    (5) opVars -> . empty
    (8) vars -> . errorVars VARS declare
    (142) empty -> .
    (10) errorVars -> .

    RETURN          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    VARS            reduce using rule 10 (errorVars -> .)

    vars                           shift and go to state 7
    opVars                         shift and go to state 112
    errorVars                      shift and go to state 10
    empty                          shift and go to state 9

state 102

    (37) param -> type errorParam ID cyTypeParam . cyParam
    (39) cyParam -> . errorCyParam ; param
    (40) cyParam -> . empty
    (41) errorCyParam -> .
    (142) empty -> .

    ;               reduce using rule 41 (errorCyParam -> .)
    )               reduce using rule 142 (empty -> .)

    cyParam                        shift and go to state 114
    errorCyParam                   shift and go to state 113
    empty                          shift and go to state 115

state 103

    (65) cyInstruction -> instr body .

    }               reduce using rule 65 (cyInstruction -> instr body .)
    RETURN          reduce using rule 65 (cyInstruction -> instr body .)


state 104

    (68) whileCycle -> errorWhileCycle WHILE . ( expresion ) { body }

    (               shift and go to state 116


state 105

    (19) instr -> basicStatements ; .

    ID              reduce using rule 19 (instr -> basicStatements ; .)
    IF              reduce using rule 19 (instr -> basicStatements ; .)
    FOR             reduce using rule 19 (instr -> basicStatements ; .)
    WHILE           reduce using rule 19 (instr -> basicStatements ; .)
    }               reduce using rule 19 (instr -> basicStatements ; .)
    RETURN          reduce using rule 19 (instr -> basicStatements ; .)


state 106

    (70) forCycle -> errorForCycle FOR . ( assign ; expresion ; assign ) { body }

    (               shift and go to state 117


state 107

    (80) funcCall -> ID ( . opParamCall )
    (81) opParamCall -> . expresion cyParamCall
    (82) opParamCall -> . empty
    (97) expresion -> . sExp cyExpresion errorExpresion
    (142) empty -> .
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    )               reduce using rule 142 (empty -> .)
    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 125
    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    fact                           shift and go to state 133
    exp                            shift and go to state 132
    opParamCall                    shift and go to state 118
    empty                          shift and go to state 122

state 108

    (72) assign -> ID errorAssign . assignOptions
    (74) assignOptions -> . init
    (75) assignOptions -> . initDict
    (76) assignOptions -> . [ expresion ] assignMatrix init
    (27) init -> . = initWith errorInit
    (31) initDict -> . = ( dictType : dictType ) errorInitDict

    [               shift and go to state 138
    =               shift and go to state 134

    initDict                       shift and go to state 135
    assignOptions                  shift and go to state 136
    init                           shift and go to state 137

state 109

    (90) condition -> errorCondition IF . ( expresion ) { body } optionalElse

    (               shift and go to state 139


state 110

    (95) dict -> errorDict ( type : . type )
    (11) type -> . errorType INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . OBJECT
    (15) type -> . BOOL
    (16) errorType -> .

    FLOAT           shift and go to state 29
    STRING          shift and go to state 25
    OBJECT          shift and go to state 21
    BOOL            shift and go to state 23
    INT             reduce using rule 16 (errorType -> .)

    errorType                      shift and go to state 26
    type                           shift and go to state 140

state 111

    (85) struct -> structType [ CTED ] . optionalMatrix
    (88) optionalMatrix -> . [ CTED ]
    (89) optionalMatrix -> . empty
    (142) empty -> .

    [               shift and go to state 142
    ;               reduce using rule 142 (empty -> .)

    empty                          shift and go to state 143
    optionalMatrix                 shift and go to state 141

state 112

    (49) opReturns -> errorOpReturns RETURNS type { opVars . body return
    (62) body -> . errorBody cyInstruction
    (63) body -> . empty
    (64) errorBody -> .
    (142) empty -> .

    ID              reduce using rule 64 (errorBody -> .)
    IF              reduce using rule 64 (errorBody -> .)
    FOR             reduce using rule 64 (errorBody -> .)
    WHILE           reduce using rule 64 (errorBody -> .)
    RETURN          reduce using rule 142 (empty -> .)

    body                           shift and go to state 144
    errorBody                      shift and go to state 67
    empty                          shift and go to state 68

state 113

    (39) cyParam -> errorCyParam . ; param

    ;               shift and go to state 145


state 114

    (37) param -> type errorParam ID cyTypeParam cyParam .

    )               reduce using rule 37 (param -> type errorParam ID cyTypeParam cyParam .)


state 115

    (40) cyParam -> empty .

    )               reduce using rule 40 (cyParam -> empty .)


state 116

    (68) whileCycle -> errorWhileCycle WHILE ( . expresion ) { body }
    (97) expresion -> . sExp cyExpresion errorExpresion
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 146
    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 117

    (70) forCycle -> errorForCycle FOR ( . assign ; expresion ; assign ) { body }
    (72) assign -> . ID errorAssign assignOptions

    ID              shift and go to state 147

    assign                         shift and go to state 148

state 118

    (80) funcCall -> ID ( opParamCall . )

    )               shift and go to state 149


state 119

    (140) cte -> TRUE .

    *               reduce using rule 140 (cte -> TRUE .)
    /               reduce using rule 140 (cte -> TRUE .)
    +               reduce using rule 140 (cte -> TRUE .)
    -               reduce using rule 140 (cte -> TRUE .)
    EQ              reduce using rule 140 (cte -> TRUE .)
    DIF             reduce using rule 140 (cte -> TRUE .)
    LTOEQ           reduce using rule 140 (cte -> TRUE .)
    GTOEQ           reduce using rule 140 (cte -> TRUE .)
    >               reduce using rule 140 (cte -> TRUE .)
    <               reduce using rule 140 (cte -> TRUE .)
    AND             reduce using rule 140 (cte -> TRUE .)
    OR              reduce using rule 140 (cte -> TRUE .)
    ]               reduce using rule 140 (cte -> TRUE .)
    ,               reduce using rule 140 (cte -> TRUE .)
    )               reduce using rule 140 (cte -> TRUE .)
    ;               reduce using rule 140 (cte -> TRUE .)
    :               reduce using rule 140 (cte -> TRUE .)


state 120

    (123) fact -> ( . expresion )
    (97) expresion -> . sExp cyExpresion errorExpresion
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 150
    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 121

    (97) expresion -> sExp . cyExpresion errorExpresion
    (99) cyExpresion -> . AND expresion
    (100) cyExpresion -> . OR expresion
    (101) cyExpresion -> . empty
    (142) empty -> .

    AND             shift and go to state 151
    OR              shift and go to state 153
    ,               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)
    ;               reduce using rule 142 (empty -> .)
    ]               reduce using rule 142 (empty -> .)

    cyExpresion                    shift and go to state 152
    empty                          shift and go to state 154

state 122

    (82) opParamCall -> empty .

    )               reduce using rule 82 (opParamCall -> empty .)


state 123

    (138) cte -> CTED .

    *               reduce using rule 138 (cte -> CTED .)
    /               reduce using rule 138 (cte -> CTED .)
    +               reduce using rule 138 (cte -> CTED .)
    -               reduce using rule 138 (cte -> CTED .)
    EQ              reduce using rule 138 (cte -> CTED .)
    DIF             reduce using rule 138 (cte -> CTED .)
    LTOEQ           reduce using rule 138 (cte -> CTED .)
    GTOEQ           reduce using rule 138 (cte -> CTED .)
    >               reduce using rule 138 (cte -> CTED .)
    <               reduce using rule 138 (cte -> CTED .)
    AND             reduce using rule 138 (cte -> CTED .)
    OR              reduce using rule 138 (cte -> CTED .)
    ]               reduce using rule 138 (cte -> CTED .)
    ,               reduce using rule 138 (cte -> CTED .)
    )               reduce using rule 138 (cte -> CTED .)
    ;               reduce using rule 138 (cte -> CTED .)
    :               reduce using rule 138 (cte -> CTED .)


state 124

    (124) fact -> ID . opAccess errorOpAccess
    (80) funcCall -> ID . ( opParamCall )
    (126) opAccess -> . opStruct
    (127) opAccess -> . opDictionary
    (128) opAccess -> . empty
    (130) opStruct -> . errorOpStruct [ expresion ] opMatrix
    (135) opDictionary -> . . dictIndex
    (142) empty -> .
    (131) errorOpStruct -> .

    (               shift and go to state 107
    .               shift and go to state 159
    *               reduce using rule 142 (empty -> .)
    /               reduce using rule 142 (empty -> .)
    +               reduce using rule 142 (empty -> .)
    -               reduce using rule 142 (empty -> .)
    EQ              reduce using rule 142 (empty -> .)
    DIF             reduce using rule 142 (empty -> .)
    LTOEQ           reduce using rule 142 (empty -> .)
    GTOEQ           reduce using rule 142 (empty -> .)
    >               reduce using rule 142 (empty -> .)
    <               reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    ,               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)
    ]               reduce using rule 142 (empty -> .)
    ;               reduce using rule 142 (empty -> .)
    [               reduce using rule 131 (errorOpStruct -> .)

    errorOpStruct                  shift and go to state 155
    opDictionary                   shift and go to state 160
    opStruct                       shift and go to state 156
    opAccess                       shift and go to state 157
    empty                          shift and go to state 158

state 125

    (81) opParamCall -> expresion . cyParamCall
    (83) cyParamCall -> . , expresion cyParamCall
    (84) cyParamCall -> . empty
    (142) empty -> .

    ,               shift and go to state 162
    )               reduce using rule 142 (empty -> .)

    cyParamCall                    shift and go to state 161
    empty                          shift and go to state 163

state 126

    (120) fact -> CTES .

    *               reduce using rule 120 (fact -> CTES .)
    /               reduce using rule 120 (fact -> CTES .)
    +               reduce using rule 120 (fact -> CTES .)
    -               reduce using rule 120 (fact -> CTES .)
    AND             reduce using rule 120 (fact -> CTES .)
    OR              reduce using rule 120 (fact -> CTES .)
    ,               reduce using rule 120 (fact -> CTES .)
    )               reduce using rule 120 (fact -> CTES .)
    ;               reduce using rule 120 (fact -> CTES .)
    ]               reduce using rule 120 (fact -> CTES .)
    EQ              reduce using rule 120 (fact -> CTES .)
    DIF             reduce using rule 120 (fact -> CTES .)
    LTOEQ           reduce using rule 120 (fact -> CTES .)
    GTOEQ           reduce using rule 120 (fact -> CTES .)
    >               reduce using rule 120 (fact -> CTES .)
    <               reduce using rule 120 (fact -> CTES .)


state 127

    (111) exp -> term . errorCyExp cyExp
    (115) errorCyExp -> .

    +               reduce using rule 115 (errorCyExp -> .)
    -               reduce using rule 115 (errorCyExp -> .)
    EQ              reduce using rule 115 (errorCyExp -> .)
    DIF             reduce using rule 115 (errorCyExp -> .)
    LTOEQ           reduce using rule 115 (errorCyExp -> .)
    GTOEQ           reduce using rule 115 (errorCyExp -> .)
    >               reduce using rule 115 (errorCyExp -> .)
    <               reduce using rule 115 (errorCyExp -> .)
    AND             reduce using rule 115 (errorCyExp -> .)
    OR              reduce using rule 115 (errorCyExp -> .)
    ,               reduce using rule 115 (errorCyExp -> .)
    )               reduce using rule 115 (errorCyExp -> .)
    ;               reduce using rule 115 (errorCyExp -> .)
    ]               reduce using rule 115 (errorCyExp -> .)

    errorCyExp                     shift and go to state 164

state 128

    (141) cte -> FALSE .

    *               reduce using rule 141 (cte -> FALSE .)
    /               reduce using rule 141 (cte -> FALSE .)
    +               reduce using rule 141 (cte -> FALSE .)
    -               reduce using rule 141 (cte -> FALSE .)
    EQ              reduce using rule 141 (cte -> FALSE .)
    DIF             reduce using rule 141 (cte -> FALSE .)
    LTOEQ           reduce using rule 141 (cte -> FALSE .)
    GTOEQ           reduce using rule 141 (cte -> FALSE .)
    >               reduce using rule 141 (cte -> FALSE .)
    <               reduce using rule 141 (cte -> FALSE .)
    AND             reduce using rule 141 (cte -> FALSE .)
    OR              reduce using rule 141 (cte -> FALSE .)
    ]               reduce using rule 141 (cte -> FALSE .)
    ,               reduce using rule 141 (cte -> FALSE .)
    )               reduce using rule 141 (cte -> FALSE .)
    ;               reduce using rule 141 (cte -> FALSE .)
    :               reduce using rule 141 (cte -> FALSE .)


state 129

    (122) fact -> funcCall .

    *               reduce using rule 122 (fact -> funcCall .)
    /               reduce using rule 122 (fact -> funcCall .)
    +               reduce using rule 122 (fact -> funcCall .)
    -               reduce using rule 122 (fact -> funcCall .)
    AND             reduce using rule 122 (fact -> funcCall .)
    OR              reduce using rule 122 (fact -> funcCall .)
    ,               reduce using rule 122 (fact -> funcCall .)
    )               reduce using rule 122 (fact -> funcCall .)
    ;               reduce using rule 122 (fact -> funcCall .)
    ]               reduce using rule 122 (fact -> funcCall .)
    EQ              reduce using rule 122 (fact -> funcCall .)
    DIF             reduce using rule 122 (fact -> funcCall .)
    LTOEQ           reduce using rule 122 (fact -> funcCall .)
    GTOEQ           reduce using rule 122 (fact -> funcCall .)
    >               reduce using rule 122 (fact -> funcCall .)
    <               reduce using rule 122 (fact -> funcCall .)


state 130

    (121) fact -> cte .

    *               reduce using rule 121 (fact -> cte .)
    /               reduce using rule 121 (fact -> cte .)
    +               reduce using rule 121 (fact -> cte .)
    -               reduce using rule 121 (fact -> cte .)
    AND             reduce using rule 121 (fact -> cte .)
    OR              reduce using rule 121 (fact -> cte .)
    ,               reduce using rule 121 (fact -> cte .)
    )               reduce using rule 121 (fact -> cte .)
    ;               reduce using rule 121 (fact -> cte .)
    ]               reduce using rule 121 (fact -> cte .)
    EQ              reduce using rule 121 (fact -> cte .)
    DIF             reduce using rule 121 (fact -> cte .)
    LTOEQ           reduce using rule 121 (fact -> cte .)
    GTOEQ           reduce using rule 121 (fact -> cte .)
    >               reduce using rule 121 (fact -> cte .)
    <               reduce using rule 121 (fact -> cte .)


state 131

    (139) cte -> CTEF .

    *               reduce using rule 139 (cte -> CTEF .)
    /               reduce using rule 139 (cte -> CTEF .)
    +               reduce using rule 139 (cte -> CTEF .)
    -               reduce using rule 139 (cte -> CTEF .)
    EQ              reduce using rule 139 (cte -> CTEF .)
    DIF             reduce using rule 139 (cte -> CTEF .)
    LTOEQ           reduce using rule 139 (cte -> CTEF .)
    GTOEQ           reduce using rule 139 (cte -> CTEF .)
    >               reduce using rule 139 (cte -> CTEF .)
    <               reduce using rule 139 (cte -> CTEF .)
    AND             reduce using rule 139 (cte -> CTEF .)
    OR              reduce using rule 139 (cte -> CTEF .)
    ]               reduce using rule 139 (cte -> CTEF .)
    ,               reduce using rule 139 (cte -> CTEF .)
    )               reduce using rule 139 (cte -> CTEF .)
    ;               reduce using rule 139 (cte -> CTEF .)
    :               reduce using rule 139 (cte -> CTEF .)


state 132

    (102) sExp -> exp . errorOpSExp opSExp
    (110) errorOpSExp -> .

    EQ              reduce using rule 110 (errorOpSExp -> .)
    DIF             reduce using rule 110 (errorOpSExp -> .)
    LTOEQ           reduce using rule 110 (errorOpSExp -> .)
    GTOEQ           reduce using rule 110 (errorOpSExp -> .)
    >               reduce using rule 110 (errorOpSExp -> .)
    <               reduce using rule 110 (errorOpSExp -> .)
    AND             reduce using rule 110 (errorOpSExp -> .)
    OR              reduce using rule 110 (errorOpSExp -> .)
    ,               reduce using rule 110 (errorOpSExp -> .)
    )               reduce using rule 110 (errorOpSExp -> .)
    ;               reduce using rule 110 (errorOpSExp -> .)
    ]               reduce using rule 110 (errorOpSExp -> .)

    errorOpSExp                    shift and go to state 165

state 133

    (116) term -> fact . cyTerm
    (117) cyTerm -> . * errorFact fact
    (118) cyTerm -> . / fact
    (119) cyTerm -> . empty
    (142) empty -> .

    *               shift and go to state 166
    /               shift and go to state 167
    +               reduce using rule 142 (empty -> .)
    -               reduce using rule 142 (empty -> .)
    EQ              reduce using rule 142 (empty -> .)
    DIF             reduce using rule 142 (empty -> .)
    LTOEQ           reduce using rule 142 (empty -> .)
    GTOEQ           reduce using rule 142 (empty -> .)
    >               reduce using rule 142 (empty -> .)
    <               reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    ,               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)
    ;               reduce using rule 142 (empty -> .)
    ]               reduce using rule 142 (empty -> .)

    cyTerm                         shift and go to state 168
    empty                          shift and go to state 169

state 134

    (27) init -> = . initWith errorInit
    (31) initDict -> = . ( dictType : dictType ) errorInitDict
    (29) initWith -> . expresion
    (30) initWith -> . funcCall
    (97) expresion -> . sExp cyExpresion errorExpresion
    (80) funcCall -> . ID ( opParamCall )
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE

    (               shift and go to state 171
    ID              shift and go to state 172
    CTES            shift and go to state 126
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 173
    initWith                       shift and go to state 170
    funcCall                       shift and go to state 174
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    term                           shift and go to state 127
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 135

    (75) assignOptions -> initDict .

    ;               reduce using rule 75 (assignOptions -> initDict .)
    )               reduce using rule 75 (assignOptions -> initDict .)


state 136

    (72) assign -> ID errorAssign assignOptions .

    )               reduce using rule 72 (assign -> ID errorAssign assignOptions .)
    ;               reduce using rule 72 (assign -> ID errorAssign assignOptions .)


state 137

    (74) assignOptions -> init .

    ;               reduce using rule 74 (assignOptions -> init .)
    )               reduce using rule 74 (assignOptions -> init .)


state 138

    (76) assignOptions -> [ . expresion ] assignMatrix init
    (97) expresion -> . sExp cyExpresion errorExpresion
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 175
    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 139

    (90) condition -> errorCondition IF ( . expresion ) { body } optionalElse
    (97) expresion -> . sExp cyExpresion errorExpresion
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 176
    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 140

    (95) dict -> errorDict ( type : type . )

    )               shift and go to state 177


state 141

    (85) struct -> structType [ CTED ] optionalMatrix .

    ;               reduce using rule 85 (struct -> structType [ CTED ] optionalMatrix .)


state 142

    (88) optionalMatrix -> [ . CTED ]

    CTED            shift and go to state 178


state 143

    (89) optionalMatrix -> empty .

    ;               reduce using rule 89 (optionalMatrix -> empty .)


state 144

    (49) opReturns -> errorOpReturns RETURNS type { opVars body . return
    (44) return -> . errorReturn RETURN expresion ;
    (45) errorReturn -> .

    RETURN          reduce using rule 45 (errorReturn -> .)

    return                         shift and go to state 179
    errorReturn                    shift and go to state 180

state 145

    (39) cyParam -> errorCyParam ; . param
    (37) param -> . type errorParam ID cyTypeParam cyParam
    (11) type -> . errorType INT
    (12) type -> . FLOAT
    (13) type -> . STRING
    (14) type -> . OBJECT
    (15) type -> . BOOL
    (16) errorType -> .

    FLOAT           shift and go to state 29
    STRING          shift and go to state 25
    OBJECT          shift and go to state 21
    BOOL            shift and go to state 23
    INT             reduce using rule 16 (errorType -> .)

    type                           shift and go to state 50
    errorType                      shift and go to state 26
    param                          shift and go to state 181

state 146

    (68) whileCycle -> errorWhileCycle WHILE ( expresion . ) { body }

    )               shift and go to state 182


state 147

    (72) assign -> ID . errorAssign assignOptions
    (73) errorAssign -> .

    [               reduce using rule 73 (errorAssign -> .)
    =               reduce using rule 73 (errorAssign -> .)

    errorAssign                    shift and go to state 108

state 148

    (70) forCycle -> errorForCycle FOR ( assign . ; expresion ; assign ) { body }

    ;               shift and go to state 183


state 149

    (80) funcCall -> ID ( opParamCall ) .

    ;               reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    )               reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    *               reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    /               reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    +               reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    -               reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    EQ              reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    DIF             reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    LTOEQ           reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    GTOEQ           reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    >               reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    <               reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    AND             reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    OR              reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    ,               reduce using rule 80 (funcCall -> ID ( opParamCall ) .)
    ]               reduce using rule 80 (funcCall -> ID ( opParamCall ) .)


state 150

    (123) fact -> ( expresion . )

    )               shift and go to state 184


state 151

    (99) cyExpresion -> AND . expresion
    (97) expresion -> . sExp cyExpresion errorExpresion
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 185
    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 152

    (97) expresion -> sExp cyExpresion . errorExpresion
    (98) errorExpresion -> .

    ,               reduce using rule 98 (errorExpresion -> .)
    )               reduce using rule 98 (errorExpresion -> .)
    ;               reduce using rule 98 (errorExpresion -> .)
    ]               reduce using rule 98 (errorExpresion -> .)

    errorExpresion                 shift and go to state 186

state 153

    (100) cyExpresion -> OR . expresion
    (97) expresion -> . sExp cyExpresion errorExpresion
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 187
    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 154

    (101) cyExpresion -> empty .

    ,               reduce using rule 101 (cyExpresion -> empty .)
    )               reduce using rule 101 (cyExpresion -> empty .)
    ;               reduce using rule 101 (cyExpresion -> empty .)
    ]               reduce using rule 101 (cyExpresion -> empty .)


state 155

    (130) opStruct -> errorOpStruct . [ expresion ] opMatrix

    [               shift and go to state 188


state 156

    (126) opAccess -> opStruct .

    *               reduce using rule 126 (opAccess -> opStruct .)
    /               reduce using rule 126 (opAccess -> opStruct .)
    +               reduce using rule 126 (opAccess -> opStruct .)
    -               reduce using rule 126 (opAccess -> opStruct .)
    EQ              reduce using rule 126 (opAccess -> opStruct .)
    DIF             reduce using rule 126 (opAccess -> opStruct .)
    LTOEQ           reduce using rule 126 (opAccess -> opStruct .)
    GTOEQ           reduce using rule 126 (opAccess -> opStruct .)
    >               reduce using rule 126 (opAccess -> opStruct .)
    <               reduce using rule 126 (opAccess -> opStruct .)
    AND             reduce using rule 126 (opAccess -> opStruct .)
    OR              reduce using rule 126 (opAccess -> opStruct .)
    ,               reduce using rule 126 (opAccess -> opStruct .)
    )               reduce using rule 126 (opAccess -> opStruct .)
    ]               reduce using rule 126 (opAccess -> opStruct .)
    ;               reduce using rule 126 (opAccess -> opStruct .)


state 157

    (124) fact -> ID opAccess . errorOpAccess
    (129) errorOpAccess -> .

    *               reduce using rule 129 (errorOpAccess -> .)
    /               reduce using rule 129 (errorOpAccess -> .)
    +               reduce using rule 129 (errorOpAccess -> .)
    -               reduce using rule 129 (errorOpAccess -> .)
    EQ              reduce using rule 129 (errorOpAccess -> .)
    DIF             reduce using rule 129 (errorOpAccess -> .)
    LTOEQ           reduce using rule 129 (errorOpAccess -> .)
    GTOEQ           reduce using rule 129 (errorOpAccess -> .)
    >               reduce using rule 129 (errorOpAccess -> .)
    <               reduce using rule 129 (errorOpAccess -> .)
    AND             reduce using rule 129 (errorOpAccess -> .)
    OR              reduce using rule 129 (errorOpAccess -> .)
    ,               reduce using rule 129 (errorOpAccess -> .)
    )               reduce using rule 129 (errorOpAccess -> .)
    ;               reduce using rule 129 (errorOpAccess -> .)
    ]               reduce using rule 129 (errorOpAccess -> .)

    errorOpAccess                  shift and go to state 189

state 158

    (128) opAccess -> empty .

    *               reduce using rule 128 (opAccess -> empty .)
    /               reduce using rule 128 (opAccess -> empty .)
    +               reduce using rule 128 (opAccess -> empty .)
    -               reduce using rule 128 (opAccess -> empty .)
    EQ              reduce using rule 128 (opAccess -> empty .)
    DIF             reduce using rule 128 (opAccess -> empty .)
    LTOEQ           reduce using rule 128 (opAccess -> empty .)
    GTOEQ           reduce using rule 128 (opAccess -> empty .)
    >               reduce using rule 128 (opAccess -> empty .)
    <               reduce using rule 128 (opAccess -> empty .)
    AND             reduce using rule 128 (opAccess -> empty .)
    OR              reduce using rule 128 (opAccess -> empty .)
    ,               reduce using rule 128 (opAccess -> empty .)
    )               reduce using rule 128 (opAccess -> empty .)
    ]               reduce using rule 128 (opAccess -> empty .)
    ;               reduce using rule 128 (opAccess -> empty .)


state 159

    (135) opDictionary -> . . dictIndex
    (136) dictIndex -> . FIRST
    (137) dictIndex -> . LAST

    FIRST           shift and go to state 190
    LAST            shift and go to state 191

    dictIndex                      shift and go to state 192

state 160

    (127) opAccess -> opDictionary .

    *               reduce using rule 127 (opAccess -> opDictionary .)
    /               reduce using rule 127 (opAccess -> opDictionary .)
    +               reduce using rule 127 (opAccess -> opDictionary .)
    -               reduce using rule 127 (opAccess -> opDictionary .)
    EQ              reduce using rule 127 (opAccess -> opDictionary .)
    DIF             reduce using rule 127 (opAccess -> opDictionary .)
    LTOEQ           reduce using rule 127 (opAccess -> opDictionary .)
    GTOEQ           reduce using rule 127 (opAccess -> opDictionary .)
    >               reduce using rule 127 (opAccess -> opDictionary .)
    <               reduce using rule 127 (opAccess -> opDictionary .)
    AND             reduce using rule 127 (opAccess -> opDictionary .)
    OR              reduce using rule 127 (opAccess -> opDictionary .)
    ,               reduce using rule 127 (opAccess -> opDictionary .)
    )               reduce using rule 127 (opAccess -> opDictionary .)
    ]               reduce using rule 127 (opAccess -> opDictionary .)
    ;               reduce using rule 127 (opAccess -> opDictionary .)


state 161

    (81) opParamCall -> expresion cyParamCall .

    )               reduce using rule 81 (opParamCall -> expresion cyParamCall .)


state 162

    (83) cyParamCall -> , . expresion cyParamCall
    (97) expresion -> . sExp cyExpresion errorExpresion
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 193
    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 163

    (84) cyParamCall -> empty .

    )               reduce using rule 84 (cyParamCall -> empty .)


state 164

    (111) exp -> term errorCyExp . cyExp
    (112) cyExp -> . + term
    (113) cyExp -> . - term
    (114) cyExp -> . empty
    (142) empty -> .

    +               shift and go to state 195
    -               shift and go to state 196
    EQ              reduce using rule 142 (empty -> .)
    DIF             reduce using rule 142 (empty -> .)
    LTOEQ           reduce using rule 142 (empty -> .)
    GTOEQ           reduce using rule 142 (empty -> .)
    >               reduce using rule 142 (empty -> .)
    <               reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    ,               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)
    ;               reduce using rule 142 (empty -> .)
    ]               reduce using rule 142 (empty -> .)

    cyExp                          shift and go to state 194
    empty                          shift and go to state 197

state 165

    (102) sExp -> exp errorOpSExp . opSExp
    (103) opSExp -> . EQ exp
    (104) opSExp -> . DIF exp
    (105) opSExp -> . LTOEQ exp
    (106) opSExp -> . GTOEQ exp
    (107) opSExp -> . > exp
    (108) opSExp -> . < exp
    (109) opSExp -> . empty
    (142) empty -> .

    EQ              shift and go to state 198
    DIF             shift and go to state 199
    LTOEQ           shift and go to state 202
    GTOEQ           shift and go to state 200
    >               shift and go to state 201
    <               shift and go to state 203
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    ,               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)
    ;               reduce using rule 142 (empty -> .)
    ]               reduce using rule 142 (empty -> .)

    empty                          shift and go to state 204
    opSExp                         shift and go to state 205

state 166

    (117) cyTerm -> * . errorFact fact
    (125) errorFact -> .

    CTES            reduce using rule 125 (errorFact -> .)
    (               reduce using rule 125 (errorFact -> .)
    ID              reduce using rule 125 (errorFact -> .)
    CTED            reduce using rule 125 (errorFact -> .)
    CTEF            reduce using rule 125 (errorFact -> .)
    TRUE            reduce using rule 125 (errorFact -> .)
    FALSE           reduce using rule 125 (errorFact -> .)

    errorFact                      shift and go to state 206

state 167

    (118) cyTerm -> / . fact
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    funcCall                       shift and go to state 129
    cte                            shift and go to state 130
    fact                           shift and go to state 207

state 168

    (116) term -> fact cyTerm .

    +               reduce using rule 116 (term -> fact cyTerm .)
    -               reduce using rule 116 (term -> fact cyTerm .)
    EQ              reduce using rule 116 (term -> fact cyTerm .)
    DIF             reduce using rule 116 (term -> fact cyTerm .)
    LTOEQ           reduce using rule 116 (term -> fact cyTerm .)
    GTOEQ           reduce using rule 116 (term -> fact cyTerm .)
    >               reduce using rule 116 (term -> fact cyTerm .)
    <               reduce using rule 116 (term -> fact cyTerm .)
    AND             reduce using rule 116 (term -> fact cyTerm .)
    OR              reduce using rule 116 (term -> fact cyTerm .)
    ,               reduce using rule 116 (term -> fact cyTerm .)
    )               reduce using rule 116 (term -> fact cyTerm .)
    ]               reduce using rule 116 (term -> fact cyTerm .)
    ;               reduce using rule 116 (term -> fact cyTerm .)


state 169

    (119) cyTerm -> empty .

    +               reduce using rule 119 (cyTerm -> empty .)
    -               reduce using rule 119 (cyTerm -> empty .)
    EQ              reduce using rule 119 (cyTerm -> empty .)
    DIF             reduce using rule 119 (cyTerm -> empty .)
    LTOEQ           reduce using rule 119 (cyTerm -> empty .)
    GTOEQ           reduce using rule 119 (cyTerm -> empty .)
    >               reduce using rule 119 (cyTerm -> empty .)
    <               reduce using rule 119 (cyTerm -> empty .)
    AND             reduce using rule 119 (cyTerm -> empty .)
    OR              reduce using rule 119 (cyTerm -> empty .)
    ,               reduce using rule 119 (cyTerm -> empty .)
    )               reduce using rule 119 (cyTerm -> empty .)
    ;               reduce using rule 119 (cyTerm -> empty .)
    ]               reduce using rule 119 (cyTerm -> empty .)


state 170

    (27) init -> = initWith . errorInit
    (28) errorInit -> .

    ;               reduce using rule 28 (errorInit -> .)
    )               reduce using rule 28 (errorInit -> .)

    errorInit                      shift and go to state 208

state 171

    (31) initDict -> = ( . dictType : dictType ) errorInitDict
    (123) fact -> ( . expresion )
    (33) dictType -> . errorDictType CTES
    (34) dictType -> . cte
    (35) dictType -> . ID
    (97) expresion -> . sExp cyExpresion errorExpresion
    (36) errorDictType -> .
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (80) funcCall -> . ID ( opParamCall )

  ! shift/reduce conflict for CTES resolved as shift
    ID              shift and go to state 211
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128
    CTES            shift and go to state 126
    (               shift and go to state 120

  ! CTES            [ reduce using rule 36 (errorDictType -> .) ]

    dictType                       shift and go to state 209
    expresion                      shift and go to state 150
    term                           shift and go to state 127
    errorDictType                  shift and go to state 210
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 212
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 172

    (80) funcCall -> ID . ( opParamCall )
    (124) fact -> ID . opAccess errorOpAccess
    (126) opAccess -> . opStruct
    (127) opAccess -> . opDictionary
    (128) opAccess -> . empty
    (130) opStruct -> . errorOpStruct [ expresion ] opMatrix
    (135) opDictionary -> . . dictIndex
    (142) empty -> .
    (131) errorOpStruct -> .

    (               shift and go to state 107
    .               shift and go to state 159
    *               reduce using rule 142 (empty -> .)
    /               reduce using rule 142 (empty -> .)
    +               reduce using rule 142 (empty -> .)
    -               reduce using rule 142 (empty -> .)
    EQ              reduce using rule 142 (empty -> .)
    DIF             reduce using rule 142 (empty -> .)
    LTOEQ           reduce using rule 142 (empty -> .)
    GTOEQ           reduce using rule 142 (empty -> .)
    >               reduce using rule 142 (empty -> .)
    <               reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    ;               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)
    [               reduce using rule 131 (errorOpStruct -> .)

    errorOpStruct                  shift and go to state 155
    opDictionary                   shift and go to state 160
    opStruct                       shift and go to state 156
    opAccess                       shift and go to state 157
    empty                          shift and go to state 158

state 173

    (29) initWith -> expresion .

    ;               reduce using rule 29 (initWith -> expresion .)
    )               reduce using rule 29 (initWith -> expresion .)


state 174

    (30) initWith -> funcCall .
    (122) fact -> funcCall .

  ! reduce/reduce conflict for ; resolved using rule 30 (initWith -> funcCall .)
  ! reduce/reduce conflict for ) resolved using rule 30 (initWith -> funcCall .)
    ;               reduce using rule 30 (initWith -> funcCall .)
    )               reduce using rule 30 (initWith -> funcCall .)
    *               reduce using rule 122 (fact -> funcCall .)
    /               reduce using rule 122 (fact -> funcCall .)
    +               reduce using rule 122 (fact -> funcCall .)
    -               reduce using rule 122 (fact -> funcCall .)
    EQ              reduce using rule 122 (fact -> funcCall .)
    DIF             reduce using rule 122 (fact -> funcCall .)
    LTOEQ           reduce using rule 122 (fact -> funcCall .)
    GTOEQ           reduce using rule 122 (fact -> funcCall .)
    >               reduce using rule 122 (fact -> funcCall .)
    <               reduce using rule 122 (fact -> funcCall .)
    AND             reduce using rule 122 (fact -> funcCall .)
    OR              reduce using rule 122 (fact -> funcCall .)

  ! ;               [ reduce using rule 122 (fact -> funcCall .) ]
  ! )               [ reduce using rule 122 (fact -> funcCall .) ]


state 175

    (76) assignOptions -> [ expresion . ] assignMatrix init

    ]               shift and go to state 213


state 176

    (90) condition -> errorCondition IF ( expresion . ) { body } optionalElse

    )               shift and go to state 214


state 177

    (95) dict -> errorDict ( type : type ) .

    [               reduce using rule 95 (dict -> errorDict ( type : type ) .)
    ;               reduce using rule 95 (dict -> errorDict ( type : type ) .)


state 178

    (88) optionalMatrix -> [ CTED . ]

    ]               shift and go to state 215


state 179

    (49) opReturns -> errorOpReturns RETURNS type { opVars body return .

    }               reduce using rule 49 (opReturns -> errorOpReturns RETURNS type { opVars body return .)


state 180

    (44) return -> errorReturn . RETURN expresion ;

    RETURN          shift and go to state 216


state 181

    (39) cyParam -> errorCyParam ; param .

    )               reduce using rule 39 (cyParam -> errorCyParam ; param .)


state 182

    (68) whileCycle -> errorWhileCycle WHILE ( expresion ) . { body }

    {               shift and go to state 217


state 183

    (70) forCycle -> errorForCycle FOR ( assign ; . expresion ; assign ) { body }
    (97) expresion -> . sExp cyExpresion errorExpresion
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 218
    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 184

    (123) fact -> ( expresion ) .

    *               reduce using rule 123 (fact -> ( expresion ) .)
    /               reduce using rule 123 (fact -> ( expresion ) .)
    +               reduce using rule 123 (fact -> ( expresion ) .)
    -               reduce using rule 123 (fact -> ( expresion ) .)
    AND             reduce using rule 123 (fact -> ( expresion ) .)
    OR              reduce using rule 123 (fact -> ( expresion ) .)
    ,               reduce using rule 123 (fact -> ( expresion ) .)
    )               reduce using rule 123 (fact -> ( expresion ) .)
    ;               reduce using rule 123 (fact -> ( expresion ) .)
    ]               reduce using rule 123 (fact -> ( expresion ) .)
    EQ              reduce using rule 123 (fact -> ( expresion ) .)
    DIF             reduce using rule 123 (fact -> ( expresion ) .)
    LTOEQ           reduce using rule 123 (fact -> ( expresion ) .)
    GTOEQ           reduce using rule 123 (fact -> ( expresion ) .)
    >               reduce using rule 123 (fact -> ( expresion ) .)
    <               reduce using rule 123 (fact -> ( expresion ) .)


state 185

    (99) cyExpresion -> AND expresion .

    ,               reduce using rule 99 (cyExpresion -> AND expresion .)
    )               reduce using rule 99 (cyExpresion -> AND expresion .)
    ;               reduce using rule 99 (cyExpresion -> AND expresion .)
    ]               reduce using rule 99 (cyExpresion -> AND expresion .)


state 186

    (97) expresion -> sExp cyExpresion errorExpresion .

    ;               reduce using rule 97 (expresion -> sExp cyExpresion errorExpresion .)
    )               reduce using rule 97 (expresion -> sExp cyExpresion errorExpresion .)
    ]               reduce using rule 97 (expresion -> sExp cyExpresion errorExpresion .)
    ,               reduce using rule 97 (expresion -> sExp cyExpresion errorExpresion .)


state 187

    (100) cyExpresion -> OR expresion .

    ,               reduce using rule 100 (cyExpresion -> OR expresion .)
    )               reduce using rule 100 (cyExpresion -> OR expresion .)
    ;               reduce using rule 100 (cyExpresion -> OR expresion .)
    ]               reduce using rule 100 (cyExpresion -> OR expresion .)


state 188

    (130) opStruct -> errorOpStruct [ . expresion ] opMatrix
    (97) expresion -> . sExp cyExpresion errorExpresion
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 219
    term                           shift and go to state 127
    exp                            shift and go to state 132
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    fact                           shift and go to state 133

state 189

    (124) fact -> ID opAccess errorOpAccess .

    *               reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    /               reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    +               reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    -               reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    AND             reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    OR              reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    ,               reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    )               reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    ;               reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    ]               reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    EQ              reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    DIF             reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    LTOEQ           reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    GTOEQ           reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    >               reduce using rule 124 (fact -> ID opAccess errorOpAccess .)
    <               reduce using rule 124 (fact -> ID opAccess errorOpAccess .)


state 190

    (136) dictIndex -> FIRST .

    *               reduce using rule 136 (dictIndex -> FIRST .)
    /               reduce using rule 136 (dictIndex -> FIRST .)
    +               reduce using rule 136 (dictIndex -> FIRST .)
    -               reduce using rule 136 (dictIndex -> FIRST .)
    EQ              reduce using rule 136 (dictIndex -> FIRST .)
    DIF             reduce using rule 136 (dictIndex -> FIRST .)
    LTOEQ           reduce using rule 136 (dictIndex -> FIRST .)
    GTOEQ           reduce using rule 136 (dictIndex -> FIRST .)
    >               reduce using rule 136 (dictIndex -> FIRST .)
    <               reduce using rule 136 (dictIndex -> FIRST .)
    AND             reduce using rule 136 (dictIndex -> FIRST .)
    OR              reduce using rule 136 (dictIndex -> FIRST .)
    ,               reduce using rule 136 (dictIndex -> FIRST .)
    )               reduce using rule 136 (dictIndex -> FIRST .)
    ]               reduce using rule 136 (dictIndex -> FIRST .)
    ;               reduce using rule 136 (dictIndex -> FIRST .)


state 191

    (137) dictIndex -> LAST .

    *               reduce using rule 137 (dictIndex -> LAST .)
    /               reduce using rule 137 (dictIndex -> LAST .)
    +               reduce using rule 137 (dictIndex -> LAST .)
    -               reduce using rule 137 (dictIndex -> LAST .)
    EQ              reduce using rule 137 (dictIndex -> LAST .)
    DIF             reduce using rule 137 (dictIndex -> LAST .)
    LTOEQ           reduce using rule 137 (dictIndex -> LAST .)
    GTOEQ           reduce using rule 137 (dictIndex -> LAST .)
    >               reduce using rule 137 (dictIndex -> LAST .)
    <               reduce using rule 137 (dictIndex -> LAST .)
    AND             reduce using rule 137 (dictIndex -> LAST .)
    OR              reduce using rule 137 (dictIndex -> LAST .)
    ,               reduce using rule 137 (dictIndex -> LAST .)
    )               reduce using rule 137 (dictIndex -> LAST .)
    ]               reduce using rule 137 (dictIndex -> LAST .)
    ;               reduce using rule 137 (dictIndex -> LAST .)


state 192

    (135) opDictionary -> . dictIndex .

    *               reduce using rule 135 (opDictionary -> . dictIndex .)
    /               reduce using rule 135 (opDictionary -> . dictIndex .)
    +               reduce using rule 135 (opDictionary -> . dictIndex .)
    -               reduce using rule 135 (opDictionary -> . dictIndex .)
    EQ              reduce using rule 135 (opDictionary -> . dictIndex .)
    DIF             reduce using rule 135 (opDictionary -> . dictIndex .)
    LTOEQ           reduce using rule 135 (opDictionary -> . dictIndex .)
    GTOEQ           reduce using rule 135 (opDictionary -> . dictIndex .)
    >               reduce using rule 135 (opDictionary -> . dictIndex .)
    <               reduce using rule 135 (opDictionary -> . dictIndex .)
    AND             reduce using rule 135 (opDictionary -> . dictIndex .)
    OR              reduce using rule 135 (opDictionary -> . dictIndex .)
    ;               reduce using rule 135 (opDictionary -> . dictIndex .)
    )               reduce using rule 135 (opDictionary -> . dictIndex .)
    ,               reduce using rule 135 (opDictionary -> . dictIndex .)
    ]               reduce using rule 135 (opDictionary -> . dictIndex .)


state 193

    (83) cyParamCall -> , expresion . cyParamCall
    (83) cyParamCall -> . , expresion cyParamCall
    (84) cyParamCall -> . empty
    (142) empty -> .

    ,               shift and go to state 162
    )               reduce using rule 142 (empty -> .)

    cyParamCall                    shift and go to state 220
    empty                          shift and go to state 163

state 194

    (111) exp -> term errorCyExp cyExp .

    EQ              reduce using rule 111 (exp -> term errorCyExp cyExp .)
    DIF             reduce using rule 111 (exp -> term errorCyExp cyExp .)
    LTOEQ           reduce using rule 111 (exp -> term errorCyExp cyExp .)
    GTOEQ           reduce using rule 111 (exp -> term errorCyExp cyExp .)
    >               reduce using rule 111 (exp -> term errorCyExp cyExp .)
    <               reduce using rule 111 (exp -> term errorCyExp cyExp .)
    AND             reduce using rule 111 (exp -> term errorCyExp cyExp .)
    OR              reduce using rule 111 (exp -> term errorCyExp cyExp .)
    ;               reduce using rule 111 (exp -> term errorCyExp cyExp .)
    )               reduce using rule 111 (exp -> term errorCyExp cyExp .)
    ,               reduce using rule 111 (exp -> term errorCyExp cyExp .)
    ]               reduce using rule 111 (exp -> term errorCyExp cyExp .)


state 195

    (112) cyExp -> + . term
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    term                           shift and go to state 221
    funcCall                       shift and go to state 129
    cte                            shift and go to state 130
    fact                           shift and go to state 133

state 196

    (113) cyExp -> - . term
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    term                           shift and go to state 222
    funcCall                       shift and go to state 129
    cte                            shift and go to state 130
    fact                           shift and go to state 133

state 197

    (114) cyExp -> empty .

    EQ              reduce using rule 114 (cyExp -> empty .)
    DIF             reduce using rule 114 (cyExp -> empty .)
    LTOEQ           reduce using rule 114 (cyExp -> empty .)
    GTOEQ           reduce using rule 114 (cyExp -> empty .)
    >               reduce using rule 114 (cyExp -> empty .)
    <               reduce using rule 114 (cyExp -> empty .)
    AND             reduce using rule 114 (cyExp -> empty .)
    OR              reduce using rule 114 (cyExp -> empty .)
    ,               reduce using rule 114 (cyExp -> empty .)
    )               reduce using rule 114 (cyExp -> empty .)
    ;               reduce using rule 114 (cyExp -> empty .)
    ]               reduce using rule 114 (cyExp -> empty .)


state 198

    (103) opSExp -> EQ . exp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    cte                            shift and go to state 130
    exp                            shift and go to state 223
    fact                           shift and go to state 133

state 199

    (104) opSExp -> DIF . exp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    cte                            shift and go to state 130
    exp                            shift and go to state 224
    fact                           shift and go to state 133

state 200

    (106) opSExp -> GTOEQ . exp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    cte                            shift and go to state 130
    exp                            shift and go to state 225
    fact                           shift and go to state 133

state 201

    (107) opSExp -> > . exp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    cte                            shift and go to state 130
    exp                            shift and go to state 226
    fact                           shift and go to state 133

state 202

    (105) opSExp -> LTOEQ . exp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    cte                            shift and go to state 130
    exp                            shift and go to state 227
    fact                           shift and go to state 133

state 203

    (108) opSExp -> < . exp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    cte                            shift and go to state 130
    exp                            shift and go to state 228
    fact                           shift and go to state 133

state 204

    (109) opSExp -> empty .

    AND             reduce using rule 109 (opSExp -> empty .)
    OR              reduce using rule 109 (opSExp -> empty .)
    ,               reduce using rule 109 (opSExp -> empty .)
    )               reduce using rule 109 (opSExp -> empty .)
    ;               reduce using rule 109 (opSExp -> empty .)
    ]               reduce using rule 109 (opSExp -> empty .)


state 205

    (102) sExp -> exp errorOpSExp opSExp .

    AND             reduce using rule 102 (sExp -> exp errorOpSExp opSExp .)
    OR              reduce using rule 102 (sExp -> exp errorOpSExp opSExp .)
    ;               reduce using rule 102 (sExp -> exp errorOpSExp opSExp .)
    )               reduce using rule 102 (sExp -> exp errorOpSExp opSExp .)
    ]               reduce using rule 102 (sExp -> exp errorOpSExp opSExp .)
    ,               reduce using rule 102 (sExp -> exp errorOpSExp opSExp .)


state 206

    (117) cyTerm -> * errorFact . fact
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    funcCall                       shift and go to state 129
    cte                            shift and go to state 130
    fact                           shift and go to state 229

state 207

    (118) cyTerm -> / fact .

    +               reduce using rule 118 (cyTerm -> / fact .)
    -               reduce using rule 118 (cyTerm -> / fact .)
    EQ              reduce using rule 118 (cyTerm -> / fact .)
    DIF             reduce using rule 118 (cyTerm -> / fact .)
    LTOEQ           reduce using rule 118 (cyTerm -> / fact .)
    GTOEQ           reduce using rule 118 (cyTerm -> / fact .)
    >               reduce using rule 118 (cyTerm -> / fact .)
    <               reduce using rule 118 (cyTerm -> / fact .)
    AND             reduce using rule 118 (cyTerm -> / fact .)
    OR              reduce using rule 118 (cyTerm -> / fact .)
    ,               reduce using rule 118 (cyTerm -> / fact .)
    )               reduce using rule 118 (cyTerm -> / fact .)
    ;               reduce using rule 118 (cyTerm -> / fact .)
    ]               reduce using rule 118 (cyTerm -> / fact .)


state 208

    (27) init -> = initWith errorInit .

    ;               reduce using rule 27 (init -> = initWith errorInit .)
    )               reduce using rule 27 (init -> = initWith errorInit .)


state 209

    (31) initDict -> = ( dictType . : dictType ) errorInitDict

    :               shift and go to state 230


state 210

    (33) dictType -> errorDictType . CTES

    CTES            shift and go to state 231


state 211

    (35) dictType -> ID .
    (124) fact -> ID . opAccess errorOpAccess
    (80) funcCall -> ID . ( opParamCall )
    (126) opAccess -> . opStruct
    (127) opAccess -> . opDictionary
    (128) opAccess -> . empty
    (130) opStruct -> . errorOpStruct [ expresion ] opMatrix
    (135) opDictionary -> . . dictIndex
    (142) empty -> .
    (131) errorOpStruct -> .

    :               reduce using rule 35 (dictType -> ID .)
    (               shift and go to state 107
    .               shift and go to state 159
    *               reduce using rule 142 (empty -> .)
    /               reduce using rule 142 (empty -> .)
    +               reduce using rule 142 (empty -> .)
    -               reduce using rule 142 (empty -> .)
    EQ              reduce using rule 142 (empty -> .)
    DIF             reduce using rule 142 (empty -> .)
    LTOEQ           reduce using rule 142 (empty -> .)
    GTOEQ           reduce using rule 142 (empty -> .)
    >               reduce using rule 142 (empty -> .)
    <               reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)
    [               reduce using rule 131 (errorOpStruct -> .)

    errorOpStruct                  shift and go to state 155
    opDictionary                   shift and go to state 160
    opStruct                       shift and go to state 156
    opAccess                       shift and go to state 157
    empty                          shift and go to state 158

state 212

    (34) dictType -> cte .
    (121) fact -> cte .

    :               reduce using rule 34 (dictType -> cte .)
    *               reduce using rule 121 (fact -> cte .)
    /               reduce using rule 121 (fact -> cte .)
    +               reduce using rule 121 (fact -> cte .)
    -               reduce using rule 121 (fact -> cte .)
    EQ              reduce using rule 121 (fact -> cte .)
    DIF             reduce using rule 121 (fact -> cte .)
    LTOEQ           reduce using rule 121 (fact -> cte .)
    GTOEQ           reduce using rule 121 (fact -> cte .)
    >               reduce using rule 121 (fact -> cte .)
    <               reduce using rule 121 (fact -> cte .)
    AND             reduce using rule 121 (fact -> cte .)
    OR              reduce using rule 121 (fact -> cte .)
    )               reduce using rule 121 (fact -> cte .)


state 213

    (76) assignOptions -> [ expresion ] . assignMatrix init
    (77) assignMatrix -> . [ expresion ] errorAssignMatrix
    (78) assignMatrix -> . empty
    (142) empty -> .

    [               shift and go to state 233
    =               reduce using rule 142 (empty -> .)

    assignMatrix                   shift and go to state 232
    empty                          shift and go to state 234

state 214

    (90) condition -> errorCondition IF ( expresion ) . { body } optionalElse

    {               shift and go to state 235


state 215

    (88) optionalMatrix -> [ CTED ] .

    ;               reduce using rule 88 (optionalMatrix -> [ CTED ] .)


state 216

    (44) return -> errorReturn RETURN . expresion ;
    (97) expresion -> . sExp cyExpresion errorExpresion
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 236
    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 217

    (68) whileCycle -> errorWhileCycle WHILE ( expresion ) { . body }
    (62) body -> . errorBody cyInstruction
    (63) body -> . empty
    (64) errorBody -> .
    (142) empty -> .

    ID              reduce using rule 64 (errorBody -> .)
    IF              reduce using rule 64 (errorBody -> .)
    FOR             reduce using rule 64 (errorBody -> .)
    WHILE           reduce using rule 64 (errorBody -> .)
    }               reduce using rule 142 (empty -> .)

    body                           shift and go to state 237
    errorBody                      shift and go to state 67
    empty                          shift and go to state 68

state 218

    (70) forCycle -> errorForCycle FOR ( assign ; expresion . ; assign ) { body }

    ;               shift and go to state 238


state 219

    (130) opStruct -> errorOpStruct [ expresion . ] opMatrix

    ]               shift and go to state 239


state 220

    (83) cyParamCall -> , expresion cyParamCall .

    )               reduce using rule 83 (cyParamCall -> , expresion cyParamCall .)


state 221

    (112) cyExp -> + term .

    EQ              reduce using rule 112 (cyExp -> + term .)
    DIF             reduce using rule 112 (cyExp -> + term .)
    LTOEQ           reduce using rule 112 (cyExp -> + term .)
    GTOEQ           reduce using rule 112 (cyExp -> + term .)
    >               reduce using rule 112 (cyExp -> + term .)
    <               reduce using rule 112 (cyExp -> + term .)
    AND             reduce using rule 112 (cyExp -> + term .)
    OR              reduce using rule 112 (cyExp -> + term .)
    ,               reduce using rule 112 (cyExp -> + term .)
    )               reduce using rule 112 (cyExp -> + term .)
    ;               reduce using rule 112 (cyExp -> + term .)
    ]               reduce using rule 112 (cyExp -> + term .)


state 222

    (113) cyExp -> - term .

    EQ              reduce using rule 113 (cyExp -> - term .)
    DIF             reduce using rule 113 (cyExp -> - term .)
    LTOEQ           reduce using rule 113 (cyExp -> - term .)
    GTOEQ           reduce using rule 113 (cyExp -> - term .)
    >               reduce using rule 113 (cyExp -> - term .)
    <               reduce using rule 113 (cyExp -> - term .)
    AND             reduce using rule 113 (cyExp -> - term .)
    OR              reduce using rule 113 (cyExp -> - term .)
    ,               reduce using rule 113 (cyExp -> - term .)
    )               reduce using rule 113 (cyExp -> - term .)
    ;               reduce using rule 113 (cyExp -> - term .)
    ]               reduce using rule 113 (cyExp -> - term .)


state 223

    (103) opSExp -> EQ exp .

    AND             reduce using rule 103 (opSExp -> EQ exp .)
    OR              reduce using rule 103 (opSExp -> EQ exp .)
    ,               reduce using rule 103 (opSExp -> EQ exp .)
    )               reduce using rule 103 (opSExp -> EQ exp .)
    ;               reduce using rule 103 (opSExp -> EQ exp .)
    ]               reduce using rule 103 (opSExp -> EQ exp .)


state 224

    (104) opSExp -> DIF exp .

    AND             reduce using rule 104 (opSExp -> DIF exp .)
    OR              reduce using rule 104 (opSExp -> DIF exp .)
    ,               reduce using rule 104 (opSExp -> DIF exp .)
    )               reduce using rule 104 (opSExp -> DIF exp .)
    ;               reduce using rule 104 (opSExp -> DIF exp .)
    ]               reduce using rule 104 (opSExp -> DIF exp .)


state 225

    (106) opSExp -> GTOEQ exp .

    AND             reduce using rule 106 (opSExp -> GTOEQ exp .)
    OR              reduce using rule 106 (opSExp -> GTOEQ exp .)
    ,               reduce using rule 106 (opSExp -> GTOEQ exp .)
    )               reduce using rule 106 (opSExp -> GTOEQ exp .)
    ;               reduce using rule 106 (opSExp -> GTOEQ exp .)
    ]               reduce using rule 106 (opSExp -> GTOEQ exp .)


state 226

    (107) opSExp -> > exp .

    AND             reduce using rule 107 (opSExp -> > exp .)
    OR              reduce using rule 107 (opSExp -> > exp .)
    ,               reduce using rule 107 (opSExp -> > exp .)
    )               reduce using rule 107 (opSExp -> > exp .)
    ;               reduce using rule 107 (opSExp -> > exp .)
    ]               reduce using rule 107 (opSExp -> > exp .)


state 227

    (105) opSExp -> LTOEQ exp .

    AND             reduce using rule 105 (opSExp -> LTOEQ exp .)
    OR              reduce using rule 105 (opSExp -> LTOEQ exp .)
    ,               reduce using rule 105 (opSExp -> LTOEQ exp .)
    )               reduce using rule 105 (opSExp -> LTOEQ exp .)
    ;               reduce using rule 105 (opSExp -> LTOEQ exp .)
    ]               reduce using rule 105 (opSExp -> LTOEQ exp .)


state 228

    (108) opSExp -> < exp .

    AND             reduce using rule 108 (opSExp -> < exp .)
    OR              reduce using rule 108 (opSExp -> < exp .)
    ,               reduce using rule 108 (opSExp -> < exp .)
    )               reduce using rule 108 (opSExp -> < exp .)
    ;               reduce using rule 108 (opSExp -> < exp .)
    ]               reduce using rule 108 (opSExp -> < exp .)


state 229

    (117) cyTerm -> * errorFact fact .

    +               reduce using rule 117 (cyTerm -> * errorFact fact .)
    -               reduce using rule 117 (cyTerm -> * errorFact fact .)
    EQ              reduce using rule 117 (cyTerm -> * errorFact fact .)
    DIF             reduce using rule 117 (cyTerm -> * errorFact fact .)
    LTOEQ           reduce using rule 117 (cyTerm -> * errorFact fact .)
    GTOEQ           reduce using rule 117 (cyTerm -> * errorFact fact .)
    >               reduce using rule 117 (cyTerm -> * errorFact fact .)
    <               reduce using rule 117 (cyTerm -> * errorFact fact .)
    AND             reduce using rule 117 (cyTerm -> * errorFact fact .)
    OR              reduce using rule 117 (cyTerm -> * errorFact fact .)
    ,               reduce using rule 117 (cyTerm -> * errorFact fact .)
    )               reduce using rule 117 (cyTerm -> * errorFact fact .)
    ;               reduce using rule 117 (cyTerm -> * errorFact fact .)
    ]               reduce using rule 117 (cyTerm -> * errorFact fact .)


state 230

    (31) initDict -> = ( dictType : . dictType ) errorInitDict
    (33) dictType -> . errorDictType CTES
    (34) dictType -> . cte
    (35) dictType -> . ID
    (36) errorDictType -> .
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE

    ID              shift and go to state 242
    CTES            reduce using rule 36 (errorDictType -> .)
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    dictType                       shift and go to state 240
    errorDictType                  shift and go to state 210
    cte                            shift and go to state 241

state 231

    (33) dictType -> errorDictType CTES .

    )               reduce using rule 33 (dictType -> errorDictType CTES .)
    :               reduce using rule 33 (dictType -> errorDictType CTES .)


state 232

    (76) assignOptions -> [ expresion ] assignMatrix . init
    (27) init -> . = initWith errorInit

    =               shift and go to state 244

    init                           shift and go to state 243

state 233

    (77) assignMatrix -> [ . expresion ] errorAssignMatrix
    (97) expresion -> . sExp cyExpresion errorExpresion
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 245
    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 234

    (78) assignMatrix -> empty .

    =               reduce using rule 78 (assignMatrix -> empty .)


state 235

    (90) condition -> errorCondition IF ( expresion ) { . body } optionalElse
    (62) body -> . errorBody cyInstruction
    (63) body -> . empty
    (64) errorBody -> .
    (142) empty -> .

    ID              reduce using rule 64 (errorBody -> .)
    IF              reduce using rule 64 (errorBody -> .)
    FOR             reduce using rule 64 (errorBody -> .)
    WHILE           reduce using rule 64 (errorBody -> .)
    }               reduce using rule 142 (empty -> .)

    body                           shift and go to state 246
    errorBody                      shift and go to state 67
    empty                          shift and go to state 68

state 236

    (44) return -> errorReturn RETURN expresion . ;

    ;               shift and go to state 247


state 237

    (68) whileCycle -> errorWhileCycle WHILE ( expresion ) { body . }

    }               shift and go to state 248


state 238

    (70) forCycle -> errorForCycle FOR ( assign ; expresion ; . assign ) { body }
    (72) assign -> . ID errorAssign assignOptions

    ID              shift and go to state 147

    assign                         shift and go to state 249

state 239

    (130) opStruct -> errorOpStruct [ expresion ] . opMatrix
    (132) opMatrix -> . errorOpMatrix [ expresion ]
    (133) opMatrix -> . empty
    (134) errorOpMatrix -> .
    (142) empty -> .

    [               reduce using rule 134 (errorOpMatrix -> .)
    *               reduce using rule 142 (empty -> .)
    /               reduce using rule 142 (empty -> .)
    +               reduce using rule 142 (empty -> .)
    -               reduce using rule 142 (empty -> .)
    EQ              reduce using rule 142 (empty -> .)
    DIF             reduce using rule 142 (empty -> .)
    LTOEQ           reduce using rule 142 (empty -> .)
    GTOEQ           reduce using rule 142 (empty -> .)
    >               reduce using rule 142 (empty -> .)
    <               reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    ,               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)
    ]               reduce using rule 142 (empty -> .)
    ;               reduce using rule 142 (empty -> .)

    empty                          shift and go to state 252
    errorOpMatrix                  shift and go to state 250
    opMatrix                       shift and go to state 251

state 240

    (31) initDict -> = ( dictType : dictType . ) errorInitDict

    )               shift and go to state 253


state 241

    (34) dictType -> cte .

    )               reduce using rule 34 (dictType -> cte .)


state 242

    (35) dictType -> ID .

    )               reduce using rule 35 (dictType -> ID .)


state 243

    (76) assignOptions -> [ expresion ] assignMatrix init .

    ;               reduce using rule 76 (assignOptions -> [ expresion ] assignMatrix init .)
    )               reduce using rule 76 (assignOptions -> [ expresion ] assignMatrix init .)


state 244

    (27) init -> = . initWith errorInit
    (29) initWith -> . expresion
    (30) initWith -> . funcCall
    (97) expresion -> . sExp cyExpresion errorExpresion
    (80) funcCall -> . ID ( opParamCall )
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE

    ID              shift and go to state 172
    CTES            shift and go to state 126
    (               shift and go to state 120
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 173
    initWith                       shift and go to state 170
    funcCall                       shift and go to state 174
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    term                           shift and go to state 127
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 245

    (77) assignMatrix -> [ expresion . ] errorAssignMatrix

    ]               shift and go to state 254


state 246

    (90) condition -> errorCondition IF ( expresion ) { body . } optionalElse

    }               shift and go to state 255


state 247

    (44) return -> errorReturn RETURN expresion ; .

    }               reduce using rule 44 (return -> errorReturn RETURN expresion ; .)


state 248

    (68) whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .

    ID              reduce using rule 68 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    IF              reduce using rule 68 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    FOR             reduce using rule 68 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    WHILE           reduce using rule 68 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    }               reduce using rule 68 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    RETURN          reduce using rule 68 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)


state 249

    (70) forCycle -> errorForCycle FOR ( assign ; expresion ; assign . ) { body }

    )               shift and go to state 256


state 250

    (132) opMatrix -> errorOpMatrix . [ expresion ]

    [               shift and go to state 257


state 251

    (130) opStruct -> errorOpStruct [ expresion ] opMatrix .

    *               reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    /               reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    +               reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    -               reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    EQ              reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    DIF             reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    LTOEQ           reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    GTOEQ           reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    >               reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    <               reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    AND             reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    OR              reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    ;               reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    )               reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    ,               reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    ]               reduce using rule 130 (opStruct -> errorOpStruct [ expresion ] opMatrix .)


state 252

    (133) opMatrix -> empty .

    *               reduce using rule 133 (opMatrix -> empty .)
    /               reduce using rule 133 (opMatrix -> empty .)
    +               reduce using rule 133 (opMatrix -> empty .)
    -               reduce using rule 133 (opMatrix -> empty .)
    EQ              reduce using rule 133 (opMatrix -> empty .)
    DIF             reduce using rule 133 (opMatrix -> empty .)
    LTOEQ           reduce using rule 133 (opMatrix -> empty .)
    GTOEQ           reduce using rule 133 (opMatrix -> empty .)
    >               reduce using rule 133 (opMatrix -> empty .)
    <               reduce using rule 133 (opMatrix -> empty .)
    AND             reduce using rule 133 (opMatrix -> empty .)
    OR              reduce using rule 133 (opMatrix -> empty .)
    ,               reduce using rule 133 (opMatrix -> empty .)
    )               reduce using rule 133 (opMatrix -> empty .)
    ]               reduce using rule 133 (opMatrix -> empty .)
    ;               reduce using rule 133 (opMatrix -> empty .)


state 253

    (31) initDict -> = ( dictType : dictType ) . errorInitDict
    (32) errorInitDict -> .

    ;               reduce using rule 32 (errorInitDict -> .)
    )               reduce using rule 32 (errorInitDict -> .)

    errorInitDict                  shift and go to state 258

state 254

    (77) assignMatrix -> [ expresion ] . errorAssignMatrix
    (79) errorAssignMatrix -> .

    =               reduce using rule 79 (errorAssignMatrix -> .)

    errorAssignMatrix              shift and go to state 259

state 255

    (90) condition -> errorCondition IF ( expresion ) { body } . optionalElse
    (92) optionalElse -> . errorElse ELSE { body }
    (93) optionalElse -> . empty
    (94) errorElse -> .
    (142) empty -> .

    ELSE            reduce using rule 94 (errorElse -> .)
    ID              reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    }               reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)

    errorElse                      shift and go to state 260
    optionalElse                   shift and go to state 261
    empty                          shift and go to state 262

state 256

    (70) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) . { body }

    {               shift and go to state 263


state 257

    (132) opMatrix -> errorOpMatrix [ . expresion ]
    (97) expresion -> . sExp cyExpresion errorExpresion
    (102) sExp -> . exp errorOpSExp opSExp
    (111) exp -> . term errorCyExp cyExp
    (116) term -> . fact cyTerm
    (120) fact -> . CTES
    (121) fact -> . cte
    (122) fact -> . funcCall
    (123) fact -> . ( expresion )
    (124) fact -> . ID opAccess errorOpAccess
    (138) cte -> . CTED
    (139) cte -> . CTEF
    (140) cte -> . TRUE
    (141) cte -> . FALSE
    (80) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 126
    (               shift and go to state 120
    ID              shift and go to state 124
    CTED            shift and go to state 123
    CTEF            shift and go to state 131
    TRUE            shift and go to state 119
    FALSE           shift and go to state 128

    expresion                      shift and go to state 264
    term                           shift and go to state 127
    funcCall                       shift and go to state 129
    sExp                           shift and go to state 121
    cte                            shift and go to state 130
    exp                            shift and go to state 132
    fact                           shift and go to state 133

state 258

    (31) initDict -> = ( dictType : dictType ) errorInitDict .

    ;               reduce using rule 31 (initDict -> = ( dictType : dictType ) errorInitDict .)
    )               reduce using rule 31 (initDict -> = ( dictType : dictType ) errorInitDict .)


state 259

    (77) assignMatrix -> [ expresion ] errorAssignMatrix .

    =               reduce using rule 77 (assignMatrix -> [ expresion ] errorAssignMatrix .)


state 260

    (92) optionalElse -> errorElse . ELSE { body }

    ELSE            shift and go to state 265


state 261

    (90) condition -> errorCondition IF ( expresion ) { body } optionalElse .

    ID              reduce using rule 90 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    IF              reduce using rule 90 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    FOR             reduce using rule 90 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    WHILE           reduce using rule 90 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    }               reduce using rule 90 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    RETURN          reduce using rule 90 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)


state 262

    (93) optionalElse -> empty .

    ID              reduce using rule 93 (optionalElse -> empty .)
    IF              reduce using rule 93 (optionalElse -> empty .)
    FOR             reduce using rule 93 (optionalElse -> empty .)
    WHILE           reduce using rule 93 (optionalElse -> empty .)
    }               reduce using rule 93 (optionalElse -> empty .)
    RETURN          reduce using rule 93 (optionalElse -> empty .)


state 263

    (70) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { . body }
    (62) body -> . errorBody cyInstruction
    (63) body -> . empty
    (64) errorBody -> .
    (142) empty -> .

    ID              reduce using rule 64 (errorBody -> .)
    IF              reduce using rule 64 (errorBody -> .)
    FOR             reduce using rule 64 (errorBody -> .)
    WHILE           reduce using rule 64 (errorBody -> .)
    }               reduce using rule 142 (empty -> .)

    body                           shift and go to state 266
    errorBody                      shift and go to state 67
    empty                          shift and go to state 68

state 264

    (132) opMatrix -> errorOpMatrix [ expresion . ]

    ]               shift and go to state 267


state 265

    (92) optionalElse -> errorElse ELSE . { body }

    {               shift and go to state 268


state 266

    (70) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body . }

    }               shift and go to state 269


state 267

    (132) opMatrix -> errorOpMatrix [ expresion ] .

    *               reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    /               reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    +               reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    -               reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    EQ              reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    DIF             reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    LTOEQ           reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    GTOEQ           reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    >               reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    <               reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    AND             reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    OR              reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    ,               reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    )               reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    ]               reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)
    ;               reduce using rule 132 (opMatrix -> errorOpMatrix [ expresion ] .)


state 268

    (92) optionalElse -> errorElse ELSE { . body }
    (62) body -> . errorBody cyInstruction
    (63) body -> . empty
    (64) errorBody -> .
    (142) empty -> .

    ID              reduce using rule 64 (errorBody -> .)
    IF              reduce using rule 64 (errorBody -> .)
    FOR             reduce using rule 64 (errorBody -> .)
    WHILE           reduce using rule 64 (errorBody -> .)
    }               reduce using rule 142 (empty -> .)

    body                           shift and go to state 270
    empty                          shift and go to state 68
    errorBody                      shift and go to state 67

state 269

    (70) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .

    ID              reduce using rule 70 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    IF              reduce using rule 70 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    FOR             reduce using rule 70 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    WHILE           reduce using rule 70 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    }               reduce using rule 70 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    RETURN          reduce using rule 70 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)


state 270

    (92) optionalElse -> errorElse ELSE { body . }

    }               shift and go to state 271


state 271

    (92) optionalElse -> errorElse ELSE { body } .

    ID              reduce using rule 92 (optionalElse -> errorElse ELSE { body } .)
    IF              reduce using rule 92 (optionalElse -> errorElse ELSE { body } .)
    FOR             reduce using rule 92 (optionalElse -> errorElse ELSE { body } .)
    WHILE           reduce using rule 92 (optionalElse -> errorElse ELSE { body } .)
    }               reduce using rule 92 (optionalElse -> errorElse ELSE { body } .)
    RETURN          reduce using rule 92 (optionalElse -> errorElse ELSE { body } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CTES in state 171 resolved as shift
WARNING: reduce/reduce conflict in state 174 resolved using rule (initWith -> funcCall)
WARNING: rejected rule (fact -> funcCall) in state 174
