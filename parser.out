Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID { opVars opFunctions main }
Rule 2     opVars -> vars
Rule 3     opVars -> empty
Rule 4     opFunctions -> function opFunctions
Rule 5     opFunctions -> empty
Rule 6     vars -> VARS declare
Rule 7     type -> INT
Rule 8     type -> FLOAT
Rule 9     type -> STRING
Rule 10    type -> OBJECT
Rule 11    type -> BOOL
Rule 12    main -> MAIN { opVars body }
Rule 13    instr -> c ;
Rule 14    instr -> condition
Rule 15    instr -> cycle
Rule 16    c -> assign
Rule 17    c -> funcCall
Rule 18    declare -> d
Rule 19    declare -> e
Rule 20    declare -> f
Rule 21    init -> = i
Rule 22    i -> expresion
Rule 23    i -> funcCall
Rule 24    initDict -> = ( j : j )
Rule 25    j -> CTES
Rule 26    j -> cte
Rule 27    j -> ID
Rule 28    param -> type ID g k
Rule 29    k -> ; param
Rule 30    k -> empty
Rule 31    function -> FUNC ID opParameters opReturns
Rule 32    return -> RETURN expresion ;
Rule 33    opParameters -> ( param )
Rule 34    opParameters -> empty
Rule 35    opReturns -> RETURNS type { opVars body return }
Rule 36    opReturns -> { opVars body }
Rule 37    d -> type ID g ; h
Rule 38    e -> STRUCT ID struct ; h
Rule 39    f -> DICT ID dict ; h
Rule 40    g -> , ID
Rule 41    g -> empty
Rule 42    h -> declare
Rule 43    h -> empty
Rule 44    body -> cyInstruction
Rule 45    body -> empty
Rule 46    cyInstruction -> instr body
Rule 47    cycle -> forCycle
Rule 48    cycle -> whileCycle
Rule 49    whileCycle -> WHILE ( expresion ) { body }
Rule 50    forCycle -> FOR ( assign ; expresion ; assign ) { body }
Rule 51    assign -> ID assignOptions
Rule 52    assignOptions -> init
Rule 53    assignOptions -> initDict
Rule 54    assignOptions -> [ expresion ] assignMatrix init
Rule 55    assignMatrix -> [ expresion ]
Rule 56    assignMatrix -> empty
Rule 57    funcCall -> ID ( opParamCall )
Rule 58    opParamCall -> expresion cyParamCall
Rule 59    opParamCall -> empty
Rule 60    cyParamCall -> , expresion cyParamCall
Rule 61    cyParamCall -> empty
Rule 62    struct -> structType [ CTED ] optionalMatrix
Rule 63    structType -> type
Rule 64    structType -> DICT dict
Rule 65    optionalMatrix -> [ CTED ]
Rule 66    optionalMatrix -> empty
Rule 67    condition -> IF ( expresion ) { body } optionalElse
Rule 68    optionalElse -> ELSE { body }
Rule 69    optionalElse -> empty
Rule 70    dict -> ( type : type )
Rule 71    expresion -> sExp cyExpresion
Rule 72    cyExpresion -> AND expresion
Rule 73    cyExpresion -> OR expresion
Rule 74    cyExpresion -> empty
Rule 75    sExp -> exp opSExp
Rule 76    opSExp -> EQ exp
Rule 77    opSExp -> DIF exp
Rule 78    opSExp -> LTOEQ exp
Rule 79    opSExp -> GTOEQ exp
Rule 80    opSExp -> > exp
Rule 81    opSExp -> < exp
Rule 82    opSExp -> empty
Rule 83    exp -> term cyExp
Rule 84    cyExp -> + term
Rule 85    cyExp -> - term
Rule 86    cyExp -> empty
Rule 87    term -> fact cyTerm
Rule 88    cyTerm -> * fact
Rule 89    cyTerm -> / fact
Rule 90    cyTerm -> empty
Rule 91    fact -> CTES
Rule 92    fact -> cte
Rule 93    fact -> funcCall
Rule 94    fact -> ( expresion )
Rule 95    fact -> ID opAccess
Rule 96    opAccess -> opStruct
Rule 97    opAccess -> opDictionary
Rule 98    opAccess -> empty
Rule 99    opStruct -> [ expresion ] opMatrix
Rule 100   opMatrix -> [ expresion ]
Rule 101   opMatrix -> empty
Rule 102   opDictionary -> . dictIndex
Rule 103   dictIndex -> FIRST
Rule 104   dictIndex -> LAST
Rule 105   cte -> CTED
Rule 106   cte -> CTEF
Rule 107   cte -> TRUE
Rule 108   cte -> FALSE
Rule 109   empty -> <empty>

Terminals, with rules where they appear

(                    : 24 33 49 50 57 67 70 94
)                    : 24 33 49 50 57 67 70 94
*                    : 88
+                    : 84
,                    : 40 60
-                    : 85
.                    : 102
/                    : 89
:                    : 24 70
;                    : 13 29 32 37 38 39 50 50
<                    : 81
=                    : 21 24
>                    : 80
AND                  : 72
BOOL                 : 11
CTED                 : 62 65 105
CTEF                 : 106
CTES                 : 25 91
DICT                 : 39 64
DIF                  : 77
ELSE                 : 68
EQ                   : 76
FALSE                : 108
FIRST                : 103
FLOAT                : 8
FOR                  : 50
FUNC                 : 31
GTOEQ                : 79
ID                   : 1 27 28 31 37 38 39 40 51 57 95
IF                   : 67
INT                  : 7
LAST                 : 104
LTOEQ                : 78
MAIN                 : 12
OBJECT               : 10
OR                   : 73
PROGRAM              : 1
RETURN               : 32
RETURNS              : 35
STRING               : 9
STRUCT               : 38
TRUE                 : 107
VARS                 : 6
WHILE                : 49
[                    : 54 55 62 65 99 100
]                    : 54 55 62 65 99 100
error                : 
{                    : 1 12 35 36 49 50 67 68
}                    : 1 12 35 36 49 50 67 68

Nonterminals, with rules where they appear

assign               : 16 50 50
assignMatrix         : 54
assignOptions        : 51
body                 : 12 35 36 46 49 50 67 68
c                    : 13
condition            : 14
cte                  : 26 92
cyExp                : 83
cyExpresion          : 71
cyInstruction        : 44
cyParamCall          : 58 60
cyTerm               : 87
cycle                : 15
d                    : 18
declare              : 6 42
dict                 : 39 64
dictIndex            : 102
e                    : 19
empty                : 3 5 30 34 41 43 45 56 59 61 66 69 74 82 86 90 98 101
exp                  : 75 76 77 78 79 80 81
expresion            : 22 32 49 50 54 55 58 60 67 72 73 94 99 100
f                    : 20
fact                 : 87 88 89
forCycle             : 47
funcCall             : 17 23 93
function             : 4
g                    : 28 37
h                    : 37 38 39
i                    : 21
init                 : 52 54
initDict             : 53
instr                : 46
j                    : 24 24
k                    : 28
main                 : 1
opAccess             : 95
opDictionary         : 97
opFunctions          : 1 4
opMatrix             : 99
opParamCall          : 57
opParameters         : 31
opReturns            : 31
opSExp               : 75
opStruct             : 96
opVars               : 1 12 35 36
optionalElse         : 67
optionalMatrix       : 62
param                : 29 33
program              : 0
return               : 35
sExp                 : 71
struct               : 38
structType           : 62
term                 : 83 84 85
type                 : 28 35 37 63 70 70
vars                 : 2
whileCycle           : 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID { opVars opFunctions main }

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID { opVars opFunctions main }

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . { opVars opFunctions main }

    {               shift and go to state 4


state 4

    (1) program -> PROGRAM ID { . opVars opFunctions main }
    (2) opVars -> . vars
    (3) opVars -> . empty
    (6) vars -> . VARS declare
    (109) empty -> .

    VARS            shift and go to state 5
    FUNC            reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)

    vars                           shift and go to state 6
    opVars                         shift and go to state 7
    empty                          shift and go to state 8

state 5

    (6) vars -> VARS . declare
    (18) declare -> . d
    (19) declare -> . e
    (20) declare -> . f
    (37) d -> . type ID g ; h
    (38) e -> . STRUCT ID struct ; h
    (39) f -> . DICT ID dict ; h
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    STRUCT          shift and go to state 20
    DICT            shift and go to state 16
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    OBJECT          shift and go to state 9
    BOOL            shift and go to state 17

    e                              shift and go to state 10
    d                              shift and go to state 11
    f                              shift and go to state 12
    type                           shift and go to state 18
    declare                        shift and go to state 19

state 6

    (2) opVars -> vars .

    IF              reduce using rule 2 (opVars -> vars .)
    ID              reduce using rule 2 (opVars -> vars .)
    FOR             reduce using rule 2 (opVars -> vars .)
    WHILE           reduce using rule 2 (opVars -> vars .)
    }               reduce using rule 2 (opVars -> vars .)
    FUNC            reduce using rule 2 (opVars -> vars .)
    MAIN            reduce using rule 2 (opVars -> vars .)
    RETURN          reduce using rule 2 (opVars -> vars .)


state 7

    (1) program -> PROGRAM ID { opVars . opFunctions main }
    (4) opFunctions -> . function opFunctions
    (5) opFunctions -> . empty
    (31) function -> . FUNC ID opParameters opReturns
    (109) empty -> .

    FUNC            shift and go to state 22
    MAIN            reduce using rule 109 (empty -> .)

    function                       shift and go to state 21
    empty                          shift and go to state 23
    opFunctions                    shift and go to state 24

state 8

    (3) opVars -> empty .

    IF              reduce using rule 3 (opVars -> empty .)
    ID              reduce using rule 3 (opVars -> empty .)
    FOR             reduce using rule 3 (opVars -> empty .)
    WHILE           reduce using rule 3 (opVars -> empty .)
    }               reduce using rule 3 (opVars -> empty .)
    FUNC            reduce using rule 3 (opVars -> empty .)
    MAIN            reduce using rule 3 (opVars -> empty .)
    RETURN          reduce using rule 3 (opVars -> empty .)


state 9

    (10) type -> OBJECT .

    ID              reduce using rule 10 (type -> OBJECT .)
    {               reduce using rule 10 (type -> OBJECT .)
    [               reduce using rule 10 (type -> OBJECT .)
    :               reduce using rule 10 (type -> OBJECT .)
    )               reduce using rule 10 (type -> OBJECT .)


state 10

    (19) declare -> e .

    FUNC            reduce using rule 19 (declare -> e .)
    MAIN            reduce using rule 19 (declare -> e .)
    IF              reduce using rule 19 (declare -> e .)
    ID              reduce using rule 19 (declare -> e .)
    FOR             reduce using rule 19 (declare -> e .)
    WHILE           reduce using rule 19 (declare -> e .)
    }               reduce using rule 19 (declare -> e .)
    RETURN          reduce using rule 19 (declare -> e .)


state 11

    (18) declare -> d .

    FUNC            reduce using rule 18 (declare -> d .)
    MAIN            reduce using rule 18 (declare -> d .)
    IF              reduce using rule 18 (declare -> d .)
    ID              reduce using rule 18 (declare -> d .)
    FOR             reduce using rule 18 (declare -> d .)
    WHILE           reduce using rule 18 (declare -> d .)
    }               reduce using rule 18 (declare -> d .)
    RETURN          reduce using rule 18 (declare -> d .)


state 12

    (20) declare -> f .

    FUNC            reduce using rule 20 (declare -> f .)
    MAIN            reduce using rule 20 (declare -> f .)
    IF              reduce using rule 20 (declare -> f .)
    ID              reduce using rule 20 (declare -> f .)
    FOR             reduce using rule 20 (declare -> f .)
    WHILE           reduce using rule 20 (declare -> f .)
    }               reduce using rule 20 (declare -> f .)
    RETURN          reduce using rule 20 (declare -> f .)


state 13

    (7) type -> INT .

    ID              reduce using rule 7 (type -> INT .)
    {               reduce using rule 7 (type -> INT .)
    [               reduce using rule 7 (type -> INT .)
    :               reduce using rule 7 (type -> INT .)
    )               reduce using rule 7 (type -> INT .)


state 14

    (8) type -> FLOAT .

    ID              reduce using rule 8 (type -> FLOAT .)
    {               reduce using rule 8 (type -> FLOAT .)
    [               reduce using rule 8 (type -> FLOAT .)
    :               reduce using rule 8 (type -> FLOAT .)
    )               reduce using rule 8 (type -> FLOAT .)


state 15

    (9) type -> STRING .

    ID              reduce using rule 9 (type -> STRING .)
    {               reduce using rule 9 (type -> STRING .)
    [               reduce using rule 9 (type -> STRING .)
    :               reduce using rule 9 (type -> STRING .)
    )               reduce using rule 9 (type -> STRING .)


state 16

    (39) f -> DICT . ID dict ; h

    ID              shift and go to state 25


state 17

    (11) type -> BOOL .

    ID              reduce using rule 11 (type -> BOOL .)
    {               reduce using rule 11 (type -> BOOL .)
    [               reduce using rule 11 (type -> BOOL .)
    :               reduce using rule 11 (type -> BOOL .)
    )               reduce using rule 11 (type -> BOOL .)


state 18

    (37) d -> type . ID g ; h

    ID              shift and go to state 26


state 19

    (6) vars -> VARS declare .

    FUNC            reduce using rule 6 (vars -> VARS declare .)
    MAIN            reduce using rule 6 (vars -> VARS declare .)
    IF              reduce using rule 6 (vars -> VARS declare .)
    ID              reduce using rule 6 (vars -> VARS declare .)
    FOR             reduce using rule 6 (vars -> VARS declare .)
    WHILE           reduce using rule 6 (vars -> VARS declare .)
    RETURN          reduce using rule 6 (vars -> VARS declare .)
    }               reduce using rule 6 (vars -> VARS declare .)


state 20

    (38) e -> STRUCT . ID struct ; h

    ID              shift and go to state 27


state 21

    (4) opFunctions -> function . opFunctions
    (4) opFunctions -> . function opFunctions
    (5) opFunctions -> . empty
    (31) function -> . FUNC ID opParameters opReturns
    (109) empty -> .

    FUNC            shift and go to state 22
    MAIN            reduce using rule 109 (empty -> .)

    function                       shift and go to state 21
    empty                          shift and go to state 23
    opFunctions                    shift and go to state 28

state 22

    (31) function -> FUNC . ID opParameters opReturns

    ID              shift and go to state 29


state 23

    (5) opFunctions -> empty .

    MAIN            reduce using rule 5 (opFunctions -> empty .)


state 24

    (1) program -> PROGRAM ID { opVars opFunctions . main }
    (12) main -> . MAIN { opVars body }

    MAIN            shift and go to state 30

    main                           shift and go to state 31

state 25

    (39) f -> DICT ID . dict ; h
    (70) dict -> . ( type : type )

    (               shift and go to state 32

    dict                           shift and go to state 33

state 26

    (37) d -> type ID . g ; h
    (40) g -> . , ID
    (41) g -> . empty
    (109) empty -> .

    ,               shift and go to state 35
    ;               reduce using rule 109 (empty -> .)

    empty                          shift and go to state 36
    g                              shift and go to state 34

state 27

    (38) e -> STRUCT ID . struct ; h
    (62) struct -> . structType [ CTED ] optionalMatrix
    (63) structType -> . type
    (64) structType -> . DICT dict
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    DICT            shift and go to state 40
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    OBJECT          shift and go to state 9
    BOOL            shift and go to state 17

    structType                     shift and go to state 37
    struct                         shift and go to state 39
    type                           shift and go to state 38

state 28

    (4) opFunctions -> function opFunctions .

    MAIN            reduce using rule 4 (opFunctions -> function opFunctions .)


state 29

    (31) function -> FUNC ID . opParameters opReturns
    (33) opParameters -> . ( param )
    (34) opParameters -> . empty
    (109) empty -> .

    (               shift and go to state 41
    RETURNS         reduce using rule 109 (empty -> .)
    {               reduce using rule 109 (empty -> .)

    opParameters                   shift and go to state 42
    empty                          shift and go to state 43

state 30

    (12) main -> MAIN . { opVars body }

    {               shift and go to state 44


state 31

    (1) program -> PROGRAM ID { opVars opFunctions main . }

    }               shift and go to state 45


state 32

    (70) dict -> ( . type : type )
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    OBJECT          shift and go to state 9
    BOOL            shift and go to state 17

    type                           shift and go to state 46

state 33

    (39) f -> DICT ID dict . ; h

    ;               shift and go to state 47


state 34

    (37) d -> type ID g . ; h

    ;               shift and go to state 48


state 35

    (40) g -> , . ID

    ID              shift and go to state 49


state 36

    (41) g -> empty .

    ;               reduce using rule 41 (g -> empty .)
    )               reduce using rule 41 (g -> empty .)


state 37

    (62) struct -> structType . [ CTED ] optionalMatrix

    [               shift and go to state 50


state 38

    (63) structType -> type .

    [               reduce using rule 63 (structType -> type .)


state 39

    (38) e -> STRUCT ID struct . ; h

    ;               shift and go to state 51


state 40

    (64) structType -> DICT . dict
    (70) dict -> . ( type : type )

    (               shift and go to state 32

    dict                           shift and go to state 52

state 41

    (33) opParameters -> ( . param )
    (28) param -> . type ID g k
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    OBJECT          shift and go to state 9
    BOOL            shift and go to state 17

    type                           shift and go to state 54
    param                          shift and go to state 53

state 42

    (31) function -> FUNC ID opParameters . opReturns
    (35) opReturns -> . RETURNS type { opVars body return }
    (36) opReturns -> . { opVars body }

    RETURNS         shift and go to state 55
    {               shift and go to state 56

    opReturns                      shift and go to state 57

state 43

    (34) opParameters -> empty .

    RETURNS         reduce using rule 34 (opParameters -> empty .)
    {               reduce using rule 34 (opParameters -> empty .)


state 44

    (12) main -> MAIN { . opVars body }
    (2) opVars -> . vars
    (3) opVars -> . empty
    (6) vars -> . VARS declare
    (109) empty -> .

    VARS            shift and go to state 5
    IF              reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)

    opVars                         shift and go to state 58
    empty                          shift and go to state 8
    vars                           shift and go to state 6

state 45

    (1) program -> PROGRAM ID { opVars opFunctions main } .

    $end            reduce using rule 1 (program -> PROGRAM ID { opVars opFunctions main } .)


state 46

    (70) dict -> ( type . : type )

    :               shift and go to state 59


state 47

    (39) f -> DICT ID dict ; . h
    (42) h -> . declare
    (43) h -> . empty
    (18) declare -> . d
    (19) declare -> . e
    (20) declare -> . f
    (109) empty -> .
    (37) d -> . type ID g ; h
    (38) e -> . STRUCT ID struct ; h
    (39) f -> . DICT ID dict ; h
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    FUNC            reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)
    STRUCT          shift and go to state 20
    DICT            shift and go to state 16
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    OBJECT          shift and go to state 9
    BOOL            shift and go to state 17

    e                              shift and go to state 10
    d                              shift and go to state 11
    f                              shift and go to state 12
    h                              shift and go to state 60
    type                           shift and go to state 18
    declare                        shift and go to state 61
    empty                          shift and go to state 62

state 48

    (37) d -> type ID g ; . h
    (42) h -> . declare
    (43) h -> . empty
    (18) declare -> . d
    (19) declare -> . e
    (20) declare -> . f
    (109) empty -> .
    (37) d -> . type ID g ; h
    (38) e -> . STRUCT ID struct ; h
    (39) f -> . DICT ID dict ; h
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    FUNC            reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)
    STRUCT          shift and go to state 20
    DICT            shift and go to state 16
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    OBJECT          shift and go to state 9
    BOOL            shift and go to state 17

    e                              shift and go to state 10
    d                              shift and go to state 11
    f                              shift and go to state 12
    h                              shift and go to state 63
    type                           shift and go to state 18
    declare                        shift and go to state 61
    empty                          shift and go to state 62

state 49

    (40) g -> , ID .

    ;               reduce using rule 40 (g -> , ID .)
    )               reduce using rule 40 (g -> , ID .)


state 50

    (62) struct -> structType [ . CTED ] optionalMatrix

    CTED            shift and go to state 64


state 51

    (38) e -> STRUCT ID struct ; . h
    (42) h -> . declare
    (43) h -> . empty
    (18) declare -> . d
    (19) declare -> . e
    (20) declare -> . f
    (109) empty -> .
    (37) d -> . type ID g ; h
    (38) e -> . STRUCT ID struct ; h
    (39) f -> . DICT ID dict ; h
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    FUNC            reduce using rule 109 (empty -> .)
    MAIN            reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)
    STRUCT          shift and go to state 20
    DICT            shift and go to state 16
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    OBJECT          shift and go to state 9
    BOOL            shift and go to state 17

    e                              shift and go to state 10
    d                              shift and go to state 11
    f                              shift and go to state 12
    h                              shift and go to state 65
    type                           shift and go to state 18
    declare                        shift and go to state 61
    empty                          shift and go to state 62

state 52

    (64) structType -> DICT dict .

    [               reduce using rule 64 (structType -> DICT dict .)


state 53

    (33) opParameters -> ( param . )

    )               shift and go to state 66


state 54

    (28) param -> type . ID g k

    ID              shift and go to state 67


state 55

    (35) opReturns -> RETURNS . type { opVars body return }
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    OBJECT          shift and go to state 9
    BOOL            shift and go to state 17

    type                           shift and go to state 68

state 56

    (36) opReturns -> { . opVars body }
    (2) opVars -> . vars
    (3) opVars -> . empty
    (6) vars -> . VARS declare
    (109) empty -> .

    VARS            shift and go to state 5
    IF              reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)

    opVars                         shift and go to state 69
    empty                          shift and go to state 8
    vars                           shift and go to state 6

state 57

    (31) function -> FUNC ID opParameters opReturns .

    FUNC            reduce using rule 31 (function -> FUNC ID opParameters opReturns .)
    MAIN            reduce using rule 31 (function -> FUNC ID opParameters opReturns .)


state 58

    (12) main -> MAIN { opVars . body }
    (44) body -> . cyInstruction
    (45) body -> . empty
    (46) cyInstruction -> . instr body
    (109) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (67) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . forCycle
    (48) cycle -> . whileCycle
    (51) assign -> . ID assignOptions
    (57) funcCall -> . ID ( opParamCall )
    (50) forCycle -> . FOR ( assign ; expresion ; assign ) { body }
    (49) whileCycle -> . WHILE ( expresion ) { body }

    }               reduce using rule 109 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 79
    FOR             shift and go to state 78
    WHILE           shift and go to state 72

    body                           shift and go to state 77
    c                              shift and go to state 82
    funcCall                       shift and go to state 83
    instr                          shift and go to state 70
    forCycle                       shift and go to state 73
    assign                         shift and go to state 84
    whileCycle                     shift and go to state 71
    condition                      shift and go to state 80
    cyInstruction                  shift and go to state 74
    empty                          shift and go to state 76
    cycle                          shift and go to state 75

state 59

    (70) dict -> ( type : . type )
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    OBJECT          shift and go to state 9
    BOOL            shift and go to state 17

    type                           shift and go to state 85

state 60

    (39) f -> DICT ID dict ; h .

    FUNC            reduce using rule 39 (f -> DICT ID dict ; h .)
    MAIN            reduce using rule 39 (f -> DICT ID dict ; h .)
    IF              reduce using rule 39 (f -> DICT ID dict ; h .)
    ID              reduce using rule 39 (f -> DICT ID dict ; h .)
    FOR             reduce using rule 39 (f -> DICT ID dict ; h .)
    WHILE           reduce using rule 39 (f -> DICT ID dict ; h .)
    }               reduce using rule 39 (f -> DICT ID dict ; h .)
    RETURN          reduce using rule 39 (f -> DICT ID dict ; h .)


state 61

    (42) h -> declare .

    FUNC            reduce using rule 42 (h -> declare .)
    MAIN            reduce using rule 42 (h -> declare .)
    IF              reduce using rule 42 (h -> declare .)
    ID              reduce using rule 42 (h -> declare .)
    FOR             reduce using rule 42 (h -> declare .)
    WHILE           reduce using rule 42 (h -> declare .)
    }               reduce using rule 42 (h -> declare .)
    RETURN          reduce using rule 42 (h -> declare .)


state 62

    (43) h -> empty .

    FUNC            reduce using rule 43 (h -> empty .)
    MAIN            reduce using rule 43 (h -> empty .)
    IF              reduce using rule 43 (h -> empty .)
    ID              reduce using rule 43 (h -> empty .)
    FOR             reduce using rule 43 (h -> empty .)
    WHILE           reduce using rule 43 (h -> empty .)
    }               reduce using rule 43 (h -> empty .)
    RETURN          reduce using rule 43 (h -> empty .)


state 63

    (37) d -> type ID g ; h .

    FUNC            reduce using rule 37 (d -> type ID g ; h .)
    MAIN            reduce using rule 37 (d -> type ID g ; h .)
    IF              reduce using rule 37 (d -> type ID g ; h .)
    ID              reduce using rule 37 (d -> type ID g ; h .)
    FOR             reduce using rule 37 (d -> type ID g ; h .)
    WHILE           reduce using rule 37 (d -> type ID g ; h .)
    }               reduce using rule 37 (d -> type ID g ; h .)
    RETURN          reduce using rule 37 (d -> type ID g ; h .)


state 64

    (62) struct -> structType [ CTED . ] optionalMatrix

    ]               shift and go to state 86


state 65

    (38) e -> STRUCT ID struct ; h .

    FUNC            reduce using rule 38 (e -> STRUCT ID struct ; h .)
    MAIN            reduce using rule 38 (e -> STRUCT ID struct ; h .)
    IF              reduce using rule 38 (e -> STRUCT ID struct ; h .)
    ID              reduce using rule 38 (e -> STRUCT ID struct ; h .)
    FOR             reduce using rule 38 (e -> STRUCT ID struct ; h .)
    WHILE           reduce using rule 38 (e -> STRUCT ID struct ; h .)
    }               reduce using rule 38 (e -> STRUCT ID struct ; h .)
    RETURN          reduce using rule 38 (e -> STRUCT ID struct ; h .)


state 66

    (33) opParameters -> ( param ) .

    RETURNS         reduce using rule 33 (opParameters -> ( param ) .)
    {               reduce using rule 33 (opParameters -> ( param ) .)


state 67

    (28) param -> type ID . g k
    (40) g -> . , ID
    (41) g -> . empty
    (109) empty -> .

    ,               shift and go to state 35
    ;               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)

    empty                          shift and go to state 36
    g                              shift and go to state 87

state 68

    (35) opReturns -> RETURNS type . { opVars body return }

    {               shift and go to state 88


state 69

    (36) opReturns -> { opVars . body }
    (44) body -> . cyInstruction
    (45) body -> . empty
    (46) cyInstruction -> . instr body
    (109) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (67) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . forCycle
    (48) cycle -> . whileCycle
    (51) assign -> . ID assignOptions
    (57) funcCall -> . ID ( opParamCall )
    (50) forCycle -> . FOR ( assign ; expresion ; assign ) { body }
    (49) whileCycle -> . WHILE ( expresion ) { body }

    }               reduce using rule 109 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 79
    FOR             shift and go to state 78
    WHILE           shift and go to state 72

    body                           shift and go to state 89
    c                              shift and go to state 82
    funcCall                       shift and go to state 83
    instr                          shift and go to state 70
    forCycle                       shift and go to state 73
    assign                         shift and go to state 84
    whileCycle                     shift and go to state 71
    condition                      shift and go to state 80
    cyInstruction                  shift and go to state 74
    empty                          shift and go to state 76
    cycle                          shift and go to state 75

state 70

    (46) cyInstruction -> instr . body
    (44) body -> . cyInstruction
    (45) body -> . empty
    (46) cyInstruction -> . instr body
    (109) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (67) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . forCycle
    (48) cycle -> . whileCycle
    (51) assign -> . ID assignOptions
    (57) funcCall -> . ID ( opParamCall )
    (50) forCycle -> . FOR ( assign ; expresion ; assign ) { body }
    (49) whileCycle -> . WHILE ( expresion ) { body }

    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 79
    FOR             shift and go to state 78
    WHILE           shift and go to state 72

    body                           shift and go to state 90
    c                              shift and go to state 82
    funcCall                       shift and go to state 83
    instr                          shift and go to state 70
    forCycle                       shift and go to state 73
    assign                         shift and go to state 84
    whileCycle                     shift and go to state 71
    empty                          shift and go to state 76
    cyInstruction                  shift and go to state 74
    condition                      shift and go to state 80
    cycle                          shift and go to state 75

state 71

    (48) cycle -> whileCycle .

    IF              reduce using rule 48 (cycle -> whileCycle .)
    ID              reduce using rule 48 (cycle -> whileCycle .)
    FOR             reduce using rule 48 (cycle -> whileCycle .)
    WHILE           reduce using rule 48 (cycle -> whileCycle .)
    }               reduce using rule 48 (cycle -> whileCycle .)
    RETURN          reduce using rule 48 (cycle -> whileCycle .)


state 72

    (49) whileCycle -> WHILE . ( expresion ) { body }

    (               shift and go to state 91


state 73

    (47) cycle -> forCycle .

    IF              reduce using rule 47 (cycle -> forCycle .)
    ID              reduce using rule 47 (cycle -> forCycle .)
    FOR             reduce using rule 47 (cycle -> forCycle .)
    WHILE           reduce using rule 47 (cycle -> forCycle .)
    }               reduce using rule 47 (cycle -> forCycle .)
    RETURN          reduce using rule 47 (cycle -> forCycle .)


state 74

    (44) body -> cyInstruction .

    }               reduce using rule 44 (body -> cyInstruction .)
    RETURN          reduce using rule 44 (body -> cyInstruction .)


state 75

    (15) instr -> cycle .

    IF              reduce using rule 15 (instr -> cycle .)
    ID              reduce using rule 15 (instr -> cycle .)
    FOR             reduce using rule 15 (instr -> cycle .)
    WHILE           reduce using rule 15 (instr -> cycle .)
    }               reduce using rule 15 (instr -> cycle .)
    RETURN          reduce using rule 15 (instr -> cycle .)


state 76

    (45) body -> empty .

    }               reduce using rule 45 (body -> empty .)
    RETURN          reduce using rule 45 (body -> empty .)


state 77

    (12) main -> MAIN { opVars body . }

    }               shift and go to state 92


state 78

    (50) forCycle -> FOR . ( assign ; expresion ; assign ) { body }

    (               shift and go to state 93


state 79

    (51) assign -> ID . assignOptions
    (57) funcCall -> ID . ( opParamCall )
    (52) assignOptions -> . init
    (53) assignOptions -> . initDict
    (54) assignOptions -> . [ expresion ] assignMatrix init
    (21) init -> . = i
    (24) initDict -> . = ( j : j )

    (               shift and go to state 94
    [               shift and go to state 99
    =               shift and go to state 96

    initDict                       shift and go to state 95
    assignOptions                  shift and go to state 97
    init                           shift and go to state 98

state 80

    (14) instr -> condition .

    IF              reduce using rule 14 (instr -> condition .)
    ID              reduce using rule 14 (instr -> condition .)
    FOR             reduce using rule 14 (instr -> condition .)
    WHILE           reduce using rule 14 (instr -> condition .)
    }               reduce using rule 14 (instr -> condition .)
    RETURN          reduce using rule 14 (instr -> condition .)


state 81

    (67) condition -> IF . ( expresion ) { body } optionalElse

    (               shift and go to state 100


state 82

    (13) instr -> c . ;

    ;               shift and go to state 101


state 83

    (17) c -> funcCall .

    ;               reduce using rule 17 (c -> funcCall .)


state 84

    (16) c -> assign .

    ;               reduce using rule 16 (c -> assign .)


state 85

    (70) dict -> ( type : type . )

    )               shift and go to state 102


state 86

    (62) struct -> structType [ CTED ] . optionalMatrix
    (65) optionalMatrix -> . [ CTED ]
    (66) optionalMatrix -> . empty
    (109) empty -> .

    [               shift and go to state 104
    ;               reduce using rule 109 (empty -> .)

    empty                          shift and go to state 105
    optionalMatrix                 shift and go to state 103

state 87

    (28) param -> type ID g . k
    (29) k -> . ; param
    (30) k -> . empty
    (109) empty -> .

    ;               shift and go to state 107
    )               reduce using rule 109 (empty -> .)

    k                              shift and go to state 106
    empty                          shift and go to state 108

state 88

    (35) opReturns -> RETURNS type { . opVars body return }
    (2) opVars -> . vars
    (3) opVars -> . empty
    (6) vars -> . VARS declare
    (109) empty -> .

    VARS            shift and go to state 5
    IF              reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    vars                           shift and go to state 6
    opVars                         shift and go to state 109
    empty                          shift and go to state 8

state 89

    (36) opReturns -> { opVars body . }

    }               shift and go to state 110


state 90

    (46) cyInstruction -> instr body .

    }               reduce using rule 46 (cyInstruction -> instr body .)
    RETURN          reduce using rule 46 (cyInstruction -> instr body .)


state 91

    (49) whileCycle -> WHILE ( . expresion ) { body }
    (71) expresion -> . sExp cyExpresion
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 116
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 92

    (12) main -> MAIN { opVars body } .

    }               reduce using rule 12 (main -> MAIN { opVars body } .)


state 93

    (50) forCycle -> FOR ( . assign ; expresion ; assign ) { body }
    (51) assign -> . ID assignOptions

    ID              shift and go to state 125

    assign                         shift and go to state 126

state 94

    (57) funcCall -> ID ( . opParamCall )
    (58) opParamCall -> . expresion cyParamCall
    (59) opParamCall -> . empty
    (71) expresion -> . sExp cyExpresion
    (109) empty -> .
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    )               reduce using rule 109 (empty -> .)
    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 129
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    fact                           shift and go to state 124
    exp                            shift and go to state 114
    opParamCall                    shift and go to state 127
    empty                          shift and go to state 128

state 95

    (53) assignOptions -> initDict .

    ;               reduce using rule 53 (assignOptions -> initDict .)
    )               reduce using rule 53 (assignOptions -> initDict .)


state 96

    (21) init -> = . i
    (24) initDict -> = . ( j : j )
    (22) i -> . expresion
    (23) i -> . funcCall
    (71) expresion -> . sExp cyExpresion
    (57) funcCall -> . ID ( opParamCall )
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE

    (               shift and go to state 130
    ID              shift and go to state 131
    CTES            shift and go to state 117
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 132
    term                           shift and go to state 118
    funcCall                       shift and go to state 133
    i                              shift and go to state 134
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 97

    (51) assign -> ID assignOptions .

    ;               reduce using rule 51 (assign -> ID assignOptions .)
    )               reduce using rule 51 (assign -> ID assignOptions .)


state 98

    (52) assignOptions -> init .

    ;               reduce using rule 52 (assignOptions -> init .)
    )               reduce using rule 52 (assignOptions -> init .)


state 99

    (54) assignOptions -> [ . expresion ] assignMatrix init
    (71) expresion -> . sExp cyExpresion
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 135
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 100

    (67) condition -> IF ( . expresion ) { body } optionalElse
    (71) expresion -> . sExp cyExpresion
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 136
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 101

    (13) instr -> c ; .

    IF              reduce using rule 13 (instr -> c ; .)
    ID              reduce using rule 13 (instr -> c ; .)
    FOR             reduce using rule 13 (instr -> c ; .)
    WHILE           reduce using rule 13 (instr -> c ; .)
    }               reduce using rule 13 (instr -> c ; .)
    RETURN          reduce using rule 13 (instr -> c ; .)


state 102

    (70) dict -> ( type : type ) .

    ;               reduce using rule 70 (dict -> ( type : type ) .)
    [               reduce using rule 70 (dict -> ( type : type ) .)


state 103

    (62) struct -> structType [ CTED ] optionalMatrix .

    ;               reduce using rule 62 (struct -> structType [ CTED ] optionalMatrix .)


state 104

    (65) optionalMatrix -> [ . CTED ]

    CTED            shift and go to state 137


state 105

    (66) optionalMatrix -> empty .

    ;               reduce using rule 66 (optionalMatrix -> empty .)


state 106

    (28) param -> type ID g k .

    )               reduce using rule 28 (param -> type ID g k .)


state 107

    (29) k -> ; . param
    (28) param -> . type ID g k
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    OBJECT          shift and go to state 9
    BOOL            shift and go to state 17

    type                           shift and go to state 54
    param                          shift and go to state 138

state 108

    (30) k -> empty .

    )               reduce using rule 30 (k -> empty .)


state 109

    (35) opReturns -> RETURNS type { opVars . body return }
    (44) body -> . cyInstruction
    (45) body -> . empty
    (46) cyInstruction -> . instr body
    (109) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (67) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . forCycle
    (48) cycle -> . whileCycle
    (51) assign -> . ID assignOptions
    (57) funcCall -> . ID ( opParamCall )
    (50) forCycle -> . FOR ( assign ; expresion ; assign ) { body }
    (49) whileCycle -> . WHILE ( expresion ) { body }

    RETURN          reduce using rule 109 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 79
    FOR             shift and go to state 78
    WHILE           shift and go to state 72

    body                           shift and go to state 139
    c                              shift and go to state 82
    funcCall                       shift and go to state 83
    instr                          shift and go to state 70
    forCycle                       shift and go to state 73
    assign                         shift and go to state 84
    whileCycle                     shift and go to state 71
    condition                      shift and go to state 80
    cyInstruction                  shift and go to state 74
    empty                          shift and go to state 76
    cycle                          shift and go to state 75

state 110

    (36) opReturns -> { opVars body } .

    FUNC            reduce using rule 36 (opReturns -> { opVars body } .)
    MAIN            reduce using rule 36 (opReturns -> { opVars body } .)


state 111

    (107) cte -> TRUE .

    *               reduce using rule 107 (cte -> TRUE .)
    /               reduce using rule 107 (cte -> TRUE .)
    +               reduce using rule 107 (cte -> TRUE .)
    -               reduce using rule 107 (cte -> TRUE .)
    EQ              reduce using rule 107 (cte -> TRUE .)
    DIF             reduce using rule 107 (cte -> TRUE .)
    LTOEQ           reduce using rule 107 (cte -> TRUE .)
    GTOEQ           reduce using rule 107 (cte -> TRUE .)
    >               reduce using rule 107 (cte -> TRUE .)
    <               reduce using rule 107 (cte -> TRUE .)
    AND             reduce using rule 107 (cte -> TRUE .)
    OR              reduce using rule 107 (cte -> TRUE .)
    ;               reduce using rule 107 (cte -> TRUE .)
    )               reduce using rule 107 (cte -> TRUE .)
    ,               reduce using rule 107 (cte -> TRUE .)
    ]               reduce using rule 107 (cte -> TRUE .)
    :               reduce using rule 107 (cte -> TRUE .)


state 112

    (94) fact -> ( . expresion )
    (71) expresion -> . sExp cyExpresion
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 140
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 113

    (71) expresion -> sExp . cyExpresion
    (72) cyExpresion -> . AND expresion
    (73) cyExpresion -> . OR expresion
    (74) cyExpresion -> . empty
    (109) empty -> .

    AND             shift and go to state 141
    OR              shift and go to state 143
    )               reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)

    cyExpresion                    shift and go to state 142
    empty                          shift and go to state 144

state 114

    (75) sExp -> exp . opSExp
    (76) opSExp -> . EQ exp
    (77) opSExp -> . DIF exp
    (78) opSExp -> . LTOEQ exp
    (79) opSExp -> . GTOEQ exp
    (80) opSExp -> . > exp
    (81) opSExp -> . < exp
    (82) opSExp -> . empty
    (109) empty -> .

    EQ              shift and go to state 145
    DIF             shift and go to state 146
    LTOEQ           shift and go to state 149
    GTOEQ           shift and go to state 147
    >               shift and go to state 148
    <               shift and go to state 150
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)

    empty                          shift and go to state 151
    opSExp                         shift and go to state 152

state 115

    (95) fact -> ID . opAccess
    (57) funcCall -> ID . ( opParamCall )
    (96) opAccess -> . opStruct
    (97) opAccess -> . opDictionary
    (98) opAccess -> . empty
    (99) opStruct -> . [ expresion ] opMatrix
    (102) opDictionary -> . . dictIndex
    (109) empty -> .

    (               shift and go to state 94
    [               shift and go to state 156
    .               shift and go to state 157
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    +               reduce using rule 109 (empty -> .)
    -               reduce using rule 109 (empty -> .)
    EQ              reduce using rule 109 (empty -> .)
    DIF             reduce using rule 109 (empty -> .)
    LTOEQ           reduce using rule 109 (empty -> .)
    GTOEQ           reduce using rule 109 (empty -> .)
    >               reduce using rule 109 (empty -> .)
    <               reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)

    opDictionary                   shift and go to state 158
    opStruct                       shift and go to state 153
    opAccess                       shift and go to state 154
    empty                          shift and go to state 155

state 116

    (49) whileCycle -> WHILE ( expresion . ) { body }

    )               shift and go to state 159


state 117

    (91) fact -> CTES .

    *               reduce using rule 91 (fact -> CTES .)
    /               reduce using rule 91 (fact -> CTES .)
    +               reduce using rule 91 (fact -> CTES .)
    -               reduce using rule 91 (fact -> CTES .)
    EQ              reduce using rule 91 (fact -> CTES .)
    DIF             reduce using rule 91 (fact -> CTES .)
    LTOEQ           reduce using rule 91 (fact -> CTES .)
    GTOEQ           reduce using rule 91 (fact -> CTES .)
    >               reduce using rule 91 (fact -> CTES .)
    <               reduce using rule 91 (fact -> CTES .)
    AND             reduce using rule 91 (fact -> CTES .)
    OR              reduce using rule 91 (fact -> CTES .)
    ,               reduce using rule 91 (fact -> CTES .)
    )               reduce using rule 91 (fact -> CTES .)
    ;               reduce using rule 91 (fact -> CTES .)
    ]               reduce using rule 91 (fact -> CTES .)


state 118

    (83) exp -> term . cyExp
    (84) cyExp -> . + term
    (85) cyExp -> . - term
    (86) cyExp -> . empty
    (109) empty -> .

    +               shift and go to state 162
    -               shift and go to state 161
    EQ              reduce using rule 109 (empty -> .)
    DIF             reduce using rule 109 (empty -> .)
    LTOEQ           reduce using rule 109 (empty -> .)
    GTOEQ           reduce using rule 109 (empty -> .)
    >               reduce using rule 109 (empty -> .)
    <               reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)

    cyExp                          shift and go to state 160
    empty                          shift and go to state 163

state 119

    (108) cte -> FALSE .

    *               reduce using rule 108 (cte -> FALSE .)
    /               reduce using rule 108 (cte -> FALSE .)
    +               reduce using rule 108 (cte -> FALSE .)
    -               reduce using rule 108 (cte -> FALSE .)
    EQ              reduce using rule 108 (cte -> FALSE .)
    DIF             reduce using rule 108 (cte -> FALSE .)
    LTOEQ           reduce using rule 108 (cte -> FALSE .)
    GTOEQ           reduce using rule 108 (cte -> FALSE .)
    >               reduce using rule 108 (cte -> FALSE .)
    <               reduce using rule 108 (cte -> FALSE .)
    AND             reduce using rule 108 (cte -> FALSE .)
    OR              reduce using rule 108 (cte -> FALSE .)
    ;               reduce using rule 108 (cte -> FALSE .)
    )               reduce using rule 108 (cte -> FALSE .)
    ,               reduce using rule 108 (cte -> FALSE .)
    ]               reduce using rule 108 (cte -> FALSE .)
    :               reduce using rule 108 (cte -> FALSE .)


state 120

    (93) fact -> funcCall .

    *               reduce using rule 93 (fact -> funcCall .)
    /               reduce using rule 93 (fact -> funcCall .)
    +               reduce using rule 93 (fact -> funcCall .)
    -               reduce using rule 93 (fact -> funcCall .)
    EQ              reduce using rule 93 (fact -> funcCall .)
    DIF             reduce using rule 93 (fact -> funcCall .)
    LTOEQ           reduce using rule 93 (fact -> funcCall .)
    GTOEQ           reduce using rule 93 (fact -> funcCall .)
    >               reduce using rule 93 (fact -> funcCall .)
    <               reduce using rule 93 (fact -> funcCall .)
    AND             reduce using rule 93 (fact -> funcCall .)
    OR              reduce using rule 93 (fact -> funcCall .)
    ,               reduce using rule 93 (fact -> funcCall .)
    )               reduce using rule 93 (fact -> funcCall .)
    ;               reduce using rule 93 (fact -> funcCall .)
    ]               reduce using rule 93 (fact -> funcCall .)


state 121

    (92) fact -> cte .

    *               reduce using rule 92 (fact -> cte .)
    /               reduce using rule 92 (fact -> cte .)
    +               reduce using rule 92 (fact -> cte .)
    -               reduce using rule 92 (fact -> cte .)
    EQ              reduce using rule 92 (fact -> cte .)
    DIF             reduce using rule 92 (fact -> cte .)
    LTOEQ           reduce using rule 92 (fact -> cte .)
    GTOEQ           reduce using rule 92 (fact -> cte .)
    >               reduce using rule 92 (fact -> cte .)
    <               reduce using rule 92 (fact -> cte .)
    AND             reduce using rule 92 (fact -> cte .)
    OR              reduce using rule 92 (fact -> cte .)
    ,               reduce using rule 92 (fact -> cte .)
    )               reduce using rule 92 (fact -> cte .)
    ;               reduce using rule 92 (fact -> cte .)
    ]               reduce using rule 92 (fact -> cte .)


state 122

    (106) cte -> CTEF .

    *               reduce using rule 106 (cte -> CTEF .)
    /               reduce using rule 106 (cte -> CTEF .)
    +               reduce using rule 106 (cte -> CTEF .)
    -               reduce using rule 106 (cte -> CTEF .)
    EQ              reduce using rule 106 (cte -> CTEF .)
    DIF             reduce using rule 106 (cte -> CTEF .)
    LTOEQ           reduce using rule 106 (cte -> CTEF .)
    GTOEQ           reduce using rule 106 (cte -> CTEF .)
    >               reduce using rule 106 (cte -> CTEF .)
    <               reduce using rule 106 (cte -> CTEF .)
    AND             reduce using rule 106 (cte -> CTEF .)
    OR              reduce using rule 106 (cte -> CTEF .)
    ;               reduce using rule 106 (cte -> CTEF .)
    )               reduce using rule 106 (cte -> CTEF .)
    ,               reduce using rule 106 (cte -> CTEF .)
    ]               reduce using rule 106 (cte -> CTEF .)
    :               reduce using rule 106 (cte -> CTEF .)


state 123

    (105) cte -> CTED .

    *               reduce using rule 105 (cte -> CTED .)
    /               reduce using rule 105 (cte -> CTED .)
    +               reduce using rule 105 (cte -> CTED .)
    -               reduce using rule 105 (cte -> CTED .)
    EQ              reduce using rule 105 (cte -> CTED .)
    DIF             reduce using rule 105 (cte -> CTED .)
    LTOEQ           reduce using rule 105 (cte -> CTED .)
    GTOEQ           reduce using rule 105 (cte -> CTED .)
    >               reduce using rule 105 (cte -> CTED .)
    <               reduce using rule 105 (cte -> CTED .)
    AND             reduce using rule 105 (cte -> CTED .)
    OR              reduce using rule 105 (cte -> CTED .)
    ;               reduce using rule 105 (cte -> CTED .)
    )               reduce using rule 105 (cte -> CTED .)
    ,               reduce using rule 105 (cte -> CTED .)
    ]               reduce using rule 105 (cte -> CTED .)
    :               reduce using rule 105 (cte -> CTED .)


state 124

    (87) term -> fact . cyTerm
    (88) cyTerm -> . * fact
    (89) cyTerm -> . / fact
    (90) cyTerm -> . empty
    (109) empty -> .

    *               shift and go to state 166
    /               shift and go to state 167
    +               reduce using rule 109 (empty -> .)
    -               reduce using rule 109 (empty -> .)
    EQ              reduce using rule 109 (empty -> .)
    DIF             reduce using rule 109 (empty -> .)
    LTOEQ           reduce using rule 109 (empty -> .)
    GTOEQ           reduce using rule 109 (empty -> .)
    >               reduce using rule 109 (empty -> .)
    <               reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)

    cyTerm                         shift and go to state 164
    empty                          shift and go to state 165

state 125

    (51) assign -> ID . assignOptions
    (52) assignOptions -> . init
    (53) assignOptions -> . initDict
    (54) assignOptions -> . [ expresion ] assignMatrix init
    (21) init -> . = i
    (24) initDict -> . = ( j : j )

    [               shift and go to state 99
    =               shift and go to state 96

    initDict                       shift and go to state 95
    assignOptions                  shift and go to state 97
    init                           shift and go to state 98

state 126

    (50) forCycle -> FOR ( assign . ; expresion ; assign ) { body }

    ;               shift and go to state 168


state 127

    (57) funcCall -> ID ( opParamCall . )

    )               shift and go to state 169


state 128

    (59) opParamCall -> empty .

    )               reduce using rule 59 (opParamCall -> empty .)


state 129

    (58) opParamCall -> expresion . cyParamCall
    (60) cyParamCall -> . , expresion cyParamCall
    (61) cyParamCall -> . empty
    (109) empty -> .

    ,               shift and go to state 171
    )               reduce using rule 109 (empty -> .)

    cyParamCall                    shift and go to state 170
    empty                          shift and go to state 172

state 130

    (24) initDict -> = ( . j : j )
    (94) fact -> ( . expresion )
    (25) j -> . CTES
    (26) j -> . cte
    (27) j -> . ID
    (71) expresion -> . sExp cyExpresion
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 174
    ID              shift and go to state 173
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119
    (               shift and go to state 112

    expresion                      shift and go to state 140
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    j                              shift and go to state 175
    sExp                           shift and go to state 113
    cte                            shift and go to state 176
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 131

    (57) funcCall -> ID . ( opParamCall )
    (95) fact -> ID . opAccess
    (96) opAccess -> . opStruct
    (97) opAccess -> . opDictionary
    (98) opAccess -> . empty
    (99) opStruct -> . [ expresion ] opMatrix
    (102) opDictionary -> . . dictIndex
    (109) empty -> .

    (               shift and go to state 94
    [               shift and go to state 156
    .               shift and go to state 157
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    +               reduce using rule 109 (empty -> .)
    -               reduce using rule 109 (empty -> .)
    EQ              reduce using rule 109 (empty -> .)
    DIF             reduce using rule 109 (empty -> .)
    LTOEQ           reduce using rule 109 (empty -> .)
    GTOEQ           reduce using rule 109 (empty -> .)
    >               reduce using rule 109 (empty -> .)
    <               reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)

    opDictionary                   shift and go to state 158
    opStruct                       shift and go to state 153
    opAccess                       shift and go to state 154
    empty                          shift and go to state 155

state 132

    (22) i -> expresion .

    ;               reduce using rule 22 (i -> expresion .)
    )               reduce using rule 22 (i -> expresion .)


state 133

    (23) i -> funcCall .
    (93) fact -> funcCall .

  ! reduce/reduce conflict for ; resolved using rule 23 (i -> funcCall .)
  ! reduce/reduce conflict for ) resolved using rule 23 (i -> funcCall .)
    ;               reduce using rule 23 (i -> funcCall .)
    )               reduce using rule 23 (i -> funcCall .)
    *               reduce using rule 93 (fact -> funcCall .)
    /               reduce using rule 93 (fact -> funcCall .)
    +               reduce using rule 93 (fact -> funcCall .)
    -               reduce using rule 93 (fact -> funcCall .)
    EQ              reduce using rule 93 (fact -> funcCall .)
    DIF             reduce using rule 93 (fact -> funcCall .)
    LTOEQ           reduce using rule 93 (fact -> funcCall .)
    GTOEQ           reduce using rule 93 (fact -> funcCall .)
    >               reduce using rule 93 (fact -> funcCall .)
    <               reduce using rule 93 (fact -> funcCall .)
    AND             reduce using rule 93 (fact -> funcCall .)
    OR              reduce using rule 93 (fact -> funcCall .)

  ! ;               [ reduce using rule 93 (fact -> funcCall .) ]
  ! )               [ reduce using rule 93 (fact -> funcCall .) ]


state 134

    (21) init -> = i .

    ;               reduce using rule 21 (init -> = i .)
    )               reduce using rule 21 (init -> = i .)


state 135

    (54) assignOptions -> [ expresion . ] assignMatrix init

    ]               shift and go to state 177


state 136

    (67) condition -> IF ( expresion . ) { body } optionalElse

    )               shift and go to state 178


state 137

    (65) optionalMatrix -> [ CTED . ]

    ]               shift and go to state 179


state 138

    (29) k -> ; param .

    )               reduce using rule 29 (k -> ; param .)


state 139

    (35) opReturns -> RETURNS type { opVars body . return }
    (32) return -> . RETURN expresion ;

    RETURN          shift and go to state 181

    return                         shift and go to state 180

state 140

    (94) fact -> ( expresion . )

    )               shift and go to state 182


state 141

    (72) cyExpresion -> AND . expresion
    (71) expresion -> . sExp cyExpresion
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 183
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 142

    (71) expresion -> sExp cyExpresion .

    ]               reduce using rule 71 (expresion -> sExp cyExpresion .)
    ,               reduce using rule 71 (expresion -> sExp cyExpresion .)
    )               reduce using rule 71 (expresion -> sExp cyExpresion .)
    ;               reduce using rule 71 (expresion -> sExp cyExpresion .)


state 143

    (73) cyExpresion -> OR . expresion
    (71) expresion -> . sExp cyExpresion
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 184
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 144

    (74) cyExpresion -> empty .

    )               reduce using rule 74 (cyExpresion -> empty .)
    ,               reduce using rule 74 (cyExpresion -> empty .)
    ;               reduce using rule 74 (cyExpresion -> empty .)
    ]               reduce using rule 74 (cyExpresion -> empty .)


state 145

    (76) opSExp -> EQ . exp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    cte                            shift and go to state 121
    exp                            shift and go to state 185
    fact                           shift and go to state 124

state 146

    (77) opSExp -> DIF . exp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    cte                            shift and go to state 121
    exp                            shift and go to state 186
    fact                           shift and go to state 124

state 147

    (79) opSExp -> GTOEQ . exp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    cte                            shift and go to state 121
    exp                            shift and go to state 187
    fact                           shift and go to state 124

state 148

    (80) opSExp -> > . exp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    cte                            shift and go to state 121
    exp                            shift and go to state 188
    fact                           shift and go to state 124

state 149

    (78) opSExp -> LTOEQ . exp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    cte                            shift and go to state 121
    exp                            shift and go to state 189
    fact                           shift and go to state 124

state 150

    (81) opSExp -> < . exp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    cte                            shift and go to state 121
    exp                            shift and go to state 190
    fact                           shift and go to state 124

state 151

    (82) opSExp -> empty .

    AND             reduce using rule 82 (opSExp -> empty .)
    OR              reduce using rule 82 (opSExp -> empty .)
    )               reduce using rule 82 (opSExp -> empty .)
    ,               reduce using rule 82 (opSExp -> empty .)
    ;               reduce using rule 82 (opSExp -> empty .)
    ]               reduce using rule 82 (opSExp -> empty .)


state 152

    (75) sExp -> exp opSExp .

    AND             reduce using rule 75 (sExp -> exp opSExp .)
    OR              reduce using rule 75 (sExp -> exp opSExp .)
    )               reduce using rule 75 (sExp -> exp opSExp .)
    ]               reduce using rule 75 (sExp -> exp opSExp .)
    ;               reduce using rule 75 (sExp -> exp opSExp .)
    ,               reduce using rule 75 (sExp -> exp opSExp .)


state 153

    (96) opAccess -> opStruct .

    *               reduce using rule 96 (opAccess -> opStruct .)
    /               reduce using rule 96 (opAccess -> opStruct .)
    +               reduce using rule 96 (opAccess -> opStruct .)
    -               reduce using rule 96 (opAccess -> opStruct .)
    EQ              reduce using rule 96 (opAccess -> opStruct .)
    DIF             reduce using rule 96 (opAccess -> opStruct .)
    LTOEQ           reduce using rule 96 (opAccess -> opStruct .)
    GTOEQ           reduce using rule 96 (opAccess -> opStruct .)
    >               reduce using rule 96 (opAccess -> opStruct .)
    <               reduce using rule 96 (opAccess -> opStruct .)
    AND             reduce using rule 96 (opAccess -> opStruct .)
    OR              reduce using rule 96 (opAccess -> opStruct .)
    )               reduce using rule 96 (opAccess -> opStruct .)
    ;               reduce using rule 96 (opAccess -> opStruct .)
    ,               reduce using rule 96 (opAccess -> opStruct .)
    ]               reduce using rule 96 (opAccess -> opStruct .)


state 154

    (95) fact -> ID opAccess .

    *               reduce using rule 95 (fact -> ID opAccess .)
    /               reduce using rule 95 (fact -> ID opAccess .)
    +               reduce using rule 95 (fact -> ID opAccess .)
    -               reduce using rule 95 (fact -> ID opAccess .)
    EQ              reduce using rule 95 (fact -> ID opAccess .)
    DIF             reduce using rule 95 (fact -> ID opAccess .)
    LTOEQ           reduce using rule 95 (fact -> ID opAccess .)
    GTOEQ           reduce using rule 95 (fact -> ID opAccess .)
    >               reduce using rule 95 (fact -> ID opAccess .)
    <               reduce using rule 95 (fact -> ID opAccess .)
    AND             reduce using rule 95 (fact -> ID opAccess .)
    OR              reduce using rule 95 (fact -> ID opAccess .)
    ,               reduce using rule 95 (fact -> ID opAccess .)
    )               reduce using rule 95 (fact -> ID opAccess .)
    ;               reduce using rule 95 (fact -> ID opAccess .)
    ]               reduce using rule 95 (fact -> ID opAccess .)


state 155

    (98) opAccess -> empty .

    *               reduce using rule 98 (opAccess -> empty .)
    /               reduce using rule 98 (opAccess -> empty .)
    +               reduce using rule 98 (opAccess -> empty .)
    -               reduce using rule 98 (opAccess -> empty .)
    EQ              reduce using rule 98 (opAccess -> empty .)
    DIF             reduce using rule 98 (opAccess -> empty .)
    LTOEQ           reduce using rule 98 (opAccess -> empty .)
    GTOEQ           reduce using rule 98 (opAccess -> empty .)
    >               reduce using rule 98 (opAccess -> empty .)
    <               reduce using rule 98 (opAccess -> empty .)
    AND             reduce using rule 98 (opAccess -> empty .)
    OR              reduce using rule 98 (opAccess -> empty .)
    )               reduce using rule 98 (opAccess -> empty .)
    ;               reduce using rule 98 (opAccess -> empty .)
    ,               reduce using rule 98 (opAccess -> empty .)
    ]               reduce using rule 98 (opAccess -> empty .)


state 156

    (99) opStruct -> [ . expresion ] opMatrix
    (71) expresion -> . sExp cyExpresion
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 191
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 157

    (102) opDictionary -> . . dictIndex
    (103) dictIndex -> . FIRST
    (104) dictIndex -> . LAST

    FIRST           shift and go to state 192
    LAST            shift and go to state 193

    dictIndex                      shift and go to state 194

state 158

    (97) opAccess -> opDictionary .

    *               reduce using rule 97 (opAccess -> opDictionary .)
    /               reduce using rule 97 (opAccess -> opDictionary .)
    +               reduce using rule 97 (opAccess -> opDictionary .)
    -               reduce using rule 97 (opAccess -> opDictionary .)
    EQ              reduce using rule 97 (opAccess -> opDictionary .)
    DIF             reduce using rule 97 (opAccess -> opDictionary .)
    LTOEQ           reduce using rule 97 (opAccess -> opDictionary .)
    GTOEQ           reduce using rule 97 (opAccess -> opDictionary .)
    >               reduce using rule 97 (opAccess -> opDictionary .)
    <               reduce using rule 97 (opAccess -> opDictionary .)
    AND             reduce using rule 97 (opAccess -> opDictionary .)
    OR              reduce using rule 97 (opAccess -> opDictionary .)
    )               reduce using rule 97 (opAccess -> opDictionary .)
    ;               reduce using rule 97 (opAccess -> opDictionary .)
    ,               reduce using rule 97 (opAccess -> opDictionary .)
    ]               reduce using rule 97 (opAccess -> opDictionary .)


state 159

    (49) whileCycle -> WHILE ( expresion ) . { body }

    {               shift and go to state 195


state 160

    (83) exp -> term cyExp .

    EQ              reduce using rule 83 (exp -> term cyExp .)
    DIF             reduce using rule 83 (exp -> term cyExp .)
    LTOEQ           reduce using rule 83 (exp -> term cyExp .)
    GTOEQ           reduce using rule 83 (exp -> term cyExp .)
    >               reduce using rule 83 (exp -> term cyExp .)
    <               reduce using rule 83 (exp -> term cyExp .)
    AND             reduce using rule 83 (exp -> term cyExp .)
    OR              reduce using rule 83 (exp -> term cyExp .)
    ;               reduce using rule 83 (exp -> term cyExp .)
    )               reduce using rule 83 (exp -> term cyExp .)
    ,               reduce using rule 83 (exp -> term cyExp .)
    ]               reduce using rule 83 (exp -> term cyExp .)


state 161

    (85) cyExp -> - . term
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    term                           shift and go to state 196
    funcCall                       shift and go to state 120
    cte                            shift and go to state 121
    fact                           shift and go to state 124

state 162

    (84) cyExp -> + . term
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    term                           shift and go to state 197
    funcCall                       shift and go to state 120
    cte                            shift and go to state 121
    fact                           shift and go to state 124

state 163

    (86) cyExp -> empty .

    EQ              reduce using rule 86 (cyExp -> empty .)
    DIF             reduce using rule 86 (cyExp -> empty .)
    LTOEQ           reduce using rule 86 (cyExp -> empty .)
    GTOEQ           reduce using rule 86 (cyExp -> empty .)
    >               reduce using rule 86 (cyExp -> empty .)
    <               reduce using rule 86 (cyExp -> empty .)
    AND             reduce using rule 86 (cyExp -> empty .)
    OR              reduce using rule 86 (cyExp -> empty .)
    )               reduce using rule 86 (cyExp -> empty .)
    ,               reduce using rule 86 (cyExp -> empty .)
    ;               reduce using rule 86 (cyExp -> empty .)
    ]               reduce using rule 86 (cyExp -> empty .)


state 164

    (87) term -> fact cyTerm .

    EQ              reduce using rule 87 (term -> fact cyTerm .)
    DIF             reduce using rule 87 (term -> fact cyTerm .)
    LTOEQ           reduce using rule 87 (term -> fact cyTerm .)
    GTOEQ           reduce using rule 87 (term -> fact cyTerm .)
    >               reduce using rule 87 (term -> fact cyTerm .)
    <               reduce using rule 87 (term -> fact cyTerm .)
    AND             reduce using rule 87 (term -> fact cyTerm .)
    OR              reduce using rule 87 (term -> fact cyTerm .)
    )               reduce using rule 87 (term -> fact cyTerm .)
    ,               reduce using rule 87 (term -> fact cyTerm .)
    ;               reduce using rule 87 (term -> fact cyTerm .)
    ]               reduce using rule 87 (term -> fact cyTerm .)
    +               reduce using rule 87 (term -> fact cyTerm .)
    -               reduce using rule 87 (term -> fact cyTerm .)


state 165

    (90) cyTerm -> empty .

    +               reduce using rule 90 (cyTerm -> empty .)
    -               reduce using rule 90 (cyTerm -> empty .)
    EQ              reduce using rule 90 (cyTerm -> empty .)
    DIF             reduce using rule 90 (cyTerm -> empty .)
    LTOEQ           reduce using rule 90 (cyTerm -> empty .)
    GTOEQ           reduce using rule 90 (cyTerm -> empty .)
    >               reduce using rule 90 (cyTerm -> empty .)
    <               reduce using rule 90 (cyTerm -> empty .)
    AND             reduce using rule 90 (cyTerm -> empty .)
    OR              reduce using rule 90 (cyTerm -> empty .)
    )               reduce using rule 90 (cyTerm -> empty .)
    ,               reduce using rule 90 (cyTerm -> empty .)
    ;               reduce using rule 90 (cyTerm -> empty .)
    ]               reduce using rule 90 (cyTerm -> empty .)


state 166

    (88) cyTerm -> * . fact
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    funcCall                       shift and go to state 120
    cte                            shift and go to state 121
    fact                           shift and go to state 198

state 167

    (89) cyTerm -> / . fact
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    funcCall                       shift and go to state 120
    cte                            shift and go to state 121
    fact                           shift and go to state 199

state 168

    (50) forCycle -> FOR ( assign ; . expresion ; assign ) { body }
    (71) expresion -> . sExp cyExpresion
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 200
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 169

    (57) funcCall -> ID ( opParamCall ) .

    ;               reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    *               reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    /               reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    +               reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    -               reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    EQ              reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    DIF             reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    LTOEQ           reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    GTOEQ           reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    >               reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    <               reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    AND             reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    OR              reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    ]               reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    )               reduce using rule 57 (funcCall -> ID ( opParamCall ) .)
    ,               reduce using rule 57 (funcCall -> ID ( opParamCall ) .)


state 170

    (58) opParamCall -> expresion cyParamCall .

    )               reduce using rule 58 (opParamCall -> expresion cyParamCall .)


state 171

    (60) cyParamCall -> , . expresion cyParamCall
    (71) expresion -> . sExp cyExpresion
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 201
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 172

    (61) cyParamCall -> empty .

    )               reduce using rule 61 (cyParamCall -> empty .)


state 173

    (27) j -> ID .
    (95) fact -> ID . opAccess
    (57) funcCall -> ID . ( opParamCall )
    (96) opAccess -> . opStruct
    (97) opAccess -> . opDictionary
    (98) opAccess -> . empty
    (99) opStruct -> . [ expresion ] opMatrix
    (102) opDictionary -> . . dictIndex
    (109) empty -> .

    :               reduce using rule 27 (j -> ID .)
    (               shift and go to state 94
    [               shift and go to state 156
    .               shift and go to state 157
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    +               reduce using rule 109 (empty -> .)
    -               reduce using rule 109 (empty -> .)
    EQ              reduce using rule 109 (empty -> .)
    DIF             reduce using rule 109 (empty -> .)
    LTOEQ           reduce using rule 109 (empty -> .)
    GTOEQ           reduce using rule 109 (empty -> .)
    >               reduce using rule 109 (empty -> .)
    <               reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)

    opDictionary                   shift and go to state 158
    opStruct                       shift and go to state 153
    opAccess                       shift and go to state 154
    empty                          shift and go to state 155

state 174

    (25) j -> CTES .
    (91) fact -> CTES .

    :               reduce using rule 25 (j -> CTES .)
    *               reduce using rule 91 (fact -> CTES .)
    /               reduce using rule 91 (fact -> CTES .)
    +               reduce using rule 91 (fact -> CTES .)
    -               reduce using rule 91 (fact -> CTES .)
    EQ              reduce using rule 91 (fact -> CTES .)
    DIF             reduce using rule 91 (fact -> CTES .)
    LTOEQ           reduce using rule 91 (fact -> CTES .)
    GTOEQ           reduce using rule 91 (fact -> CTES .)
    >               reduce using rule 91 (fact -> CTES .)
    <               reduce using rule 91 (fact -> CTES .)
    AND             reduce using rule 91 (fact -> CTES .)
    OR              reduce using rule 91 (fact -> CTES .)
    )               reduce using rule 91 (fact -> CTES .)


state 175

    (24) initDict -> = ( j . : j )

    :               shift and go to state 202


state 176

    (26) j -> cte .
    (92) fact -> cte .

    :               reduce using rule 26 (j -> cte .)
    *               reduce using rule 92 (fact -> cte .)
    /               reduce using rule 92 (fact -> cte .)
    +               reduce using rule 92 (fact -> cte .)
    -               reduce using rule 92 (fact -> cte .)
    EQ              reduce using rule 92 (fact -> cte .)
    DIF             reduce using rule 92 (fact -> cte .)
    LTOEQ           reduce using rule 92 (fact -> cte .)
    GTOEQ           reduce using rule 92 (fact -> cte .)
    >               reduce using rule 92 (fact -> cte .)
    <               reduce using rule 92 (fact -> cte .)
    AND             reduce using rule 92 (fact -> cte .)
    OR              reduce using rule 92 (fact -> cte .)
    )               reduce using rule 92 (fact -> cte .)


state 177

    (54) assignOptions -> [ expresion ] . assignMatrix init
    (55) assignMatrix -> . [ expresion ]
    (56) assignMatrix -> . empty
    (109) empty -> .

    [               shift and go to state 204
    =               reduce using rule 109 (empty -> .)

    assignMatrix                   shift and go to state 203
    empty                          shift and go to state 205

state 178

    (67) condition -> IF ( expresion ) . { body } optionalElse

    {               shift and go to state 206


state 179

    (65) optionalMatrix -> [ CTED ] .

    ;               reduce using rule 65 (optionalMatrix -> [ CTED ] .)


state 180

    (35) opReturns -> RETURNS type { opVars body return . }

    }               shift and go to state 207


state 181

    (32) return -> RETURN . expresion ;
    (71) expresion -> . sExp cyExpresion
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 208
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 182

    (94) fact -> ( expresion ) .

    *               reduce using rule 94 (fact -> ( expresion ) .)
    /               reduce using rule 94 (fact -> ( expresion ) .)
    +               reduce using rule 94 (fact -> ( expresion ) .)
    -               reduce using rule 94 (fact -> ( expresion ) .)
    EQ              reduce using rule 94 (fact -> ( expresion ) .)
    DIF             reduce using rule 94 (fact -> ( expresion ) .)
    LTOEQ           reduce using rule 94 (fact -> ( expresion ) .)
    GTOEQ           reduce using rule 94 (fact -> ( expresion ) .)
    >               reduce using rule 94 (fact -> ( expresion ) .)
    <               reduce using rule 94 (fact -> ( expresion ) .)
    AND             reduce using rule 94 (fact -> ( expresion ) .)
    OR              reduce using rule 94 (fact -> ( expresion ) .)
    ,               reduce using rule 94 (fact -> ( expresion ) .)
    )               reduce using rule 94 (fact -> ( expresion ) .)
    ;               reduce using rule 94 (fact -> ( expresion ) .)
    ]               reduce using rule 94 (fact -> ( expresion ) .)


state 183

    (72) cyExpresion -> AND expresion .

    )               reduce using rule 72 (cyExpresion -> AND expresion .)
    ,               reduce using rule 72 (cyExpresion -> AND expresion .)
    ;               reduce using rule 72 (cyExpresion -> AND expresion .)
    ]               reduce using rule 72 (cyExpresion -> AND expresion .)


state 184

    (73) cyExpresion -> OR expresion .

    )               reduce using rule 73 (cyExpresion -> OR expresion .)
    ,               reduce using rule 73 (cyExpresion -> OR expresion .)
    ;               reduce using rule 73 (cyExpresion -> OR expresion .)
    ]               reduce using rule 73 (cyExpresion -> OR expresion .)


state 185

    (76) opSExp -> EQ exp .

    AND             reduce using rule 76 (opSExp -> EQ exp .)
    OR              reduce using rule 76 (opSExp -> EQ exp .)
    )               reduce using rule 76 (opSExp -> EQ exp .)
    ,               reduce using rule 76 (opSExp -> EQ exp .)
    ;               reduce using rule 76 (opSExp -> EQ exp .)
    ]               reduce using rule 76 (opSExp -> EQ exp .)


state 186

    (77) opSExp -> DIF exp .

    AND             reduce using rule 77 (opSExp -> DIF exp .)
    OR              reduce using rule 77 (opSExp -> DIF exp .)
    )               reduce using rule 77 (opSExp -> DIF exp .)
    ,               reduce using rule 77 (opSExp -> DIF exp .)
    ;               reduce using rule 77 (opSExp -> DIF exp .)
    ]               reduce using rule 77 (opSExp -> DIF exp .)


state 187

    (79) opSExp -> GTOEQ exp .

    AND             reduce using rule 79 (opSExp -> GTOEQ exp .)
    OR              reduce using rule 79 (opSExp -> GTOEQ exp .)
    )               reduce using rule 79 (opSExp -> GTOEQ exp .)
    ,               reduce using rule 79 (opSExp -> GTOEQ exp .)
    ;               reduce using rule 79 (opSExp -> GTOEQ exp .)
    ]               reduce using rule 79 (opSExp -> GTOEQ exp .)


state 188

    (80) opSExp -> > exp .

    AND             reduce using rule 80 (opSExp -> > exp .)
    OR              reduce using rule 80 (opSExp -> > exp .)
    )               reduce using rule 80 (opSExp -> > exp .)
    ,               reduce using rule 80 (opSExp -> > exp .)
    ;               reduce using rule 80 (opSExp -> > exp .)
    ]               reduce using rule 80 (opSExp -> > exp .)


state 189

    (78) opSExp -> LTOEQ exp .

    AND             reduce using rule 78 (opSExp -> LTOEQ exp .)
    OR              reduce using rule 78 (opSExp -> LTOEQ exp .)
    )               reduce using rule 78 (opSExp -> LTOEQ exp .)
    ,               reduce using rule 78 (opSExp -> LTOEQ exp .)
    ;               reduce using rule 78 (opSExp -> LTOEQ exp .)
    ]               reduce using rule 78 (opSExp -> LTOEQ exp .)


state 190

    (81) opSExp -> < exp .

    AND             reduce using rule 81 (opSExp -> < exp .)
    OR              reduce using rule 81 (opSExp -> < exp .)
    )               reduce using rule 81 (opSExp -> < exp .)
    ,               reduce using rule 81 (opSExp -> < exp .)
    ;               reduce using rule 81 (opSExp -> < exp .)
    ]               reduce using rule 81 (opSExp -> < exp .)


state 191

    (99) opStruct -> [ expresion . ] opMatrix

    ]               shift and go to state 209


state 192

    (103) dictIndex -> FIRST .

    *               reduce using rule 103 (dictIndex -> FIRST .)
    /               reduce using rule 103 (dictIndex -> FIRST .)
    +               reduce using rule 103 (dictIndex -> FIRST .)
    -               reduce using rule 103 (dictIndex -> FIRST .)
    EQ              reduce using rule 103 (dictIndex -> FIRST .)
    DIF             reduce using rule 103 (dictIndex -> FIRST .)
    LTOEQ           reduce using rule 103 (dictIndex -> FIRST .)
    GTOEQ           reduce using rule 103 (dictIndex -> FIRST .)
    >               reduce using rule 103 (dictIndex -> FIRST .)
    <               reduce using rule 103 (dictIndex -> FIRST .)
    AND             reduce using rule 103 (dictIndex -> FIRST .)
    OR              reduce using rule 103 (dictIndex -> FIRST .)
    )               reduce using rule 103 (dictIndex -> FIRST .)
    ,               reduce using rule 103 (dictIndex -> FIRST .)
    ]               reduce using rule 103 (dictIndex -> FIRST .)
    ;               reduce using rule 103 (dictIndex -> FIRST .)


state 193

    (104) dictIndex -> LAST .

    *               reduce using rule 104 (dictIndex -> LAST .)
    /               reduce using rule 104 (dictIndex -> LAST .)
    +               reduce using rule 104 (dictIndex -> LAST .)
    -               reduce using rule 104 (dictIndex -> LAST .)
    EQ              reduce using rule 104 (dictIndex -> LAST .)
    DIF             reduce using rule 104 (dictIndex -> LAST .)
    LTOEQ           reduce using rule 104 (dictIndex -> LAST .)
    GTOEQ           reduce using rule 104 (dictIndex -> LAST .)
    >               reduce using rule 104 (dictIndex -> LAST .)
    <               reduce using rule 104 (dictIndex -> LAST .)
    AND             reduce using rule 104 (dictIndex -> LAST .)
    OR              reduce using rule 104 (dictIndex -> LAST .)
    )               reduce using rule 104 (dictIndex -> LAST .)
    ,               reduce using rule 104 (dictIndex -> LAST .)
    ]               reduce using rule 104 (dictIndex -> LAST .)
    ;               reduce using rule 104 (dictIndex -> LAST .)


state 194

    (102) opDictionary -> . dictIndex .

    *               reduce using rule 102 (opDictionary -> . dictIndex .)
    /               reduce using rule 102 (opDictionary -> . dictIndex .)
    +               reduce using rule 102 (opDictionary -> . dictIndex .)
    -               reduce using rule 102 (opDictionary -> . dictIndex .)
    EQ              reduce using rule 102 (opDictionary -> . dictIndex .)
    DIF             reduce using rule 102 (opDictionary -> . dictIndex .)
    LTOEQ           reduce using rule 102 (opDictionary -> . dictIndex .)
    GTOEQ           reduce using rule 102 (opDictionary -> . dictIndex .)
    >               reduce using rule 102 (opDictionary -> . dictIndex .)
    <               reduce using rule 102 (opDictionary -> . dictIndex .)
    AND             reduce using rule 102 (opDictionary -> . dictIndex .)
    OR              reduce using rule 102 (opDictionary -> . dictIndex .)
    )               reduce using rule 102 (opDictionary -> . dictIndex .)
    ,               reduce using rule 102 (opDictionary -> . dictIndex .)
    ]               reduce using rule 102 (opDictionary -> . dictIndex .)
    ;               reduce using rule 102 (opDictionary -> . dictIndex .)


state 195

    (49) whileCycle -> WHILE ( expresion ) { . body }
    (44) body -> . cyInstruction
    (45) body -> . empty
    (46) cyInstruction -> . instr body
    (109) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (67) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . forCycle
    (48) cycle -> . whileCycle
    (51) assign -> . ID assignOptions
    (57) funcCall -> . ID ( opParamCall )
    (50) forCycle -> . FOR ( assign ; expresion ; assign ) { body }
    (49) whileCycle -> . WHILE ( expresion ) { body }

    }               reduce using rule 109 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 79
    FOR             shift and go to state 78
    WHILE           shift and go to state 72

    body                           shift and go to state 210
    c                              shift and go to state 82
    funcCall                       shift and go to state 83
    instr                          shift and go to state 70
    forCycle                       shift and go to state 73
    assign                         shift and go to state 84
    whileCycle                     shift and go to state 71
    condition                      shift and go to state 80
    cyInstruction                  shift and go to state 74
    empty                          shift and go to state 76
    cycle                          shift and go to state 75

state 196

    (85) cyExp -> - term .

    EQ              reduce using rule 85 (cyExp -> - term .)
    DIF             reduce using rule 85 (cyExp -> - term .)
    LTOEQ           reduce using rule 85 (cyExp -> - term .)
    GTOEQ           reduce using rule 85 (cyExp -> - term .)
    >               reduce using rule 85 (cyExp -> - term .)
    <               reduce using rule 85 (cyExp -> - term .)
    AND             reduce using rule 85 (cyExp -> - term .)
    OR              reduce using rule 85 (cyExp -> - term .)
    )               reduce using rule 85 (cyExp -> - term .)
    ,               reduce using rule 85 (cyExp -> - term .)
    ;               reduce using rule 85 (cyExp -> - term .)
    ]               reduce using rule 85 (cyExp -> - term .)


state 197

    (84) cyExp -> + term .

    EQ              reduce using rule 84 (cyExp -> + term .)
    DIF             reduce using rule 84 (cyExp -> + term .)
    LTOEQ           reduce using rule 84 (cyExp -> + term .)
    GTOEQ           reduce using rule 84 (cyExp -> + term .)
    >               reduce using rule 84 (cyExp -> + term .)
    <               reduce using rule 84 (cyExp -> + term .)
    AND             reduce using rule 84 (cyExp -> + term .)
    OR              reduce using rule 84 (cyExp -> + term .)
    )               reduce using rule 84 (cyExp -> + term .)
    ,               reduce using rule 84 (cyExp -> + term .)
    ;               reduce using rule 84 (cyExp -> + term .)
    ]               reduce using rule 84 (cyExp -> + term .)


state 198

    (88) cyTerm -> * fact .

    +               reduce using rule 88 (cyTerm -> * fact .)
    -               reduce using rule 88 (cyTerm -> * fact .)
    EQ              reduce using rule 88 (cyTerm -> * fact .)
    DIF             reduce using rule 88 (cyTerm -> * fact .)
    LTOEQ           reduce using rule 88 (cyTerm -> * fact .)
    GTOEQ           reduce using rule 88 (cyTerm -> * fact .)
    >               reduce using rule 88 (cyTerm -> * fact .)
    <               reduce using rule 88 (cyTerm -> * fact .)
    AND             reduce using rule 88 (cyTerm -> * fact .)
    OR              reduce using rule 88 (cyTerm -> * fact .)
    )               reduce using rule 88 (cyTerm -> * fact .)
    ,               reduce using rule 88 (cyTerm -> * fact .)
    ;               reduce using rule 88 (cyTerm -> * fact .)
    ]               reduce using rule 88 (cyTerm -> * fact .)


state 199

    (89) cyTerm -> / fact .

    +               reduce using rule 89 (cyTerm -> / fact .)
    -               reduce using rule 89 (cyTerm -> / fact .)
    EQ              reduce using rule 89 (cyTerm -> / fact .)
    DIF             reduce using rule 89 (cyTerm -> / fact .)
    LTOEQ           reduce using rule 89 (cyTerm -> / fact .)
    GTOEQ           reduce using rule 89 (cyTerm -> / fact .)
    >               reduce using rule 89 (cyTerm -> / fact .)
    <               reduce using rule 89 (cyTerm -> / fact .)
    AND             reduce using rule 89 (cyTerm -> / fact .)
    OR              reduce using rule 89 (cyTerm -> / fact .)
    )               reduce using rule 89 (cyTerm -> / fact .)
    ,               reduce using rule 89 (cyTerm -> / fact .)
    ;               reduce using rule 89 (cyTerm -> / fact .)
    ]               reduce using rule 89 (cyTerm -> / fact .)


state 200

    (50) forCycle -> FOR ( assign ; expresion . ; assign ) { body }

    ;               shift and go to state 211


state 201

    (60) cyParamCall -> , expresion . cyParamCall
    (60) cyParamCall -> . , expresion cyParamCall
    (61) cyParamCall -> . empty
    (109) empty -> .

    ,               shift and go to state 171
    )               reduce using rule 109 (empty -> .)

    cyParamCall                    shift and go to state 212
    empty                          shift and go to state 172

state 202

    (24) initDict -> = ( j : . j )
    (25) j -> . CTES
    (26) j -> . cte
    (27) j -> . ID
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE

    CTES            shift and go to state 213
    ID              shift and go to state 216
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    cte                            shift and go to state 215
    j                              shift and go to state 214

state 203

    (54) assignOptions -> [ expresion ] assignMatrix . init
    (21) init -> . = i

    =               shift and go to state 218

    init                           shift and go to state 217

state 204

    (55) assignMatrix -> [ . expresion ]
    (71) expresion -> . sExp cyExpresion
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 219
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 205

    (56) assignMatrix -> empty .

    =               reduce using rule 56 (assignMatrix -> empty .)


state 206

    (67) condition -> IF ( expresion ) { . body } optionalElse
    (44) body -> . cyInstruction
    (45) body -> . empty
    (46) cyInstruction -> . instr body
    (109) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (67) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . forCycle
    (48) cycle -> . whileCycle
    (51) assign -> . ID assignOptions
    (57) funcCall -> . ID ( opParamCall )
    (50) forCycle -> . FOR ( assign ; expresion ; assign ) { body }
    (49) whileCycle -> . WHILE ( expresion ) { body }

    }               reduce using rule 109 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 79
    FOR             shift and go to state 78
    WHILE           shift and go to state 72

    body                           shift and go to state 220
    c                              shift and go to state 82
    funcCall                       shift and go to state 83
    instr                          shift and go to state 70
    forCycle                       shift and go to state 73
    assign                         shift and go to state 84
    whileCycle                     shift and go to state 71
    condition                      shift and go to state 80
    cyInstruction                  shift and go to state 74
    empty                          shift and go to state 76
    cycle                          shift and go to state 75

state 207

    (35) opReturns -> RETURNS type { opVars body return } .

    FUNC            reduce using rule 35 (opReturns -> RETURNS type { opVars body return } .)
    MAIN            reduce using rule 35 (opReturns -> RETURNS type { opVars body return } .)


state 208

    (32) return -> RETURN expresion . ;

    ;               shift and go to state 221


state 209

    (99) opStruct -> [ expresion ] . opMatrix
    (100) opMatrix -> . [ expresion ]
    (101) opMatrix -> . empty
    (109) empty -> .

    [               shift and go to state 222
    *               reduce using rule 109 (empty -> .)
    /               reduce using rule 109 (empty -> .)
    +               reduce using rule 109 (empty -> .)
    -               reduce using rule 109 (empty -> .)
    EQ              reduce using rule 109 (empty -> .)
    DIF             reduce using rule 109 (empty -> .)
    LTOEQ           reduce using rule 109 (empty -> .)
    GTOEQ           reduce using rule 109 (empty -> .)
    >               reduce using rule 109 (empty -> .)
    <               reduce using rule 109 (empty -> .)
    AND             reduce using rule 109 (empty -> .)
    OR              reduce using rule 109 (empty -> .)
    )               reduce using rule 109 (empty -> .)
    ,               reduce using rule 109 (empty -> .)
    ]               reduce using rule 109 (empty -> .)
    ;               reduce using rule 109 (empty -> .)

    empty                          shift and go to state 223
    opMatrix                       shift and go to state 224

state 210

    (49) whileCycle -> WHILE ( expresion ) { body . }

    }               shift and go to state 225


state 211

    (50) forCycle -> FOR ( assign ; expresion ; . assign ) { body }
    (51) assign -> . ID assignOptions

    ID              shift and go to state 125

    assign                         shift and go to state 226

state 212

    (60) cyParamCall -> , expresion cyParamCall .

    )               reduce using rule 60 (cyParamCall -> , expresion cyParamCall .)


state 213

    (25) j -> CTES .

    )               reduce using rule 25 (j -> CTES .)


state 214

    (24) initDict -> = ( j : j . )

    )               shift and go to state 227


state 215

    (26) j -> cte .

    )               reduce using rule 26 (j -> cte .)


state 216

    (27) j -> ID .

    )               reduce using rule 27 (j -> ID .)


state 217

    (54) assignOptions -> [ expresion ] assignMatrix init .

    ;               reduce using rule 54 (assignOptions -> [ expresion ] assignMatrix init .)
    )               reduce using rule 54 (assignOptions -> [ expresion ] assignMatrix init .)


state 218

    (21) init -> = . i
    (22) i -> . expresion
    (23) i -> . funcCall
    (71) expresion -> . sExp cyExpresion
    (57) funcCall -> . ID ( opParamCall )
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE

    ID              shift and go to state 131
    CTES            shift and go to state 117
    (               shift and go to state 112
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 132
    term                           shift and go to state 118
    funcCall                       shift and go to state 133
    i                              shift and go to state 134
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 219

    (55) assignMatrix -> [ expresion . ]

    ]               shift and go to state 228


state 220

    (67) condition -> IF ( expresion ) { body . } optionalElse

    }               shift and go to state 229


state 221

    (32) return -> RETURN expresion ; .

    }               reduce using rule 32 (return -> RETURN expresion ; .)


state 222

    (100) opMatrix -> [ . expresion ]
    (71) expresion -> . sExp cyExpresion
    (75) sExp -> . exp opSExp
    (83) exp -> . term cyExp
    (87) term -> . fact cyTerm
    (91) fact -> . CTES
    (92) fact -> . cte
    (93) fact -> . funcCall
    (94) fact -> . ( expresion )
    (95) fact -> . ID opAccess
    (105) cte -> . CTED
    (106) cte -> . CTEF
    (107) cte -> . TRUE
    (108) cte -> . FALSE
    (57) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 117
    (               shift and go to state 112
    ID              shift and go to state 115
    CTED            shift and go to state 123
    CTEF            shift and go to state 122
    TRUE            shift and go to state 111
    FALSE           shift and go to state 119

    expresion                      shift and go to state 230
    term                           shift and go to state 118
    funcCall                       shift and go to state 120
    sExp                           shift and go to state 113
    cte                            shift and go to state 121
    exp                            shift and go to state 114
    fact                           shift and go to state 124

state 223

    (101) opMatrix -> empty .

    *               reduce using rule 101 (opMatrix -> empty .)
    /               reduce using rule 101 (opMatrix -> empty .)
    +               reduce using rule 101 (opMatrix -> empty .)
    -               reduce using rule 101 (opMatrix -> empty .)
    EQ              reduce using rule 101 (opMatrix -> empty .)
    DIF             reduce using rule 101 (opMatrix -> empty .)
    LTOEQ           reduce using rule 101 (opMatrix -> empty .)
    GTOEQ           reduce using rule 101 (opMatrix -> empty .)
    >               reduce using rule 101 (opMatrix -> empty .)
    <               reduce using rule 101 (opMatrix -> empty .)
    AND             reduce using rule 101 (opMatrix -> empty .)
    OR              reduce using rule 101 (opMatrix -> empty .)
    )               reduce using rule 101 (opMatrix -> empty .)
    ,               reduce using rule 101 (opMatrix -> empty .)
    ]               reduce using rule 101 (opMatrix -> empty .)
    ;               reduce using rule 101 (opMatrix -> empty .)


state 224

    (99) opStruct -> [ expresion ] opMatrix .

    *               reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    /               reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    +               reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    -               reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    EQ              reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    DIF             reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    LTOEQ           reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    GTOEQ           reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    >               reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    <               reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    AND             reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    OR              reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    ;               reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    )               reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    ,               reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)
    ]               reduce using rule 99 (opStruct -> [ expresion ] opMatrix .)


state 225

    (49) whileCycle -> WHILE ( expresion ) { body } .

    IF              reduce using rule 49 (whileCycle -> WHILE ( expresion ) { body } .)
    ID              reduce using rule 49 (whileCycle -> WHILE ( expresion ) { body } .)
    FOR             reduce using rule 49 (whileCycle -> WHILE ( expresion ) { body } .)
    WHILE           reduce using rule 49 (whileCycle -> WHILE ( expresion ) { body } .)
    }               reduce using rule 49 (whileCycle -> WHILE ( expresion ) { body } .)
    RETURN          reduce using rule 49 (whileCycle -> WHILE ( expresion ) { body } .)


state 226

    (50) forCycle -> FOR ( assign ; expresion ; assign . ) { body }

    )               shift and go to state 231


state 227

    (24) initDict -> = ( j : j ) .

    ;               reduce using rule 24 (initDict -> = ( j : j ) .)
    )               reduce using rule 24 (initDict -> = ( j : j ) .)


state 228

    (55) assignMatrix -> [ expresion ] .

    =               reduce using rule 55 (assignMatrix -> [ expresion ] .)


state 229

    (67) condition -> IF ( expresion ) { body } . optionalElse
    (68) optionalElse -> . ELSE { body }
    (69) optionalElse -> . empty
    (109) empty -> .

    ELSE            shift and go to state 232
    IF              reduce using rule 109 (empty -> .)
    ID              reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    }               reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)

    optionalElse                   shift and go to state 233
    empty                          shift and go to state 234

state 230

    (100) opMatrix -> [ expresion . ]

    ]               shift and go to state 235


state 231

    (50) forCycle -> FOR ( assign ; expresion ; assign ) . { body }

    {               shift and go to state 236


state 232

    (68) optionalElse -> ELSE . { body }

    {               shift and go to state 237


state 233

    (67) condition -> IF ( expresion ) { body } optionalElse .

    IF              reduce using rule 67 (condition -> IF ( expresion ) { body } optionalElse .)
    ID              reduce using rule 67 (condition -> IF ( expresion ) { body } optionalElse .)
    FOR             reduce using rule 67 (condition -> IF ( expresion ) { body } optionalElse .)
    WHILE           reduce using rule 67 (condition -> IF ( expresion ) { body } optionalElse .)
    }               reduce using rule 67 (condition -> IF ( expresion ) { body } optionalElse .)
    RETURN          reduce using rule 67 (condition -> IF ( expresion ) { body } optionalElse .)


state 234

    (69) optionalElse -> empty .

    IF              reduce using rule 69 (optionalElse -> empty .)
    ID              reduce using rule 69 (optionalElse -> empty .)
    FOR             reduce using rule 69 (optionalElse -> empty .)
    WHILE           reduce using rule 69 (optionalElse -> empty .)
    }               reduce using rule 69 (optionalElse -> empty .)
    RETURN          reduce using rule 69 (optionalElse -> empty .)


state 235

    (100) opMatrix -> [ expresion ] .

    *               reduce using rule 100 (opMatrix -> [ expresion ] .)
    /               reduce using rule 100 (opMatrix -> [ expresion ] .)
    +               reduce using rule 100 (opMatrix -> [ expresion ] .)
    -               reduce using rule 100 (opMatrix -> [ expresion ] .)
    EQ              reduce using rule 100 (opMatrix -> [ expresion ] .)
    DIF             reduce using rule 100 (opMatrix -> [ expresion ] .)
    LTOEQ           reduce using rule 100 (opMatrix -> [ expresion ] .)
    GTOEQ           reduce using rule 100 (opMatrix -> [ expresion ] .)
    >               reduce using rule 100 (opMatrix -> [ expresion ] .)
    <               reduce using rule 100 (opMatrix -> [ expresion ] .)
    AND             reduce using rule 100 (opMatrix -> [ expresion ] .)
    OR              reduce using rule 100 (opMatrix -> [ expresion ] .)
    )               reduce using rule 100 (opMatrix -> [ expresion ] .)
    ,               reduce using rule 100 (opMatrix -> [ expresion ] .)
    ]               reduce using rule 100 (opMatrix -> [ expresion ] .)
    ;               reduce using rule 100 (opMatrix -> [ expresion ] .)


state 236

    (50) forCycle -> FOR ( assign ; expresion ; assign ) { . body }
    (44) body -> . cyInstruction
    (45) body -> . empty
    (46) cyInstruction -> . instr body
    (109) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (67) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . forCycle
    (48) cycle -> . whileCycle
    (51) assign -> . ID assignOptions
    (57) funcCall -> . ID ( opParamCall )
    (50) forCycle -> . FOR ( assign ; expresion ; assign ) { body }
    (49) whileCycle -> . WHILE ( expresion ) { body }

    }               reduce using rule 109 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 79
    FOR             shift and go to state 78
    WHILE           shift and go to state 72

    body                           shift and go to state 238
    c                              shift and go to state 82
    funcCall                       shift and go to state 83
    instr                          shift and go to state 70
    forCycle                       shift and go to state 73
    cyInstruction                  shift and go to state 74
    whileCycle                     shift and go to state 71
    condition                      shift and go to state 80
    assign                         shift and go to state 84
    empty                          shift and go to state 76
    cycle                          shift and go to state 75

state 237

    (68) optionalElse -> ELSE { . body }
    (44) body -> . cyInstruction
    (45) body -> . empty
    (46) cyInstruction -> . instr body
    (109) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (67) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . forCycle
    (48) cycle -> . whileCycle
    (51) assign -> . ID assignOptions
    (57) funcCall -> . ID ( opParamCall )
    (50) forCycle -> . FOR ( assign ; expresion ; assign ) { body }
    (49) whileCycle -> . WHILE ( expresion ) { body }

    }               reduce using rule 109 (empty -> .)
    IF              shift and go to state 81
    ID              shift and go to state 79
    FOR             shift and go to state 78
    WHILE           shift and go to state 72

    body                           shift and go to state 239
    c                              shift and go to state 82
    funcCall                       shift and go to state 83
    instr                          shift and go to state 70
    forCycle                       shift and go to state 73
    assign                         shift and go to state 84
    whileCycle                     shift and go to state 71
    empty                          shift and go to state 76
    cyInstruction                  shift and go to state 74
    condition                      shift and go to state 80
    cycle                          shift and go to state 75

state 238

    (50) forCycle -> FOR ( assign ; expresion ; assign ) { body . }

    }               shift and go to state 240


state 239

    (68) optionalElse -> ELSE { body . }

    }               shift and go to state 241


state 240

    (50) forCycle -> FOR ( assign ; expresion ; assign ) { body } .

    IF              reduce using rule 50 (forCycle -> FOR ( assign ; expresion ; assign ) { body } .)
    ID              reduce using rule 50 (forCycle -> FOR ( assign ; expresion ; assign ) { body } .)
    FOR             reduce using rule 50 (forCycle -> FOR ( assign ; expresion ; assign ) { body } .)
    WHILE           reduce using rule 50 (forCycle -> FOR ( assign ; expresion ; assign ) { body } .)
    }               reduce using rule 50 (forCycle -> FOR ( assign ; expresion ; assign ) { body } .)
    RETURN          reduce using rule 50 (forCycle -> FOR ( assign ; expresion ; assign ) { body } .)


state 241

    (68) optionalElse -> ELSE { body } .

    IF              reduce using rule 68 (optionalElse -> ELSE { body } .)
    ID              reduce using rule 68 (optionalElse -> ELSE { body } .)
    FOR             reduce using rule 68 (optionalElse -> ELSE { body } .)
    WHILE           reduce using rule 68 (optionalElse -> ELSE { body } .)
    }               reduce using rule 68 (optionalElse -> ELSE { body } .)
    RETURN          reduce using rule 68 (optionalElse -> ELSE { body } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 133 resolved using rule (i -> funcCall)
WARNING: rejected rule (fact -> funcCall) in state 133
