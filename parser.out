Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN
    DIF
    WHILE
    LTOEQ
    TRUE
    FOR
    EQ
    AND
    FALSE
    CTEF
    GTOEQ
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID { a b main }
Rule 2     a -> vars
Rule 3     a -> empty
Rule 4     b -> function b
Rule 5     b -> empty
Rule 6     vars -> VARS declare
Rule 7     type -> INT
Rule 8     type -> FLOAT
Rule 9     type -> STRING
Rule 10    type -> OBJECT
Rule 11    type -> BOOL
Rule 12    main -> MAIN { a body }
Rule 13    instr -> c ;
Rule 14    instr -> condition
Rule 15    instr -> cycle
Rule 16    c -> assign
Rule 17    c -> funcCall
Rule 18    declare -> d
Rule 19    declare -> e
Rule 20    declare -> f
Rule 21    init -> = i
Rule 22    i -> expresion
Rule 23    i -> funcCall
Rule 24    initDict -> = ( j : j )
Rule 25    j -> CTES
Rule 26    j -> cte
Rule 27    j -> ID
Rule 28    param -> type ID g k
Rule 29    k -> ; param
Rule 30    k -> empty
Rule 31    function -> FUNC ID l m { a body }
Rule 32    l -> ( param n )
Rule 33    n -> param
Rule 34    n -> empty
Rule 35    m -> RETURNS type
Rule 36    m -> empty
Rule 37    d -> type ID g ; h
Rule 38    e -> STRUCT ID struct ; h
Rule 39    f -> DICT ID dict ; h
Rule 40    g -> , ID
Rule 41    g -> empty
Rule 42    h -> declare
Rule 43    h -> empty
Rule 44    body -> cycleInstruction
Rule 45    body -> empty
Rule 46    cycleInstruction -> instr body
Rule 47    cycle -> empty
Rule 48    assign -> ID assignOptions
Rule 49    assignOptions -> init
Rule 50    assignOptions -> initDict
Rule 51    assignOptions -> [ expresion ] assignMatrix init
Rule 52    assignMatrix -> [ expresion ]
Rule 53    assignMatrix -> empty
Rule 54    funcCall -> empty
Rule 55    struct -> type [ CTED ] optionalMatrix
Rule 56    optionalMatrix -> [ CTED ]
Rule 57    optionalMatrix -> empty
Rule 58    condition -> IF ( expresion ) { body } optionalElse
Rule 59    optionalElse -> ELSE { body }
Rule 60    optionalElse -> empty
Rule 61    dict -> ( type : type )
Rule 62    expresion -> empty
Rule 63    cte -> empty
Rule 64    empty -> <empty>

Terminals, with rules where they appear

(                    : 24 32 58 61
)                    : 24 32 58 61
,                    : 40
:                    : 24 61
;                    : 13 29 37 38 39
=                    : 21 24
AND                  : 
BOOL                 : 11
CTED                 : 55 56
CTEF                 : 
CTES                 : 25
DICT                 : 39
DIF                  : 
ELSE                 : 59
EQ                   : 
FALSE                : 
FLOAT                : 8
FOR                  : 
FUNC                 : 31
GTOEQ                : 
ID                   : 1 27 28 31 37 38 39 40 48
IF                   : 58
INT                  : 7
LTOEQ                : 
MAIN                 : 12
OBJECT               : 10
OR                   : 
PROGRAM              : 1
RETURN               : 
RETURNS              : 35
STRING               : 9
STRUCT               : 38
TRUE                 : 
VARS                 : 6
WHILE                : 
[                    : 51 52 55 56
]                    : 51 52 55 56
error                : 
{                    : 1 12 31 58 59
}                    : 1 12 31 58 59

Nonterminals, with rules where they appear

a                    : 1 12 31
assign               : 16
assignMatrix         : 51
assignOptions        : 48
b                    : 1 4
body                 : 12 31 46 58 59
c                    : 13
condition            : 14
cte                  : 26
cycle                : 15
cycleInstruction     : 44
d                    : 18
declare              : 6 42
dict                 : 39
e                    : 19
empty                : 3 5 30 34 36 41 43 45 47 53 54 57 60 62 63
expresion            : 22 51 52 58
f                    : 20
funcCall             : 17 23
function             : 4
g                    : 28 37
h                    : 37 38 39
i                    : 21
init                 : 49 51
initDict             : 50
instr                : 46
j                    : 24 24
k                    : 28
l                    : 31
m                    : 31
main                 : 1
n                    : 32
optionalElse         : 58
optionalMatrix       : 55
param                : 29 32 33
program              : 0
struct               : 38
type                 : 28 35 37 55 61 61
vars                 : 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID { a b main }

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID { a b main }

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . { a b main }

    {               shift and go to state 4


state 4

    (1) program -> PROGRAM ID { . a b main }
    (2) a -> . vars
    (3) a -> . empty
    (6) vars -> . VARS declare
    (64) empty -> .

    VARS            shift and go to state 6
    FUNC            reduce using rule 64 (empty -> .)
    MAIN            reduce using rule 64 (empty -> .)

    a                              shift and go to state 5
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID { a . b main }
    (4) b -> . function b
    (5) b -> . empty
    (31) function -> . FUNC ID l m { a body }
    (64) empty -> .

    FUNC            shift and go to state 11
    MAIN            reduce using rule 64 (empty -> .)

    function                       shift and go to state 9
    b                              shift and go to state 10
    empty                          shift and go to state 12

state 6

    (6) vars -> VARS . declare
    (18) declare -> . d
    (19) declare -> . e
    (20) declare -> . f
    (37) d -> . type ID g ; h
    (38) e -> . STRUCT ID struct ; h
    (39) f -> . DICT ID dict ; h
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    STRUCT          shift and go to state 24
    DICT            shift and go to state 20
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    OBJECT          shift and go to state 13
    BOOL            shift and go to state 21

    e                              shift and go to state 14
    d                              shift and go to state 15
    f                              shift and go to state 16
    type                           shift and go to state 22
    declare                        shift and go to state 23

state 7

    (2) a -> vars .

    FUNC            reduce using rule 2 (a -> vars .)
    MAIN            reduce using rule 2 (a -> vars .)
    IF              reduce using rule 2 (a -> vars .)
    ID              reduce using rule 2 (a -> vars .)
    }               reduce using rule 2 (a -> vars .)
    ;               reduce using rule 2 (a -> vars .)


state 8

    (3) a -> empty .

    FUNC            reduce using rule 3 (a -> empty .)
    MAIN            reduce using rule 3 (a -> empty .)
    IF              reduce using rule 3 (a -> empty .)
    ID              reduce using rule 3 (a -> empty .)
    }               reduce using rule 3 (a -> empty .)
    ;               reduce using rule 3 (a -> empty .)


state 9

    (4) b -> function . b
    (4) b -> . function b
    (5) b -> . empty
    (31) function -> . FUNC ID l m { a body }
    (64) empty -> .

    FUNC            shift and go to state 11
    MAIN            reduce using rule 64 (empty -> .)

    function                       shift and go to state 9
    b                              shift and go to state 25
    empty                          shift and go to state 12

state 10

    (1) program -> PROGRAM ID { a b . main }
    (12) main -> . MAIN { a body }

    MAIN            shift and go to state 26

    main                           shift and go to state 27

state 11

    (31) function -> FUNC . ID l m { a body }

    ID              shift and go to state 28


state 12

    (5) b -> empty .

    MAIN            reduce using rule 5 (b -> empty .)


state 13

    (10) type -> OBJECT .

    ID              reduce using rule 10 (type -> OBJECT .)
    :               reduce using rule 10 (type -> OBJECT .)
    {               reduce using rule 10 (type -> OBJECT .)
    [               reduce using rule 10 (type -> OBJECT .)
    )               reduce using rule 10 (type -> OBJECT .)


state 14

    (19) declare -> e .

    FUNC            reduce using rule 19 (declare -> e .)
    MAIN            reduce using rule 19 (declare -> e .)
    IF              reduce using rule 19 (declare -> e .)
    ID              reduce using rule 19 (declare -> e .)
    }               reduce using rule 19 (declare -> e .)
    ;               reduce using rule 19 (declare -> e .)


state 15

    (18) declare -> d .

    FUNC            reduce using rule 18 (declare -> d .)
    MAIN            reduce using rule 18 (declare -> d .)
    IF              reduce using rule 18 (declare -> d .)
    ID              reduce using rule 18 (declare -> d .)
    }               reduce using rule 18 (declare -> d .)
    ;               reduce using rule 18 (declare -> d .)


state 16

    (20) declare -> f .

    FUNC            reduce using rule 20 (declare -> f .)
    MAIN            reduce using rule 20 (declare -> f .)
    IF              reduce using rule 20 (declare -> f .)
    ID              reduce using rule 20 (declare -> f .)
    }               reduce using rule 20 (declare -> f .)
    ;               reduce using rule 20 (declare -> f .)


state 17

    (7) type -> INT .

    ID              reduce using rule 7 (type -> INT .)
    :               reduce using rule 7 (type -> INT .)
    {               reduce using rule 7 (type -> INT .)
    [               reduce using rule 7 (type -> INT .)
    )               reduce using rule 7 (type -> INT .)


state 18

    (8) type -> FLOAT .

    ID              reduce using rule 8 (type -> FLOAT .)
    :               reduce using rule 8 (type -> FLOAT .)
    {               reduce using rule 8 (type -> FLOAT .)
    [               reduce using rule 8 (type -> FLOAT .)
    )               reduce using rule 8 (type -> FLOAT .)


state 19

    (9) type -> STRING .

    ID              reduce using rule 9 (type -> STRING .)
    :               reduce using rule 9 (type -> STRING .)
    {               reduce using rule 9 (type -> STRING .)
    [               reduce using rule 9 (type -> STRING .)
    )               reduce using rule 9 (type -> STRING .)


state 20

    (39) f -> DICT . ID dict ; h

    ID              shift and go to state 29


state 21

    (11) type -> BOOL .

    ID              reduce using rule 11 (type -> BOOL .)
    :               reduce using rule 11 (type -> BOOL .)
    {               reduce using rule 11 (type -> BOOL .)
    [               reduce using rule 11 (type -> BOOL .)
    )               reduce using rule 11 (type -> BOOL .)


state 22

    (37) d -> type . ID g ; h

    ID              shift and go to state 30


state 23

    (6) vars -> VARS declare .

    IF              reduce using rule 6 (vars -> VARS declare .)
    ID              reduce using rule 6 (vars -> VARS declare .)
    }               reduce using rule 6 (vars -> VARS declare .)
    ;               reduce using rule 6 (vars -> VARS declare .)
    FUNC            reduce using rule 6 (vars -> VARS declare .)
    MAIN            reduce using rule 6 (vars -> VARS declare .)


state 24

    (38) e -> STRUCT . ID struct ; h

    ID              shift and go to state 31


state 25

    (4) b -> function b .

    MAIN            reduce using rule 4 (b -> function b .)


state 26

    (12) main -> MAIN . { a body }

    {               shift and go to state 32


state 27

    (1) program -> PROGRAM ID { a b main . }

    }               shift and go to state 33


state 28

    (31) function -> FUNC ID . l m { a body }
    (32) l -> . ( param n )

    (               shift and go to state 34

    l                              shift and go to state 35

state 29

    (39) f -> DICT ID . dict ; h
    (61) dict -> . ( type : type )

    (               shift and go to state 36

    dict                           shift and go to state 37

state 30

    (37) d -> type ID . g ; h
    (40) g -> . , ID
    (41) g -> . empty
    (64) empty -> .

    ,               shift and go to state 39
    ;               reduce using rule 64 (empty -> .)

    empty                          shift and go to state 40
    g                              shift and go to state 38

state 31

    (38) e -> STRUCT ID . struct ; h
    (55) struct -> . type [ CTED ] optionalMatrix
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    OBJECT          shift and go to state 13
    BOOL            shift and go to state 21

    type                           shift and go to state 42
    struct                         shift and go to state 41

state 32

    (12) main -> MAIN { . a body }
    (2) a -> . vars
    (3) a -> . empty
    (6) vars -> . VARS declare
    (64) empty -> .

    VARS            shift and go to state 6
    IF              reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    }               reduce using rule 64 (empty -> .)
    ;               reduce using rule 64 (empty -> .)

    a                              shift and go to state 43
    empty                          shift and go to state 8
    vars                           shift and go to state 7

state 33

    (1) program -> PROGRAM ID { a b main } .

    $end            reduce using rule 1 (program -> PROGRAM ID { a b main } .)


state 34

    (32) l -> ( . param n )
    (28) param -> . type ID g k
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    OBJECT          shift and go to state 13
    BOOL            shift and go to state 21

    type                           shift and go to state 45
    param                          shift and go to state 44

state 35

    (31) function -> FUNC ID l . m { a body }
    (35) m -> . RETURNS type
    (36) m -> . empty
    (64) empty -> .

    RETURNS         shift and go to state 47
    {               reduce using rule 64 (empty -> .)

    m                              shift and go to state 46
    empty                          shift and go to state 48

state 36

    (61) dict -> ( . type : type )
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    OBJECT          shift and go to state 13
    BOOL            shift and go to state 21

    type                           shift and go to state 49

state 37

    (39) f -> DICT ID dict . ; h

    ;               shift and go to state 50


state 38

    (37) d -> type ID g . ; h

    ;               shift and go to state 51


state 39

    (40) g -> , . ID

    ID              shift and go to state 52


state 40

    (41) g -> empty .

    ;               reduce using rule 41 (g -> empty .)
    INT             reduce using rule 41 (g -> empty .)
    FLOAT           reduce using rule 41 (g -> empty .)
    STRING          reduce using rule 41 (g -> empty .)
    OBJECT          reduce using rule 41 (g -> empty .)
    BOOL            reduce using rule 41 (g -> empty .)
    )               reduce using rule 41 (g -> empty .)


state 41

    (38) e -> STRUCT ID struct . ; h

    ;               shift and go to state 53


state 42

    (55) struct -> type . [ CTED ] optionalMatrix

    [               shift and go to state 54


state 43

    (12) main -> MAIN { a . body }
    (44) body -> . cycleInstruction
    (45) body -> . empty
    (46) cycleInstruction -> . instr body
    (64) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (58) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . empty
    (48) assign -> . ID assignOptions
    (54) funcCall -> . empty

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    }               reduce using rule 64 (empty -> .)
    ;               reduce using rule 64 (empty -> .)
    IF              shift and go to state 63
    ID              shift and go to state 57

  ! IF              [ reduce using rule 64 (empty -> .) ]
  ! ID              [ reduce using rule 64 (empty -> .) ]

    body                           shift and go to state 55
    c                              shift and go to state 56
    funcCall                       shift and go to state 58
    cycleInstruction               shift and go to state 59
    instr                          shift and go to state 60
    condition                      shift and go to state 62
    assign                         shift and go to state 61
    empty                          shift and go to state 64
    cycle                          shift and go to state 65

state 44

    (32) l -> ( param . n )
    (33) n -> . param
    (34) n -> . empty
    (28) param -> . type ID g k
    (64) empty -> .
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    )               reduce using rule 64 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    OBJECT          shift and go to state 13
    BOOL            shift and go to state 21

    param                          shift and go to state 66
    n                              shift and go to state 67
    type                           shift and go to state 45
    empty                          shift and go to state 68

state 45

    (28) param -> type . ID g k

    ID              shift and go to state 69


state 46

    (31) function -> FUNC ID l m . { a body }

    {               shift and go to state 70


state 47

    (35) m -> RETURNS . type
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    OBJECT          shift and go to state 13
    BOOL            shift and go to state 21

    type                           shift and go to state 71

state 48

    (36) m -> empty .

    {               reduce using rule 36 (m -> empty .)


state 49

    (61) dict -> ( type . : type )

    :               shift and go to state 72


state 50

    (39) f -> DICT ID dict ; . h
    (42) h -> . declare
    (43) h -> . empty
    (18) declare -> . d
    (19) declare -> . e
    (20) declare -> . f
    (64) empty -> .
    (37) d -> . type ID g ; h
    (38) e -> . STRUCT ID struct ; h
    (39) f -> . DICT ID dict ; h
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    FUNC            reduce using rule 64 (empty -> .)
    MAIN            reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    }               reduce using rule 64 (empty -> .)
    ;               reduce using rule 64 (empty -> .)
    STRUCT          shift and go to state 24
    DICT            shift and go to state 20
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    OBJECT          shift and go to state 13
    BOOL            shift and go to state 21

    e                              shift and go to state 14
    d                              shift and go to state 15
    f                              shift and go to state 16
    h                              shift and go to state 73
    type                           shift and go to state 22
    declare                        shift and go to state 74
    empty                          shift and go to state 75

state 51

    (37) d -> type ID g ; . h
    (42) h -> . declare
    (43) h -> . empty
    (18) declare -> . d
    (19) declare -> . e
    (20) declare -> . f
    (64) empty -> .
    (37) d -> . type ID g ; h
    (38) e -> . STRUCT ID struct ; h
    (39) f -> . DICT ID dict ; h
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    FUNC            reduce using rule 64 (empty -> .)
    MAIN            reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    }               reduce using rule 64 (empty -> .)
    ;               reduce using rule 64 (empty -> .)
    STRUCT          shift and go to state 24
    DICT            shift and go to state 20
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    OBJECT          shift and go to state 13
    BOOL            shift and go to state 21

    e                              shift and go to state 14
    d                              shift and go to state 15
    f                              shift and go to state 16
    h                              shift and go to state 76
    type                           shift and go to state 22
    declare                        shift and go to state 74
    empty                          shift and go to state 75

state 52

    (40) g -> , ID .

    ;               reduce using rule 40 (g -> , ID .)
    INT             reduce using rule 40 (g -> , ID .)
    FLOAT           reduce using rule 40 (g -> , ID .)
    STRING          reduce using rule 40 (g -> , ID .)
    OBJECT          reduce using rule 40 (g -> , ID .)
    BOOL            reduce using rule 40 (g -> , ID .)
    )               reduce using rule 40 (g -> , ID .)


state 53

    (38) e -> STRUCT ID struct ; . h
    (42) h -> . declare
    (43) h -> . empty
    (18) declare -> . d
    (19) declare -> . e
    (20) declare -> . f
    (64) empty -> .
    (37) d -> . type ID g ; h
    (38) e -> . STRUCT ID struct ; h
    (39) f -> . DICT ID dict ; h
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    FUNC            reduce using rule 64 (empty -> .)
    MAIN            reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    }               reduce using rule 64 (empty -> .)
    ;               reduce using rule 64 (empty -> .)
    STRUCT          shift and go to state 24
    DICT            shift and go to state 20
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    OBJECT          shift and go to state 13
    BOOL            shift and go to state 21

    e                              shift and go to state 14
    d                              shift and go to state 15
    f                              shift and go to state 16
    h                              shift and go to state 77
    type                           shift and go to state 22
    declare                        shift and go to state 74
    empty                          shift and go to state 75

state 54

    (55) struct -> type [ . CTED ] optionalMatrix

    CTED            shift and go to state 78


state 55

    (12) main -> MAIN { a body . }

    }               shift and go to state 79


state 56

    (13) instr -> c . ;

    ;               shift and go to state 80


state 57

    (48) assign -> ID . assignOptions
    (49) assignOptions -> . init
    (50) assignOptions -> . initDict
    (51) assignOptions -> . [ expresion ] assignMatrix init
    (21) init -> . = i
    (24) initDict -> . = ( j : j )

    [               shift and go to state 85
    =               shift and go to state 81

    initDict                       shift and go to state 82
    assignOptions                  shift and go to state 83
    init                           shift and go to state 84

state 58

    (17) c -> funcCall .

    ;               reduce using rule 17 (c -> funcCall .)


state 59

    (44) body -> cycleInstruction .

    }               reduce using rule 44 (body -> cycleInstruction .)


state 60

    (46) cycleInstruction -> instr . body
    (44) body -> . cycleInstruction
    (45) body -> . empty
    (46) cycleInstruction -> . instr body
    (64) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (58) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . empty
    (48) assign -> . ID assignOptions
    (54) funcCall -> . empty

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    }               reduce using rule 64 (empty -> .)
    ;               reduce using rule 64 (empty -> .)
    IF              shift and go to state 63
    ID              shift and go to state 57

  ! IF              [ reduce using rule 64 (empty -> .) ]
  ! ID              [ reduce using rule 64 (empty -> .) ]

    body                           shift and go to state 86
    c                              shift and go to state 56
    funcCall                       shift and go to state 58
    cycleInstruction               shift and go to state 59
    instr                          shift and go to state 60
    empty                          shift and go to state 64
    assign                         shift and go to state 61
    condition                      shift and go to state 62
    cycle                          shift and go to state 65

state 61

    (16) c -> assign .

    ;               reduce using rule 16 (c -> assign .)


state 62

    (14) instr -> condition .

    IF              reduce using rule 14 (instr -> condition .)
    ID              reduce using rule 14 (instr -> condition .)
    ;               reduce using rule 14 (instr -> condition .)
    }               reduce using rule 14 (instr -> condition .)


state 63

    (58) condition -> IF . ( expresion ) { body } optionalElse

    (               shift and go to state 87


state 64

    (45) body -> empty .
    (47) cycle -> empty .
    (54) funcCall -> empty .

  ! reduce/reduce conflict for } resolved using rule 45 (body -> empty .)
  ! reduce/reduce conflict for ; resolved using rule 47 (cycle -> empty .)
    }               reduce using rule 45 (body -> empty .)
    IF              reduce using rule 47 (cycle -> empty .)
    ID              reduce using rule 47 (cycle -> empty .)
    ;               reduce using rule 47 (cycle -> empty .)

  ! }               [ reduce using rule 47 (cycle -> empty .) ]
  ! ;               [ reduce using rule 54 (funcCall -> empty .) ]


state 65

    (15) instr -> cycle .

    IF              reduce using rule 15 (instr -> cycle .)
    ID              reduce using rule 15 (instr -> cycle .)
    ;               reduce using rule 15 (instr -> cycle .)
    }               reduce using rule 15 (instr -> cycle .)


state 66

    (33) n -> param .

    )               reduce using rule 33 (n -> param .)


state 67

    (32) l -> ( param n . )

    )               shift and go to state 88


state 68

    (34) n -> empty .

    )               reduce using rule 34 (n -> empty .)


state 69

    (28) param -> type ID . g k
    (40) g -> . , ID
    (41) g -> . empty
    (64) empty -> .

    ,               shift and go to state 39
    ;               reduce using rule 64 (empty -> .)
    INT             reduce using rule 64 (empty -> .)
    FLOAT           reduce using rule 64 (empty -> .)
    STRING          reduce using rule 64 (empty -> .)
    OBJECT          reduce using rule 64 (empty -> .)
    BOOL            reduce using rule 64 (empty -> .)
    )               reduce using rule 64 (empty -> .)

    empty                          shift and go to state 40
    g                              shift and go to state 89

state 70

    (31) function -> FUNC ID l m { . a body }
    (2) a -> . vars
    (3) a -> . empty
    (6) vars -> . VARS declare
    (64) empty -> .

    VARS            shift and go to state 6
    IF              reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    }               reduce using rule 64 (empty -> .)
    ;               reduce using rule 64 (empty -> .)

    a                              shift and go to state 90
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 71

    (35) m -> RETURNS type .

    {               reduce using rule 35 (m -> RETURNS type .)


state 72

    (61) dict -> ( type : . type )
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    OBJECT          shift and go to state 13
    BOOL            shift and go to state 21

    type                           shift and go to state 91

state 73

    (39) f -> DICT ID dict ; h .

    FUNC            reduce using rule 39 (f -> DICT ID dict ; h .)
    MAIN            reduce using rule 39 (f -> DICT ID dict ; h .)
    IF              reduce using rule 39 (f -> DICT ID dict ; h .)
    ID              reduce using rule 39 (f -> DICT ID dict ; h .)
    }               reduce using rule 39 (f -> DICT ID dict ; h .)
    ;               reduce using rule 39 (f -> DICT ID dict ; h .)


state 74

    (42) h -> declare .

    FUNC            reduce using rule 42 (h -> declare .)
    MAIN            reduce using rule 42 (h -> declare .)
    IF              reduce using rule 42 (h -> declare .)
    ID              reduce using rule 42 (h -> declare .)
    }               reduce using rule 42 (h -> declare .)
    ;               reduce using rule 42 (h -> declare .)


state 75

    (43) h -> empty .

    FUNC            reduce using rule 43 (h -> empty .)
    MAIN            reduce using rule 43 (h -> empty .)
    IF              reduce using rule 43 (h -> empty .)
    ID              reduce using rule 43 (h -> empty .)
    }               reduce using rule 43 (h -> empty .)
    ;               reduce using rule 43 (h -> empty .)


state 76

    (37) d -> type ID g ; h .

    FUNC            reduce using rule 37 (d -> type ID g ; h .)
    MAIN            reduce using rule 37 (d -> type ID g ; h .)
    IF              reduce using rule 37 (d -> type ID g ; h .)
    ID              reduce using rule 37 (d -> type ID g ; h .)
    }               reduce using rule 37 (d -> type ID g ; h .)
    ;               reduce using rule 37 (d -> type ID g ; h .)


state 77

    (38) e -> STRUCT ID struct ; h .

    FUNC            reduce using rule 38 (e -> STRUCT ID struct ; h .)
    MAIN            reduce using rule 38 (e -> STRUCT ID struct ; h .)
    IF              reduce using rule 38 (e -> STRUCT ID struct ; h .)
    ID              reduce using rule 38 (e -> STRUCT ID struct ; h .)
    }               reduce using rule 38 (e -> STRUCT ID struct ; h .)
    ;               reduce using rule 38 (e -> STRUCT ID struct ; h .)


state 78

    (55) struct -> type [ CTED . ] optionalMatrix

    ]               shift and go to state 92


state 79

    (12) main -> MAIN { a body } .

    }               reduce using rule 12 (main -> MAIN { a body } .)


state 80

    (13) instr -> c ; .

    IF              reduce using rule 13 (instr -> c ; .)
    ID              reduce using rule 13 (instr -> c ; .)
    ;               reduce using rule 13 (instr -> c ; .)
    }               reduce using rule 13 (instr -> c ; .)


state 81

    (21) init -> = . i
    (24) initDict -> = . ( j : j )
    (22) i -> . expresion
    (23) i -> . funcCall
    (62) expresion -> . empty
    (54) funcCall -> . empty
    (64) empty -> .

    (               shift and go to state 96
    ;               reduce using rule 64 (empty -> .)

    i                              shift and go to state 95
    expresion                      shift and go to state 93
    empty                          shift and go to state 97
    funcCall                       shift and go to state 94

state 82

    (50) assignOptions -> initDict .

    ;               reduce using rule 50 (assignOptions -> initDict .)


state 83

    (48) assign -> ID assignOptions .

    ;               reduce using rule 48 (assign -> ID assignOptions .)


state 84

    (49) assignOptions -> init .

    ;               reduce using rule 49 (assignOptions -> init .)


state 85

    (51) assignOptions -> [ . expresion ] assignMatrix init
    (62) expresion -> . empty
    (64) empty -> .

    ]               reduce using rule 64 (empty -> .)

    expresion                      shift and go to state 98
    empty                          shift and go to state 99

state 86

    (46) cycleInstruction -> instr body .

    }               reduce using rule 46 (cycleInstruction -> instr body .)


state 87

    (58) condition -> IF ( . expresion ) { body } optionalElse
    (62) expresion -> . empty
    (64) empty -> .

    )               reduce using rule 64 (empty -> .)

    expresion                      shift and go to state 100
    empty                          shift and go to state 99

state 88

    (32) l -> ( param n ) .

    RETURNS         reduce using rule 32 (l -> ( param n ) .)
    {               reduce using rule 32 (l -> ( param n ) .)


state 89

    (28) param -> type ID g . k
    (29) k -> . ; param
    (30) k -> . empty
    (64) empty -> .

    ;               shift and go to state 102
    INT             reduce using rule 64 (empty -> .)
    FLOAT           reduce using rule 64 (empty -> .)
    STRING          reduce using rule 64 (empty -> .)
    OBJECT          reduce using rule 64 (empty -> .)
    BOOL            reduce using rule 64 (empty -> .)
    )               reduce using rule 64 (empty -> .)

    k                              shift and go to state 101
    empty                          shift and go to state 103

state 90

    (31) function -> FUNC ID l m { a . body }
    (44) body -> . cycleInstruction
    (45) body -> . empty
    (46) cycleInstruction -> . instr body
    (64) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (58) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . empty
    (48) assign -> . ID assignOptions
    (54) funcCall -> . empty

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    }               reduce using rule 64 (empty -> .)
    ;               reduce using rule 64 (empty -> .)
    IF              shift and go to state 63
    ID              shift and go to state 57

  ! IF              [ reduce using rule 64 (empty -> .) ]
  ! ID              [ reduce using rule 64 (empty -> .) ]

    body                           shift and go to state 104
    c                              shift and go to state 56
    funcCall                       shift and go to state 58
    cycleInstruction               shift and go to state 59
    instr                          shift and go to state 60
    condition                      shift and go to state 62
    assign                         shift and go to state 61
    empty                          shift and go to state 64
    cycle                          shift and go to state 65

state 91

    (61) dict -> ( type : type . )

    )               shift and go to state 105


state 92

    (55) struct -> type [ CTED ] . optionalMatrix
    (56) optionalMatrix -> . [ CTED ]
    (57) optionalMatrix -> . empty
    (64) empty -> .

    [               shift and go to state 107
    ;               reduce using rule 64 (empty -> .)

    optionalMatrix                 shift and go to state 106
    empty                          shift and go to state 108

state 93

    (22) i -> expresion .

    ;               reduce using rule 22 (i -> expresion .)


state 94

    (23) i -> funcCall .

    ;               reduce using rule 23 (i -> funcCall .)


state 95

    (21) init -> = i .

    ;               reduce using rule 21 (init -> = i .)


state 96

    (24) initDict -> = ( . j : j )
    (25) j -> . CTES
    (26) j -> . cte
    (27) j -> . ID
    (63) cte -> . empty
    (64) empty -> .

    CTES            shift and go to state 109
    ID              shift and go to state 112
    :               reduce using rule 64 (empty -> .)

    cte                            shift and go to state 111
    j                              shift and go to state 110
    empty                          shift and go to state 113

state 97

    (62) expresion -> empty .
    (54) funcCall -> empty .

  ! reduce/reduce conflict for ; resolved using rule 54 (funcCall -> empty .)
    ;               reduce using rule 54 (funcCall -> empty .)

  ! ;               [ reduce using rule 62 (expresion -> empty .) ]


state 98

    (51) assignOptions -> [ expresion . ] assignMatrix init

    ]               shift and go to state 114


state 99

    (62) expresion -> empty .

    ]               reduce using rule 62 (expresion -> empty .)
    )               reduce using rule 62 (expresion -> empty .)


state 100

    (58) condition -> IF ( expresion . ) { body } optionalElse

    )               shift and go to state 115


state 101

    (28) param -> type ID g k .

    INT             reduce using rule 28 (param -> type ID g k .)
    FLOAT           reduce using rule 28 (param -> type ID g k .)
    STRING          reduce using rule 28 (param -> type ID g k .)
    OBJECT          reduce using rule 28 (param -> type ID g k .)
    BOOL            reduce using rule 28 (param -> type ID g k .)
    )               reduce using rule 28 (param -> type ID g k .)


state 102

    (29) k -> ; . param
    (28) param -> . type ID g k
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STRING
    (10) type -> . OBJECT
    (11) type -> . BOOL

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    OBJECT          shift and go to state 13
    BOOL            shift and go to state 21

    type                           shift and go to state 45
    param                          shift and go to state 116

state 103

    (30) k -> empty .

    INT             reduce using rule 30 (k -> empty .)
    FLOAT           reduce using rule 30 (k -> empty .)
    STRING          reduce using rule 30 (k -> empty .)
    OBJECT          reduce using rule 30 (k -> empty .)
    BOOL            reduce using rule 30 (k -> empty .)
    )               reduce using rule 30 (k -> empty .)


state 104

    (31) function -> FUNC ID l m { a body . }

    }               shift and go to state 117


state 105

    (61) dict -> ( type : type ) .

    ;               reduce using rule 61 (dict -> ( type : type ) .)


state 106

    (55) struct -> type [ CTED ] optionalMatrix .

    ;               reduce using rule 55 (struct -> type [ CTED ] optionalMatrix .)


state 107

    (56) optionalMatrix -> [ . CTED ]

    CTED            shift and go to state 118


state 108

    (57) optionalMatrix -> empty .

    ;               reduce using rule 57 (optionalMatrix -> empty .)


state 109

    (25) j -> CTES .

    )               reduce using rule 25 (j -> CTES .)
    :               reduce using rule 25 (j -> CTES .)


state 110

    (24) initDict -> = ( j . : j )

    :               shift and go to state 119


state 111

    (26) j -> cte .

    )               reduce using rule 26 (j -> cte .)
    :               reduce using rule 26 (j -> cte .)


state 112

    (27) j -> ID .

    )               reduce using rule 27 (j -> ID .)
    :               reduce using rule 27 (j -> ID .)


state 113

    (63) cte -> empty .

    :               reduce using rule 63 (cte -> empty .)
    )               reduce using rule 63 (cte -> empty .)


state 114

    (51) assignOptions -> [ expresion ] . assignMatrix init
    (52) assignMatrix -> . [ expresion ]
    (53) assignMatrix -> . empty
    (64) empty -> .

    [               shift and go to state 121
    =               reduce using rule 64 (empty -> .)

    assignMatrix                   shift and go to state 120
    empty                          shift and go to state 122

state 115

    (58) condition -> IF ( expresion ) . { body } optionalElse

    {               shift and go to state 123


state 116

    (29) k -> ; param .

    INT             reduce using rule 29 (k -> ; param .)
    FLOAT           reduce using rule 29 (k -> ; param .)
    STRING          reduce using rule 29 (k -> ; param .)
    OBJECT          reduce using rule 29 (k -> ; param .)
    BOOL            reduce using rule 29 (k -> ; param .)
    )               reduce using rule 29 (k -> ; param .)


state 117

    (31) function -> FUNC ID l m { a body } .

    FUNC            reduce using rule 31 (function -> FUNC ID l m { a body } .)
    MAIN            reduce using rule 31 (function -> FUNC ID l m { a body } .)


state 118

    (56) optionalMatrix -> [ CTED . ]

    ]               shift and go to state 124


state 119

    (24) initDict -> = ( j : . j )
    (25) j -> . CTES
    (26) j -> . cte
    (27) j -> . ID
    (63) cte -> . empty
    (64) empty -> .

    CTES            shift and go to state 109
    ID              shift and go to state 112
    )               reduce using rule 64 (empty -> .)

    cte                            shift and go to state 111
    j                              shift and go to state 125
    empty                          shift and go to state 113

state 120

    (51) assignOptions -> [ expresion ] assignMatrix . init
    (21) init -> . = i

    =               shift and go to state 127

    init                           shift and go to state 126

state 121

    (52) assignMatrix -> [ . expresion ]
    (62) expresion -> . empty
    (64) empty -> .

    ]               reduce using rule 64 (empty -> .)

    expresion                      shift and go to state 128
    empty                          shift and go to state 99

state 122

    (53) assignMatrix -> empty .

    =               reduce using rule 53 (assignMatrix -> empty .)


state 123

    (58) condition -> IF ( expresion ) { . body } optionalElse
    (44) body -> . cycleInstruction
    (45) body -> . empty
    (46) cycleInstruction -> . instr body
    (64) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (58) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . empty
    (48) assign -> . ID assignOptions
    (54) funcCall -> . empty

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    }               reduce using rule 64 (empty -> .)
    ;               reduce using rule 64 (empty -> .)
    IF              shift and go to state 63
    ID              shift and go to state 57

  ! IF              [ reduce using rule 64 (empty -> .) ]
  ! ID              [ reduce using rule 64 (empty -> .) ]

    body                           shift and go to state 129
    c                              shift and go to state 56
    funcCall                       shift and go to state 58
    cycleInstruction               shift and go to state 59
    instr                          shift and go to state 60
    condition                      shift and go to state 62
    assign                         shift and go to state 61
    empty                          shift and go to state 64
    cycle                          shift and go to state 65

state 124

    (56) optionalMatrix -> [ CTED ] .

    ;               reduce using rule 56 (optionalMatrix -> [ CTED ] .)


state 125

    (24) initDict -> = ( j : j . )

    )               shift and go to state 130


state 126

    (51) assignOptions -> [ expresion ] assignMatrix init .

    ;               reduce using rule 51 (assignOptions -> [ expresion ] assignMatrix init .)


state 127

    (21) init -> = . i
    (22) i -> . expresion
    (23) i -> . funcCall
    (62) expresion -> . empty
    (54) funcCall -> . empty
    (64) empty -> .

    ;               reduce using rule 64 (empty -> .)

    i                              shift and go to state 95
    expresion                      shift and go to state 93
    empty                          shift and go to state 97
    funcCall                       shift and go to state 94

state 128

    (52) assignMatrix -> [ expresion . ]

    ]               shift and go to state 131


state 129

    (58) condition -> IF ( expresion ) { body . } optionalElse

    }               shift and go to state 132


state 130

    (24) initDict -> = ( j : j ) .

    ;               reduce using rule 24 (initDict -> = ( j : j ) .)


state 131

    (52) assignMatrix -> [ expresion ] .

    =               reduce using rule 52 (assignMatrix -> [ expresion ] .)


state 132

    (58) condition -> IF ( expresion ) { body } . optionalElse
    (59) optionalElse -> . ELSE { body }
    (60) optionalElse -> . empty
    (64) empty -> .

    ELSE            shift and go to state 133
    IF              reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    ;               reduce using rule 64 (empty -> .)
    }               reduce using rule 64 (empty -> .)

    optionalElse                   shift and go to state 134
    empty                          shift and go to state 135

state 133

    (59) optionalElse -> ELSE . { body }

    {               shift and go to state 136


state 134

    (58) condition -> IF ( expresion ) { body } optionalElse .

    IF              reduce using rule 58 (condition -> IF ( expresion ) { body } optionalElse .)
    ID              reduce using rule 58 (condition -> IF ( expresion ) { body } optionalElse .)
    ;               reduce using rule 58 (condition -> IF ( expresion ) { body } optionalElse .)
    }               reduce using rule 58 (condition -> IF ( expresion ) { body } optionalElse .)


state 135

    (60) optionalElse -> empty .

    IF              reduce using rule 60 (optionalElse -> empty .)
    ID              reduce using rule 60 (optionalElse -> empty .)
    ;               reduce using rule 60 (optionalElse -> empty .)
    }               reduce using rule 60 (optionalElse -> empty .)


state 136

    (59) optionalElse -> ELSE { . body }
    (44) body -> . cycleInstruction
    (45) body -> . empty
    (46) cycleInstruction -> . instr body
    (64) empty -> .
    (13) instr -> . c ;
    (14) instr -> . condition
    (15) instr -> . cycle
    (16) c -> . assign
    (17) c -> . funcCall
    (58) condition -> . IF ( expresion ) { body } optionalElse
    (47) cycle -> . empty
    (48) assign -> . ID assignOptions
    (54) funcCall -> . empty

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    }               reduce using rule 64 (empty -> .)
    ;               reduce using rule 64 (empty -> .)
    IF              shift and go to state 63
    ID              shift and go to state 57

  ! IF              [ reduce using rule 64 (empty -> .) ]
  ! ID              [ reduce using rule 64 (empty -> .) ]

    body                           shift and go to state 137
    c                              shift and go to state 56
    funcCall                       shift and go to state 58
    cycleInstruction               shift and go to state 59
    instr                          shift and go to state 60
    empty                          shift and go to state 64
    assign                         shift and go to state 61
    condition                      shift and go to state 62
    cycle                          shift and go to state 65

state 137

    (59) optionalElse -> ELSE { body . }

    }               shift and go to state 138


state 138

    (59) optionalElse -> ELSE { body } .

    IF              reduce using rule 59 (optionalElse -> ELSE { body } .)
    ID              reduce using rule 59 (optionalElse -> ELSE { body } .)
    ;               reduce using rule 59 (optionalElse -> ELSE { body } .)
    }               reduce using rule 59 (optionalElse -> ELSE { body } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 43 resolved as shift
WARNING: shift/reduce conflict for ID in state 43 resolved as shift
WARNING: shift/reduce conflict for IF in state 60 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
WARNING: shift/reduce conflict for IF in state 136 resolved as shift
WARNING: shift/reduce conflict for ID in state 136 resolved as shift
WARNING: reduce/reduce conflict in state 64 resolved using rule (body -> empty)
WARNING: rejected rule (cycle -> empty) in state 64
WARNING: reduce/reduce conflict in state 64 resolved using rule (cycle -> empty)
WARNING: rejected rule (funcCall -> empty) in state 64
WARNING: reduce/reduce conflict in state 97 resolved using rule (funcCall -> empty)
WARNING: rejected rule (expresion -> empty) in state 97
