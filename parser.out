Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> errorProgram PROGRAM saveType ID saveProc { opVars opFunctions main }
Rule 2     saveType -> <empty>
Rule 3     saveProc -> <empty>
Rule 4     errorProgram -> <empty>
Rule 5     opVars -> vars
Rule 6     opVars -> empty
Rule 7     opFunctions -> function opFunctions
Rule 8     opFunctions -> empty
Rule 9     vars -> errorVars VARS declare
Rule 10    saveID -> <empty>
Rule 11    errorVars -> <empty>
Rule 12    type -> errorType INT
Rule 13    type -> FLOAT
Rule 14    type -> STRING
Rule 15    type -> OBJECT
Rule 16    type -> BOOL
Rule 17    errorType -> <empty>
Rule 18    main -> errorMain MAIN saveMain { opVars body }
Rule 19    saveMain -> <empty>
Rule 20    errorMain -> <empty>
Rule 21    instr -> basicStatements ;
Rule 22    instr -> condition
Rule 23    instr -> cycle
Rule 24    basicStatements -> assign
Rule 25    basicStatements -> funcCall
Rule 26    declare -> basicDeclare
Rule 27    declare -> structDeclare
Rule 28    declare -> dictDeclare
Rule 29    init -> = initWith errorInit
Rule 30    errorInit -> <empty>
Rule 31    initWith -> expresion
Rule 32    initWith -> funcCall
Rule 33    initDict -> = ( dictType : dictType ) errorInitDict
Rule 34    errorInitDict -> <empty>
Rule 35    dictType -> errorDictType CTES
Rule 36    dictType -> cte
Rule 37    dictType -> ID
Rule 38    errorDictType -> <empty>
Rule 39    param -> type errorParam ID cyTypeParam cyParam
Rule 40    errorParam -> <empty>
Rule 41    cyParam -> errorCyParam ; param
Rule 42    cyParam -> empty
Rule 43    errorCyParam -> <empty>
Rule 44    function -> errorFunction FUNC ID opParameters opReturns }
Rule 45    errorFunction -> <empty>
Rule 46    return -> errorReturn RETURN expresion ;
Rule 47    errorReturn -> <empty>
Rule 48    opParameters -> ( param ) errorOpParameters
Rule 49    opParameters -> empty
Rule 50    errorOpParameters -> <empty>
Rule 51    opReturns -> errorOpReturns RETURNS type { opVars body return
Rule 52    opReturns -> { opVars body
Rule 53    errorOpReturns -> <empty>
Rule 54    basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
Rule 55    errorBasicDeclare -> <empty>
Rule 56    structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare
Rule 57    errorStructDeclare -> <empty>
Rule 58    dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare
Rule 59    errorDictDeclare -> <empty>
Rule 60    cyTypeParam -> , saveID ID cyTypeParam
Rule 61    cyTypeParam -> empty
Rule 62    cyDeclare -> declare
Rule 63    cyDeclare -> empty
Rule 64    body -> errorBody cyInstruction
Rule 65    body -> empty
Rule 66    errorBody -> <empty>
Rule 67    cyInstruction -> instr body
Rule 68    cycle -> forCycle
Rule 69    cycle -> whileCycle
Rule 70    whileCycle -> errorWhileCycle WHILE ( expresion ) { body }
Rule 71    errorWhileCycle -> <empty>
Rule 72    forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body }
Rule 73    errorForCycle -> <empty>
Rule 74    assign -> ID errorAssign assignOptions
Rule 75    errorAssign -> <empty>
Rule 76    assignOptions -> init
Rule 77    assignOptions -> initDict
Rule 78    assignOptions -> [ expresion ] assignMatrix init
Rule 79    assignMatrix -> [ expresion ] errorAssignMatrix
Rule 80    assignMatrix -> empty
Rule 81    errorAssignMatrix -> <empty>
Rule 82    funcCall -> ID ( opParamCall )
Rule 83    opParamCall -> expresion cyParamCall
Rule 84    opParamCall -> empty
Rule 85    cyParamCall -> , expresion cyParamCall
Rule 86    cyParamCall -> empty
Rule 87    struct -> structType [ CTED ] optionalMatrix
Rule 88    structType -> type
Rule 89    structType -> DICT dict
Rule 90    optionalMatrix -> [ CTED ]
Rule 91    optionalMatrix -> empty
Rule 92    condition -> errorCondition IF ( expresion ) { body } optionalElse
Rule 93    errorCondition -> <empty>
Rule 94    optionalElse -> errorElse ELSE { body }
Rule 95    optionalElse -> empty
Rule 96    errorElse -> <empty>
Rule 97    dict -> errorDict ( type : type )
Rule 98    errorDict -> <empty>
Rule 99    expresion -> sExp cyExpresion errorExpresion
Rule 100   errorExpresion -> <empty>
Rule 101   cyExpresion -> AND expresion
Rule 102   cyExpresion -> OR expresion
Rule 103   cyExpresion -> empty
Rule 104   sExp -> exp errorOpSExp opSExp
Rule 105   opSExp -> EQ exp
Rule 106   opSExp -> DIF exp
Rule 107   opSExp -> LTOEQ exp
Rule 108   opSExp -> GTOEQ exp
Rule 109   opSExp -> > exp
Rule 110   opSExp -> < exp
Rule 111   opSExp -> empty
Rule 112   errorOpSExp -> <empty>
Rule 113   exp -> term errorCyExp cyExp
Rule 114   cyExp -> + term
Rule 115   cyExp -> - term
Rule 116   cyExp -> empty
Rule 117   errorCyExp -> <empty>
Rule 118   term -> fact cyTerm
Rule 119   cyTerm -> * errorFact fact
Rule 120   cyTerm -> / fact
Rule 121   cyTerm -> empty
Rule 122   fact -> CTES
Rule 123   fact -> cte
Rule 124   fact -> funcCall
Rule 125   fact -> ( expresion )
Rule 126   fact -> ID opAccess errorOpAccess
Rule 127   errorFact -> <empty>
Rule 128   opAccess -> opStruct
Rule 129   opAccess -> opDictionary
Rule 130   opAccess -> empty
Rule 131   errorOpAccess -> <empty>
Rule 132   opStruct -> errorOpStruct [ expresion ] opMatrix
Rule 133   errorOpStruct -> <empty>
Rule 134   opMatrix -> errorOpMatrix [ expresion ]
Rule 135   opMatrix -> empty
Rule 136   errorOpMatrix -> <empty>
Rule 137   opDictionary -> . dictIndex
Rule 138   dictIndex -> FIRST
Rule 139   dictIndex -> LAST
Rule 140   cte -> CTED
Rule 141   cte -> CTEF
Rule 142   cte -> TRUE
Rule 143   cte -> FALSE
Rule 144   empty -> <empty>

Terminals, with rules where they appear

(                    : 33 48 70 72 82 92 97 125
)                    : 33 48 70 72 82 92 97 125
*                    : 119
+                    : 114
,                    : 60 85
-                    : 115
.                    : 137
/                    : 120
:                    : 33 97
;                    : 21 41 46 54 56 58 72 72
<                    : 110
=                    : 29 33
>                    : 109
AND                  : 101
BOOL                 : 16
CTED                 : 87 90 140
CTEF                 : 141
CTES                 : 35 122
DICT                 : 58 89
DIF                  : 106
ELSE                 : 94
EQ                   : 105
FALSE                : 143
FIRST                : 138
FLOAT                : 13
FOR                  : 72
FUNC                 : 44
GTOEQ                : 108
ID                   : 1 37 39 44 54 56 58 60 74 82 126
IF                   : 92
INT                  : 12
LAST                 : 139
LTOEQ                : 107
MAIN                 : 18
OBJECT               : 15
OR                   : 102
PROGRAM              : 1
RETURN               : 46
RETURNS              : 51
STRING               : 14
STRUCT               : 56
TRUE                 : 142
VARS                 : 9
WHILE                : 70
[                    : 78 79 87 90 132 134
]                    : 78 79 87 90 132 134
error                : 
{                    : 1 18 51 52 70 72 92 94
}                    : 1 18 44 70 72 92 94

Nonterminals, with rules where they appear

assign               : 24 72 72
assignMatrix         : 78
assignOptions        : 74
basicDeclare         : 26
basicStatements      : 21
body                 : 18 51 52 67 70 72 92 94
condition            : 22
cte                  : 36 123
cyDeclare            : 54 56 58
cyExp                : 113
cyExpresion          : 99
cyInstruction        : 64
cyParam              : 39
cyParamCall          : 83 85
cyTerm               : 118
cyTypeParam          : 39 54 60
cycle                : 23
declare              : 9 62
dict                 : 58 89
dictDeclare          : 28
dictIndex            : 137
dictType             : 33 33
empty                : 6 8 42 49 61 63 65 80 84 86 91 95 103 111 116 121 130 135
errorAssign          : 74
errorAssignMatrix    : 79
errorBasicDeclare    : 54
errorBody            : 64
errorCondition       : 92
errorCyExp           : 113
errorCyParam         : 41
errorDict            : 97
errorDictDeclare     : 58
errorDictType        : 35
errorElse            : 94
errorExpresion       : 99
errorFact            : 119
errorForCycle        : 72
errorFunction        : 44
errorInit            : 29
errorInitDict        : 33
errorMain            : 18
errorOpAccess        : 126
errorOpMatrix        : 134
errorOpParameters    : 48
errorOpReturns       : 51
errorOpSExp          : 104
errorOpStruct        : 132
errorParam           : 39
errorProgram         : 1
errorReturn          : 46
errorStructDeclare   : 56
errorType            : 12
errorVars            : 9
errorWhileCycle      : 70
exp                  : 104 105 106 107 108 109 110
expresion            : 31 46 70 72 78 79 83 85 92 101 102 125 132 134
fact                 : 118 119 120
forCycle             : 68
funcCall             : 25 32 124
function             : 7
init                 : 76 78
initDict             : 77
initWith             : 29
instr                : 67
main                 : 1
opAccess             : 126
opDictionary         : 129
opFunctions          : 1 7
opMatrix             : 132
opParamCall          : 82
opParameters         : 44
opReturns            : 44
opSExp               : 104
opStruct             : 128
opVars               : 1 18 51 52
optionalElse         : 92
optionalMatrix       : 87
param                : 41 48
program              : 0
return               : 51
sExp                 : 99
saveID               : 54 60
saveMain             : 18
saveProc             : 1
saveType             : 1 54
struct               : 56
structDeclare        : 27
structType           : 87
term                 : 113 114 115
type                 : 39 51 54 88 97 97
vars                 : 5
whileCycle           : 69

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . errorProgram PROGRAM saveType ID saveProc { opVars opFunctions main }
    (4) errorProgram -> .

    PROGRAM         reduce using rule 4 (errorProgram -> .)

    errorProgram                   shift and go to state 2
    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> errorProgram . PROGRAM saveType ID saveProc { opVars opFunctions main }

    PROGRAM         shift and go to state 3


state 3

    (1) program -> errorProgram PROGRAM . saveType ID saveProc { opVars opFunctions main }
    (2) saveType -> .

    ID              reduce using rule 2 (saveType -> .)

    saveType                       shift and go to state 4

state 4

    (1) program -> errorProgram PROGRAM saveType . ID saveProc { opVars opFunctions main }

    ID              shift and go to state 5


state 5

    (1) program -> errorProgram PROGRAM saveType ID . saveProc { opVars opFunctions main }
    (3) saveProc -> .

    {               reduce using rule 3 (saveProc -> .)

    saveProc                       shift and go to state 6

state 6

    (1) program -> errorProgram PROGRAM saveType ID saveProc . { opVars opFunctions main }

    {               shift and go to state 7


state 7

    (1) program -> errorProgram PROGRAM saveType ID saveProc { . opVars opFunctions main }
    (5) opVars -> . vars
    (6) opVars -> . empty
    (9) vars -> . errorVars VARS declare
    (144) empty -> .
    (11) errorVars -> .

    MAIN            reduce using rule 144 (empty -> .)
    FUNC            reduce using rule 144 (empty -> .)
    VARS            reduce using rule 11 (errorVars -> .)

    vars                           shift and go to state 8
    opVars                         shift and go to state 9
    errorVars                      shift and go to state 10
    empty                          shift and go to state 11

state 8

    (5) opVars -> vars .

    }               reduce using rule 5 (opVars -> vars .)
    ID              reduce using rule 5 (opVars -> vars .)
    IF              reduce using rule 5 (opVars -> vars .)
    FOR             reduce using rule 5 (opVars -> vars .)
    WHILE           reduce using rule 5 (opVars -> vars .)
    MAIN            reduce using rule 5 (opVars -> vars .)
    FUNC            reduce using rule 5 (opVars -> vars .)
    RETURN          reduce using rule 5 (opVars -> vars .)


state 9

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars . opFunctions main }
    (7) opFunctions -> . function opFunctions
    (8) opFunctions -> . empty
    (44) function -> . errorFunction FUNC ID opParameters opReturns }
    (144) empty -> .
    (45) errorFunction -> .

    MAIN            reduce using rule 144 (empty -> .)
    FUNC            reduce using rule 45 (errorFunction -> .)

    function                       shift and go to state 12
    errorFunction                  shift and go to state 13
    empty                          shift and go to state 14
    opFunctions                    shift and go to state 15

state 10

    (9) vars -> errorVars . VARS declare

    VARS            shift and go to state 16


state 11

    (6) opVars -> empty .

    }               reduce using rule 6 (opVars -> empty .)
    ID              reduce using rule 6 (opVars -> empty .)
    IF              reduce using rule 6 (opVars -> empty .)
    FOR             reduce using rule 6 (opVars -> empty .)
    WHILE           reduce using rule 6 (opVars -> empty .)
    MAIN            reduce using rule 6 (opVars -> empty .)
    FUNC            reduce using rule 6 (opVars -> empty .)
    RETURN          reduce using rule 6 (opVars -> empty .)


state 12

    (7) opFunctions -> function . opFunctions
    (7) opFunctions -> . function opFunctions
    (8) opFunctions -> . empty
    (44) function -> . errorFunction FUNC ID opParameters opReturns }
    (144) empty -> .
    (45) errorFunction -> .

    MAIN            reduce using rule 144 (empty -> .)
    FUNC            reduce using rule 45 (errorFunction -> .)

    function                       shift and go to state 12
    errorFunction                  shift and go to state 13
    opFunctions                    shift and go to state 17
    empty                          shift and go to state 14

state 13

    (44) function -> errorFunction . FUNC ID opParameters opReturns }

    FUNC            shift and go to state 18


state 14

    (8) opFunctions -> empty .

    MAIN            reduce using rule 8 (opFunctions -> empty .)


state 15

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars opFunctions . main }
    (18) main -> . errorMain MAIN saveMain { opVars body }
    (20) errorMain -> .

    MAIN            reduce using rule 20 (errorMain -> .)

    errorMain                      shift and go to state 20
    main                           shift and go to state 19

state 16

    (9) vars -> errorVars VARS . declare
    (26) declare -> . basicDeclare
    (27) declare -> . structDeclare
    (28) declare -> . dictDeclare
    (54) basicDeclare -> . saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (56) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (58) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (2) saveType -> .
    (57) errorStructDeclare -> .
    (59) errorDictDeclare -> .

    FLOAT           reduce using rule 2 (saveType -> .)
    STRING          reduce using rule 2 (saveType -> .)
    OBJECT          reduce using rule 2 (saveType -> .)
    BOOL            reduce using rule 2 (saveType -> .)
    INT             reduce using rule 2 (saveType -> .)
    STRUCT          reduce using rule 57 (errorStructDeclare -> .)
    DICT            reduce using rule 59 (errorDictDeclare -> .)

    dictDeclare                    shift and go to state 21
    saveType                       shift and go to state 22
    errorDictDeclare               shift and go to state 23
    structDeclare                  shift and go to state 24
    errorStructDeclare             shift and go to state 25
    basicDeclare                   shift and go to state 26
    declare                        shift and go to state 27

state 17

    (7) opFunctions -> function opFunctions .

    MAIN            reduce using rule 7 (opFunctions -> function opFunctions .)


state 18

    (44) function -> errorFunction FUNC . ID opParameters opReturns }

    ID              shift and go to state 28


state 19

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars opFunctions main . }

    }               shift and go to state 29


state 20

    (18) main -> errorMain . MAIN saveMain { opVars body }

    MAIN            shift and go to state 30


state 21

    (28) declare -> dictDeclare .

    MAIN            reduce using rule 28 (declare -> dictDeclare .)
    FUNC            reduce using rule 28 (declare -> dictDeclare .)
    ID              reduce using rule 28 (declare -> dictDeclare .)
    IF              reduce using rule 28 (declare -> dictDeclare .)
    FOR             reduce using rule 28 (declare -> dictDeclare .)
    WHILE           reduce using rule 28 (declare -> dictDeclare .)
    }               reduce using rule 28 (declare -> dictDeclare .)
    RETURN          reduce using rule 28 (declare -> dictDeclare .)


state 22

    (54) basicDeclare -> saveType . type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    errorType                      shift and go to state 33
    type                           shift and go to state 36

state 23

    (58) dictDeclare -> errorDictDeclare . DICT ID dict ; cyDeclare

    DICT            shift and go to state 37


state 24

    (27) declare -> structDeclare .

    MAIN            reduce using rule 27 (declare -> structDeclare .)
    FUNC            reduce using rule 27 (declare -> structDeclare .)
    ID              reduce using rule 27 (declare -> structDeclare .)
    IF              reduce using rule 27 (declare -> structDeclare .)
    FOR             reduce using rule 27 (declare -> structDeclare .)
    WHILE           reduce using rule 27 (declare -> structDeclare .)
    }               reduce using rule 27 (declare -> structDeclare .)
    RETURN          reduce using rule 27 (declare -> structDeclare .)


state 25

    (56) structDeclare -> errorStructDeclare . STRUCT ID struct ; cyDeclare

    STRUCT          shift and go to state 38


state 26

    (26) declare -> basicDeclare .

    MAIN            reduce using rule 26 (declare -> basicDeclare .)
    FUNC            reduce using rule 26 (declare -> basicDeclare .)
    ID              reduce using rule 26 (declare -> basicDeclare .)
    IF              reduce using rule 26 (declare -> basicDeclare .)
    FOR             reduce using rule 26 (declare -> basicDeclare .)
    WHILE           reduce using rule 26 (declare -> basicDeclare .)
    }               reduce using rule 26 (declare -> basicDeclare .)
    RETURN          reduce using rule 26 (declare -> basicDeclare .)


state 27

    (9) vars -> errorVars VARS declare .

    }               reduce using rule 9 (vars -> errorVars VARS declare .)
    ID              reduce using rule 9 (vars -> errorVars VARS declare .)
    IF              reduce using rule 9 (vars -> errorVars VARS declare .)
    FOR             reduce using rule 9 (vars -> errorVars VARS declare .)
    WHILE           reduce using rule 9 (vars -> errorVars VARS declare .)
    MAIN            reduce using rule 9 (vars -> errorVars VARS declare .)
    FUNC            reduce using rule 9 (vars -> errorVars VARS declare .)
    RETURN          reduce using rule 9 (vars -> errorVars VARS declare .)


state 28

    (44) function -> errorFunction FUNC ID . opParameters opReturns }
    (48) opParameters -> . ( param ) errorOpParameters
    (49) opParameters -> . empty
    (144) empty -> .

    (               shift and go to state 40
    {               reduce using rule 144 (empty -> .)
    RETURNS         reduce using rule 144 (empty -> .)

    opParameters                   shift and go to state 39
    empty                          shift and go to state 41

state 29

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars opFunctions main } .

    $end            reduce using rule 1 (program -> errorProgram PROGRAM saveType ID saveProc { opVars opFunctions main } .)


state 30

    (18) main -> errorMain MAIN . saveMain { opVars body }
    (19) saveMain -> .

    {               reduce using rule 19 (saveMain -> .)

    saveMain                       shift and go to state 42

state 31

    (13) type -> FLOAT .

    ID              reduce using rule 13 (type -> FLOAT .)
    {               reduce using rule 13 (type -> FLOAT .)
    [               reduce using rule 13 (type -> FLOAT .)
    )               reduce using rule 13 (type -> FLOAT .)
    :               reduce using rule 13 (type -> FLOAT .)


state 32

    (14) type -> STRING .

    ID              reduce using rule 14 (type -> STRING .)
    {               reduce using rule 14 (type -> STRING .)
    [               reduce using rule 14 (type -> STRING .)
    )               reduce using rule 14 (type -> STRING .)
    :               reduce using rule 14 (type -> STRING .)


state 33

    (12) type -> errorType . INT

    INT             shift and go to state 43


state 34

    (15) type -> OBJECT .

    ID              reduce using rule 15 (type -> OBJECT .)
    {               reduce using rule 15 (type -> OBJECT .)
    [               reduce using rule 15 (type -> OBJECT .)
    )               reduce using rule 15 (type -> OBJECT .)
    :               reduce using rule 15 (type -> OBJECT .)


state 35

    (16) type -> BOOL .

    ID              reduce using rule 16 (type -> BOOL .)
    {               reduce using rule 16 (type -> BOOL .)
    [               reduce using rule 16 (type -> BOOL .)
    )               reduce using rule 16 (type -> BOOL .)
    :               reduce using rule 16 (type -> BOOL .)


state 36

    (54) basicDeclare -> saveType type . errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (55) errorBasicDeclare -> .

    ID              reduce using rule 55 (errorBasicDeclare -> .)

    errorBasicDeclare              shift and go to state 44

state 37

    (58) dictDeclare -> errorDictDeclare DICT . ID dict ; cyDeclare

    ID              shift and go to state 45


state 38

    (56) structDeclare -> errorStructDeclare STRUCT . ID struct ; cyDeclare

    ID              shift and go to state 46


state 39

    (44) function -> errorFunction FUNC ID opParameters . opReturns }
    (51) opReturns -> . errorOpReturns RETURNS type { opVars body return
    (52) opReturns -> . { opVars body
    (53) errorOpReturns -> .

    {               shift and go to state 48
    RETURNS         reduce using rule 53 (errorOpReturns -> .)

    errorOpReturns                 shift and go to state 47
    opReturns                      shift and go to state 49

state 40

    (48) opParameters -> ( . param ) errorOpParameters
    (39) param -> . type errorParam ID cyTypeParam cyParam
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    type                           shift and go to state 51
    errorType                      shift and go to state 33
    param                          shift and go to state 50

state 41

    (49) opParameters -> empty .

    {               reduce using rule 49 (opParameters -> empty .)
    RETURNS         reduce using rule 49 (opParameters -> empty .)


state 42

    (18) main -> errorMain MAIN saveMain . { opVars body }

    {               shift and go to state 52


state 43

    (12) type -> errorType INT .

    ID              reduce using rule 12 (type -> errorType INT .)
    {               reduce using rule 12 (type -> errorType INT .)
    [               reduce using rule 12 (type -> errorType INT .)
    )               reduce using rule 12 (type -> errorType INT .)
    :               reduce using rule 12 (type -> errorType INT .)


state 44

    (54) basicDeclare -> saveType type errorBasicDeclare . ID cyTypeParam saveID ; cyDeclare

    ID              shift and go to state 53


state 45

    (58) dictDeclare -> errorDictDeclare DICT ID . dict ; cyDeclare
    (97) dict -> . errorDict ( type : type )
    (98) errorDict -> .

    (               reduce using rule 98 (errorDict -> .)

    dict                           shift and go to state 55
    errorDict                      shift and go to state 54

state 46

    (56) structDeclare -> errorStructDeclare STRUCT ID . struct ; cyDeclare
    (87) struct -> . structType [ CTED ] optionalMatrix
    (88) structType -> . type
    (89) structType -> . DICT dict
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    DICT            shift and go to state 58
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    structType                     shift and go to state 56
    struct                         shift and go to state 57
    errorType                      shift and go to state 33
    type                           shift and go to state 59

state 47

    (51) opReturns -> errorOpReturns . RETURNS type { opVars body return

    RETURNS         shift and go to state 60


state 48

    (52) opReturns -> { . opVars body
    (5) opVars -> . vars
    (6) opVars -> . empty
    (9) vars -> . errorVars VARS declare
    (144) empty -> .
    (11) errorVars -> .

    ID              reduce using rule 144 (empty -> .)
    IF              reduce using rule 144 (empty -> .)
    FOR             reduce using rule 144 (empty -> .)
    WHILE           reduce using rule 144 (empty -> .)
    }               reduce using rule 144 (empty -> .)
    VARS            reduce using rule 11 (errorVars -> .)

    vars                           shift and go to state 8
    opVars                         shift and go to state 61
    errorVars                      shift and go to state 10
    empty                          shift and go to state 11

state 49

    (44) function -> errorFunction FUNC ID opParameters opReturns . }

    }               shift and go to state 62


state 50

    (48) opParameters -> ( param . ) errorOpParameters

    )               shift and go to state 63


state 51

    (39) param -> type . errorParam ID cyTypeParam cyParam
    (40) errorParam -> .

    ID              reduce using rule 40 (errorParam -> .)

    errorParam                     shift and go to state 64

state 52

    (18) main -> errorMain MAIN saveMain { . opVars body }
    (5) opVars -> . vars
    (6) opVars -> . empty
    (9) vars -> . errorVars VARS declare
    (144) empty -> .
    (11) errorVars -> .

    }               reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    IF              reduce using rule 144 (empty -> .)
    FOR             reduce using rule 144 (empty -> .)
    WHILE           reduce using rule 144 (empty -> .)
    VARS            reduce using rule 11 (errorVars -> .)

    vars                           shift and go to state 8
    opVars                         shift and go to state 65
    errorVars                      shift and go to state 10
    empty                          shift and go to state 11

state 53

    (54) basicDeclare -> saveType type errorBasicDeclare ID . cyTypeParam saveID ; cyDeclare
    (60) cyTypeParam -> . , saveID ID cyTypeParam
    (61) cyTypeParam -> . empty
    (144) empty -> .

    ,               shift and go to state 66
    ;               reduce using rule 144 (empty -> .)

    empty                          shift and go to state 67
    cyTypeParam                    shift and go to state 68

state 54

    (97) dict -> errorDict . ( type : type )

    (               shift and go to state 69


state 55

    (58) dictDeclare -> errorDictDeclare DICT ID dict . ; cyDeclare

    ;               shift and go to state 70


state 56

    (87) struct -> structType . [ CTED ] optionalMatrix

    [               shift and go to state 71


state 57

    (56) structDeclare -> errorStructDeclare STRUCT ID struct . ; cyDeclare

    ;               shift and go to state 72


state 58

    (89) structType -> DICT . dict
    (97) dict -> . errorDict ( type : type )
    (98) errorDict -> .

    (               reduce using rule 98 (errorDict -> .)

    dict                           shift and go to state 73
    errorDict                      shift and go to state 54

state 59

    (88) structType -> type .

    [               reduce using rule 88 (structType -> type .)


state 60

    (51) opReturns -> errorOpReturns RETURNS . type { opVars body return
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    errorType                      shift and go to state 33
    type                           shift and go to state 74

state 61

    (52) opReturns -> { opVars . body
    (64) body -> . errorBody cyInstruction
    (65) body -> . empty
    (66) errorBody -> .
    (144) empty -> .

    ID              reduce using rule 66 (errorBody -> .)
    IF              reduce using rule 66 (errorBody -> .)
    FOR             reduce using rule 66 (errorBody -> .)
    WHILE           reduce using rule 66 (errorBody -> .)
    }               reduce using rule 144 (empty -> .)

    body                           shift and go to state 75
    empty                          shift and go to state 77
    errorBody                      shift and go to state 76

state 62

    (44) function -> errorFunction FUNC ID opParameters opReturns } .

    FUNC            reduce using rule 44 (function -> errorFunction FUNC ID opParameters opReturns } .)
    MAIN            reduce using rule 44 (function -> errorFunction FUNC ID opParameters opReturns } .)


state 63

    (48) opParameters -> ( param ) . errorOpParameters
    (50) errorOpParameters -> .

    {               reduce using rule 50 (errorOpParameters -> .)
    RETURNS         reduce using rule 50 (errorOpParameters -> .)

    errorOpParameters              shift and go to state 78

state 64

    (39) param -> type errorParam . ID cyTypeParam cyParam

    ID              shift and go to state 79


state 65

    (18) main -> errorMain MAIN saveMain { opVars . body }
    (64) body -> . errorBody cyInstruction
    (65) body -> . empty
    (66) errorBody -> .
    (144) empty -> .

    ID              reduce using rule 66 (errorBody -> .)
    IF              reduce using rule 66 (errorBody -> .)
    FOR             reduce using rule 66 (errorBody -> .)
    WHILE           reduce using rule 66 (errorBody -> .)
    }               reduce using rule 144 (empty -> .)

    body                           shift and go to state 80
    errorBody                      shift and go to state 76
    empty                          shift and go to state 77

state 66

    (60) cyTypeParam -> , . saveID ID cyTypeParam
    (10) saveID -> .

    ID              reduce using rule 10 (saveID -> .)

    saveID                         shift and go to state 81

state 67

    (61) cyTypeParam -> empty .

    ;               reduce using rule 61 (cyTypeParam -> empty .)
    )               reduce using rule 61 (cyTypeParam -> empty .)


state 68

    (54) basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam . saveID ; cyDeclare
    (10) saveID -> .

    ;               reduce using rule 10 (saveID -> .)

    saveID                         shift and go to state 82

state 69

    (97) dict -> errorDict ( . type : type )
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    errorType                      shift and go to state 33
    type                           shift and go to state 83

state 70

    (58) dictDeclare -> errorDictDeclare DICT ID dict ; . cyDeclare
    (62) cyDeclare -> . declare
    (63) cyDeclare -> . empty
    (26) declare -> . basicDeclare
    (27) declare -> . structDeclare
    (28) declare -> . dictDeclare
    (144) empty -> .
    (54) basicDeclare -> . saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (56) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (58) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (2) saveType -> .
    (57) errorStructDeclare -> .
    (59) errorDictDeclare -> .

    MAIN            reduce using rule 144 (empty -> .)
    FUNC            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    IF              reduce using rule 144 (empty -> .)
    FOR             reduce using rule 144 (empty -> .)
    WHILE           reduce using rule 144 (empty -> .)
    }               reduce using rule 144 (empty -> .)
    RETURN          reduce using rule 144 (empty -> .)
    FLOAT           reduce using rule 2 (saveType -> .)
    STRING          reduce using rule 2 (saveType -> .)
    OBJECT          reduce using rule 2 (saveType -> .)
    BOOL            reduce using rule 2 (saveType -> .)
    INT             reduce using rule 2 (saveType -> .)
    STRUCT          reduce using rule 57 (errorStructDeclare -> .)
    DICT            reduce using rule 59 (errorDictDeclare -> .)

    dictDeclare                    shift and go to state 21
    cyDeclare                      shift and go to state 84
    saveType                       shift and go to state 22
    structDeclare                  shift and go to state 24
    errorDictDeclare               shift and go to state 23
    errorStructDeclare             shift and go to state 25
    basicDeclare                   shift and go to state 26
    declare                        shift and go to state 85
    empty                          shift and go to state 86

state 71

    (87) struct -> structType [ . CTED ] optionalMatrix

    CTED            shift and go to state 87


state 72

    (56) structDeclare -> errorStructDeclare STRUCT ID struct ; . cyDeclare
    (62) cyDeclare -> . declare
    (63) cyDeclare -> . empty
    (26) declare -> . basicDeclare
    (27) declare -> . structDeclare
    (28) declare -> . dictDeclare
    (144) empty -> .
    (54) basicDeclare -> . saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (56) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (58) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (2) saveType -> .
    (57) errorStructDeclare -> .
    (59) errorDictDeclare -> .

    MAIN            reduce using rule 144 (empty -> .)
    FUNC            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    IF              reduce using rule 144 (empty -> .)
    FOR             reduce using rule 144 (empty -> .)
    WHILE           reduce using rule 144 (empty -> .)
    }               reduce using rule 144 (empty -> .)
    RETURN          reduce using rule 144 (empty -> .)
    FLOAT           reduce using rule 2 (saveType -> .)
    STRING          reduce using rule 2 (saveType -> .)
    OBJECT          reduce using rule 2 (saveType -> .)
    BOOL            reduce using rule 2 (saveType -> .)
    INT             reduce using rule 2 (saveType -> .)
    STRUCT          reduce using rule 57 (errorStructDeclare -> .)
    DICT            reduce using rule 59 (errorDictDeclare -> .)

    dictDeclare                    shift and go to state 21
    cyDeclare                      shift and go to state 88
    saveType                       shift and go to state 22
    errorDictDeclare               shift and go to state 23
    structDeclare                  shift and go to state 24
    basicDeclare                   shift and go to state 26
    declare                        shift and go to state 85
    empty                          shift and go to state 86
    errorStructDeclare             shift and go to state 25

state 73

    (89) structType -> DICT dict .

    [               reduce using rule 89 (structType -> DICT dict .)


state 74

    (51) opReturns -> errorOpReturns RETURNS type . { opVars body return

    {               shift and go to state 89


state 75

    (52) opReturns -> { opVars body .

    }               reduce using rule 52 (opReturns -> { opVars body .)


state 76

    (64) body -> errorBody . cyInstruction
    (67) cyInstruction -> . instr body
    (21) instr -> . basicStatements ;
    (22) instr -> . condition
    (23) instr -> . cycle
    (24) basicStatements -> . assign
    (25) basicStatements -> . funcCall
    (92) condition -> . errorCondition IF ( expresion ) { body } optionalElse
    (68) cycle -> . forCycle
    (69) cycle -> . whileCycle
    (74) assign -> . ID errorAssign assignOptions
    (82) funcCall -> . ID ( opParamCall )
    (93) errorCondition -> .
    (72) forCycle -> . errorForCycle FOR ( assign ; expresion ; assign ) { body }
    (70) whileCycle -> . errorWhileCycle WHILE ( expresion ) { body }
    (73) errorForCycle -> .
    (71) errorWhileCycle -> .

    ID              shift and go to state 99
    IF              reduce using rule 93 (errorCondition -> .)
    FOR             reduce using rule 73 (errorForCycle -> .)
    WHILE           reduce using rule 71 (errorWhileCycle -> .)

    errorWhileCycle                shift and go to state 93
    funcCall                       shift and go to state 100
    instr                          shift and go to state 90
    forCycle                       shift and go to state 92
    assign                         shift and go to state 102
    whileCycle                     shift and go to state 91
    basicStatements                shift and go to state 97
    errorForCycle                  shift and go to state 98
    errorCondition                 shift and go to state 101
    cyInstruction                  shift and go to state 94
    condition                      shift and go to state 95
    cycle                          shift and go to state 96

state 77

    (65) body -> empty .

    }               reduce using rule 65 (body -> empty .)
    RETURN          reduce using rule 65 (body -> empty .)


state 78

    (48) opParameters -> ( param ) errorOpParameters .

    {               reduce using rule 48 (opParameters -> ( param ) errorOpParameters .)
    RETURNS         reduce using rule 48 (opParameters -> ( param ) errorOpParameters .)


state 79

    (39) param -> type errorParam ID . cyTypeParam cyParam
    (60) cyTypeParam -> . , saveID ID cyTypeParam
    (61) cyTypeParam -> . empty
    (144) empty -> .

    ,               shift and go to state 66
    ;               reduce using rule 144 (empty -> .)
    )               reduce using rule 144 (empty -> .)

    cyTypeParam                    shift and go to state 103
    empty                          shift and go to state 67

state 80

    (18) main -> errorMain MAIN saveMain { opVars body . }

    }               shift and go to state 104


state 81

    (60) cyTypeParam -> , saveID . ID cyTypeParam

    ID              shift and go to state 105


state 82

    (54) basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID . ; cyDeclare

    ;               shift and go to state 106


state 83

    (97) dict -> errorDict ( type . : type )

    :               shift and go to state 107


state 84

    (58) dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .

    MAIN            reduce using rule 58 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    FUNC            reduce using rule 58 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    ID              reduce using rule 58 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    IF              reduce using rule 58 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    FOR             reduce using rule 58 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    WHILE           reduce using rule 58 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    }               reduce using rule 58 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    RETURN          reduce using rule 58 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)


state 85

    (62) cyDeclare -> declare .

    MAIN            reduce using rule 62 (cyDeclare -> declare .)
    FUNC            reduce using rule 62 (cyDeclare -> declare .)
    ID              reduce using rule 62 (cyDeclare -> declare .)
    IF              reduce using rule 62 (cyDeclare -> declare .)
    FOR             reduce using rule 62 (cyDeclare -> declare .)
    WHILE           reduce using rule 62 (cyDeclare -> declare .)
    }               reduce using rule 62 (cyDeclare -> declare .)
    RETURN          reduce using rule 62 (cyDeclare -> declare .)


state 86

    (63) cyDeclare -> empty .

    MAIN            reduce using rule 63 (cyDeclare -> empty .)
    FUNC            reduce using rule 63 (cyDeclare -> empty .)
    ID              reduce using rule 63 (cyDeclare -> empty .)
    IF              reduce using rule 63 (cyDeclare -> empty .)
    FOR             reduce using rule 63 (cyDeclare -> empty .)
    WHILE           reduce using rule 63 (cyDeclare -> empty .)
    }               reduce using rule 63 (cyDeclare -> empty .)
    RETURN          reduce using rule 63 (cyDeclare -> empty .)


state 87

    (87) struct -> structType [ CTED . ] optionalMatrix

    ]               shift and go to state 108


state 88

    (56) structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .

    MAIN            reduce using rule 56 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    FUNC            reduce using rule 56 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    ID              reduce using rule 56 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    IF              reduce using rule 56 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    FOR             reduce using rule 56 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    WHILE           reduce using rule 56 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    }               reduce using rule 56 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    RETURN          reduce using rule 56 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)


state 89

    (51) opReturns -> errorOpReturns RETURNS type { . opVars body return
    (5) opVars -> . vars
    (6) opVars -> . empty
    (9) vars -> . errorVars VARS declare
    (144) empty -> .
    (11) errorVars -> .

    RETURN          reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    IF              reduce using rule 144 (empty -> .)
    FOR             reduce using rule 144 (empty -> .)
    WHILE           reduce using rule 144 (empty -> .)
    VARS            reduce using rule 11 (errorVars -> .)

    vars                           shift and go to state 8
    opVars                         shift and go to state 109
    errorVars                      shift and go to state 10
    empty                          shift and go to state 11

state 90

    (67) cyInstruction -> instr . body
    (64) body -> . errorBody cyInstruction
    (65) body -> . empty
    (66) errorBody -> .
    (144) empty -> .

    ID              reduce using rule 66 (errorBody -> .)
    IF              reduce using rule 66 (errorBody -> .)
    FOR             reduce using rule 66 (errorBody -> .)
    WHILE           reduce using rule 66 (errorBody -> .)
    }               reduce using rule 144 (empty -> .)
    RETURN          reduce using rule 144 (empty -> .)

    body                           shift and go to state 110
    errorBody                      shift and go to state 76
    empty                          shift and go to state 77

state 91

    (69) cycle -> whileCycle .

    ID              reduce using rule 69 (cycle -> whileCycle .)
    IF              reduce using rule 69 (cycle -> whileCycle .)
    FOR             reduce using rule 69 (cycle -> whileCycle .)
    WHILE           reduce using rule 69 (cycle -> whileCycle .)
    }               reduce using rule 69 (cycle -> whileCycle .)
    RETURN          reduce using rule 69 (cycle -> whileCycle .)


state 92

    (68) cycle -> forCycle .

    ID              reduce using rule 68 (cycle -> forCycle .)
    IF              reduce using rule 68 (cycle -> forCycle .)
    FOR             reduce using rule 68 (cycle -> forCycle .)
    WHILE           reduce using rule 68 (cycle -> forCycle .)
    }               reduce using rule 68 (cycle -> forCycle .)
    RETURN          reduce using rule 68 (cycle -> forCycle .)


state 93

    (70) whileCycle -> errorWhileCycle . WHILE ( expresion ) { body }

    WHILE           shift and go to state 111


state 94

    (64) body -> errorBody cyInstruction .

    }               reduce using rule 64 (body -> errorBody cyInstruction .)
    RETURN          reduce using rule 64 (body -> errorBody cyInstruction .)


state 95

    (22) instr -> condition .

    ID              reduce using rule 22 (instr -> condition .)
    IF              reduce using rule 22 (instr -> condition .)
    FOR             reduce using rule 22 (instr -> condition .)
    WHILE           reduce using rule 22 (instr -> condition .)
    }               reduce using rule 22 (instr -> condition .)
    RETURN          reduce using rule 22 (instr -> condition .)


state 96

    (23) instr -> cycle .

    ID              reduce using rule 23 (instr -> cycle .)
    IF              reduce using rule 23 (instr -> cycle .)
    FOR             reduce using rule 23 (instr -> cycle .)
    WHILE           reduce using rule 23 (instr -> cycle .)
    }               reduce using rule 23 (instr -> cycle .)
    RETURN          reduce using rule 23 (instr -> cycle .)


state 97

    (21) instr -> basicStatements . ;

    ;               shift and go to state 112


state 98

    (72) forCycle -> errorForCycle . FOR ( assign ; expresion ; assign ) { body }

    FOR             shift and go to state 113


state 99

    (74) assign -> ID . errorAssign assignOptions
    (82) funcCall -> ID . ( opParamCall )
    (75) errorAssign -> .

    (               shift and go to state 114
    [               reduce using rule 75 (errorAssign -> .)
    =               reduce using rule 75 (errorAssign -> .)

    errorAssign                    shift and go to state 115

state 100

    (25) basicStatements -> funcCall .

    ;               reduce using rule 25 (basicStatements -> funcCall .)


state 101

    (92) condition -> errorCondition . IF ( expresion ) { body } optionalElse

    IF              shift and go to state 116


state 102

    (24) basicStatements -> assign .

    ;               reduce using rule 24 (basicStatements -> assign .)


state 103

    (39) param -> type errorParam ID cyTypeParam . cyParam
    (41) cyParam -> . errorCyParam ; param
    (42) cyParam -> . empty
    (43) errorCyParam -> .
    (144) empty -> .

    ;               reduce using rule 43 (errorCyParam -> .)
    )               reduce using rule 144 (empty -> .)

    cyParam                        shift and go to state 118
    errorCyParam                   shift and go to state 117
    empty                          shift and go to state 119

state 104

    (18) main -> errorMain MAIN saveMain { opVars body } .

    }               reduce using rule 18 (main -> errorMain MAIN saveMain { opVars body } .)


state 105

    (60) cyTypeParam -> , saveID ID . cyTypeParam
    (60) cyTypeParam -> . , saveID ID cyTypeParam
    (61) cyTypeParam -> . empty
    (144) empty -> .

    ,               shift and go to state 66
    ;               reduce using rule 144 (empty -> .)
    )               reduce using rule 144 (empty -> .)

    cyTypeParam                    shift and go to state 120
    empty                          shift and go to state 67

state 106

    (54) basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; . cyDeclare
    (62) cyDeclare -> . declare
    (63) cyDeclare -> . empty
    (26) declare -> . basicDeclare
    (27) declare -> . structDeclare
    (28) declare -> . dictDeclare
    (144) empty -> .
    (54) basicDeclare -> . saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (56) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (58) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (2) saveType -> .
    (57) errorStructDeclare -> .
    (59) errorDictDeclare -> .

    MAIN            reduce using rule 144 (empty -> .)
    FUNC            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    IF              reduce using rule 144 (empty -> .)
    FOR             reduce using rule 144 (empty -> .)
    WHILE           reduce using rule 144 (empty -> .)
    }               reduce using rule 144 (empty -> .)
    RETURN          reduce using rule 144 (empty -> .)
    FLOAT           reduce using rule 2 (saveType -> .)
    STRING          reduce using rule 2 (saveType -> .)
    OBJECT          reduce using rule 2 (saveType -> .)
    BOOL            reduce using rule 2 (saveType -> .)
    INT             reduce using rule 2 (saveType -> .)
    STRUCT          reduce using rule 57 (errorStructDeclare -> .)
    DICT            reduce using rule 59 (errorDictDeclare -> .)

    dictDeclare                    shift and go to state 21
    cyDeclare                      shift and go to state 121
    basicDeclare                   shift and go to state 26
    saveType                       shift and go to state 22
    errorDictDeclare               shift and go to state 23
    empty                          shift and go to state 86
    structDeclare                  shift and go to state 24
    errorStructDeclare             shift and go to state 25
    declare                        shift and go to state 85

state 107

    (97) dict -> errorDict ( type : . type )
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    errorType                      shift and go to state 33
    type                           shift and go to state 122

state 108

    (87) struct -> structType [ CTED ] . optionalMatrix
    (90) optionalMatrix -> . [ CTED ]
    (91) optionalMatrix -> . empty
    (144) empty -> .

    [               shift and go to state 124
    ;               reduce using rule 144 (empty -> .)

    empty                          shift and go to state 125
    optionalMatrix                 shift and go to state 123

state 109

    (51) opReturns -> errorOpReturns RETURNS type { opVars . body return
    (64) body -> . errorBody cyInstruction
    (65) body -> . empty
    (66) errorBody -> .
    (144) empty -> .

    ID              reduce using rule 66 (errorBody -> .)
    IF              reduce using rule 66 (errorBody -> .)
    FOR             reduce using rule 66 (errorBody -> .)
    WHILE           reduce using rule 66 (errorBody -> .)
    RETURN          reduce using rule 144 (empty -> .)

    body                           shift and go to state 126
    errorBody                      shift and go to state 76
    empty                          shift and go to state 77

state 110

    (67) cyInstruction -> instr body .

    }               reduce using rule 67 (cyInstruction -> instr body .)
    RETURN          reduce using rule 67 (cyInstruction -> instr body .)


state 111

    (70) whileCycle -> errorWhileCycle WHILE . ( expresion ) { body }

    (               shift and go to state 127


state 112

    (21) instr -> basicStatements ; .

    ID              reduce using rule 21 (instr -> basicStatements ; .)
    IF              reduce using rule 21 (instr -> basicStatements ; .)
    FOR             reduce using rule 21 (instr -> basicStatements ; .)
    WHILE           reduce using rule 21 (instr -> basicStatements ; .)
    }               reduce using rule 21 (instr -> basicStatements ; .)
    RETURN          reduce using rule 21 (instr -> basicStatements ; .)


state 113

    (72) forCycle -> errorForCycle FOR . ( assign ; expresion ; assign ) { body }

    (               shift and go to state 128


state 114

    (82) funcCall -> ID ( . opParamCall )
    (83) opParamCall -> . expresion cyParamCall
    (84) opParamCall -> . empty
    (99) expresion -> . sExp cyExpresion errorExpresion
    (144) empty -> .
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    )               reduce using rule 144 (empty -> .)
    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 136
    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    fact                           shift and go to state 144
    exp                            shift and go to state 143
    opParamCall                    shift and go to state 129
    empty                          shift and go to state 133

state 115

    (74) assign -> ID errorAssign . assignOptions
    (76) assignOptions -> . init
    (77) assignOptions -> . initDict
    (78) assignOptions -> . [ expresion ] assignMatrix init
    (29) init -> . = initWith errorInit
    (33) initDict -> . = ( dictType : dictType ) errorInitDict

    [               shift and go to state 149
    =               shift and go to state 145

    initDict                       shift and go to state 146
    assignOptions                  shift and go to state 147
    init                           shift and go to state 148

state 116

    (92) condition -> errorCondition IF . ( expresion ) { body } optionalElse

    (               shift and go to state 150


state 117

    (41) cyParam -> errorCyParam . ; param

    ;               shift and go to state 151


state 118

    (39) param -> type errorParam ID cyTypeParam cyParam .

    )               reduce using rule 39 (param -> type errorParam ID cyTypeParam cyParam .)


state 119

    (42) cyParam -> empty .

    )               reduce using rule 42 (cyParam -> empty .)


state 120

    (60) cyTypeParam -> , saveID ID cyTypeParam .

    ;               reduce using rule 60 (cyTypeParam -> , saveID ID cyTypeParam .)
    )               reduce using rule 60 (cyTypeParam -> , saveID ID cyTypeParam .)


state 121

    (54) basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .

    MAIN            reduce using rule 54 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    FUNC            reduce using rule 54 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    ID              reduce using rule 54 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    IF              reduce using rule 54 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    FOR             reduce using rule 54 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    WHILE           reduce using rule 54 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    }               reduce using rule 54 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    RETURN          reduce using rule 54 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)


state 122

    (97) dict -> errorDict ( type : type . )

    )               shift and go to state 152


state 123

    (87) struct -> structType [ CTED ] optionalMatrix .

    ;               reduce using rule 87 (struct -> structType [ CTED ] optionalMatrix .)


state 124

    (90) optionalMatrix -> [ . CTED ]

    CTED            shift and go to state 153


state 125

    (91) optionalMatrix -> empty .

    ;               reduce using rule 91 (optionalMatrix -> empty .)


state 126

    (51) opReturns -> errorOpReturns RETURNS type { opVars body . return
    (46) return -> . errorReturn RETURN expresion ;
    (47) errorReturn -> .

    RETURN          reduce using rule 47 (errorReturn -> .)

    return                         shift and go to state 154
    errorReturn                    shift and go to state 155

state 127

    (70) whileCycle -> errorWhileCycle WHILE ( . expresion ) { body }
    (99) expresion -> . sExp cyExpresion errorExpresion
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 156
    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 128

    (72) forCycle -> errorForCycle FOR ( . assign ; expresion ; assign ) { body }
    (74) assign -> . ID errorAssign assignOptions

    ID              shift and go to state 157

    assign                         shift and go to state 158

state 129

    (82) funcCall -> ID ( opParamCall . )

    )               shift and go to state 159


state 130

    (142) cte -> TRUE .

    *               reduce using rule 142 (cte -> TRUE .)
    /               reduce using rule 142 (cte -> TRUE .)
    +               reduce using rule 142 (cte -> TRUE .)
    -               reduce using rule 142 (cte -> TRUE .)
    EQ              reduce using rule 142 (cte -> TRUE .)
    DIF             reduce using rule 142 (cte -> TRUE .)
    LTOEQ           reduce using rule 142 (cte -> TRUE .)
    GTOEQ           reduce using rule 142 (cte -> TRUE .)
    >               reduce using rule 142 (cte -> TRUE .)
    <               reduce using rule 142 (cte -> TRUE .)
    AND             reduce using rule 142 (cte -> TRUE .)
    OR              reduce using rule 142 (cte -> TRUE .)
    )               reduce using rule 142 (cte -> TRUE .)
    :               reduce using rule 142 (cte -> TRUE .)
    ]               reduce using rule 142 (cte -> TRUE .)
    ,               reduce using rule 142 (cte -> TRUE .)
    ;               reduce using rule 142 (cte -> TRUE .)


state 131

    (125) fact -> ( . expresion )
    (99) expresion -> . sExp cyExpresion errorExpresion
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 160
    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 132

    (99) expresion -> sExp . cyExpresion errorExpresion
    (101) cyExpresion -> . AND expresion
    (102) cyExpresion -> . OR expresion
    (103) cyExpresion -> . empty
    (144) empty -> .

    AND             shift and go to state 161
    OR              shift and go to state 163
    ,               reduce using rule 144 (empty -> .)
    )               reduce using rule 144 (empty -> .)
    ;               reduce using rule 144 (empty -> .)
    ]               reduce using rule 144 (empty -> .)

    cyExpresion                    shift and go to state 162
    empty                          shift and go to state 164

state 133

    (84) opParamCall -> empty .

    )               reduce using rule 84 (opParamCall -> empty .)


state 134

    (140) cte -> CTED .

    *               reduce using rule 140 (cte -> CTED .)
    /               reduce using rule 140 (cte -> CTED .)
    +               reduce using rule 140 (cte -> CTED .)
    -               reduce using rule 140 (cte -> CTED .)
    EQ              reduce using rule 140 (cte -> CTED .)
    DIF             reduce using rule 140 (cte -> CTED .)
    LTOEQ           reduce using rule 140 (cte -> CTED .)
    GTOEQ           reduce using rule 140 (cte -> CTED .)
    >               reduce using rule 140 (cte -> CTED .)
    <               reduce using rule 140 (cte -> CTED .)
    AND             reduce using rule 140 (cte -> CTED .)
    OR              reduce using rule 140 (cte -> CTED .)
    )               reduce using rule 140 (cte -> CTED .)
    :               reduce using rule 140 (cte -> CTED .)
    ]               reduce using rule 140 (cte -> CTED .)
    ,               reduce using rule 140 (cte -> CTED .)
    ;               reduce using rule 140 (cte -> CTED .)


state 135

    (126) fact -> ID . opAccess errorOpAccess
    (82) funcCall -> ID . ( opParamCall )
    (128) opAccess -> . opStruct
    (129) opAccess -> . opDictionary
    (130) opAccess -> . empty
    (132) opStruct -> . errorOpStruct [ expresion ] opMatrix
    (137) opDictionary -> . . dictIndex
    (144) empty -> .
    (133) errorOpStruct -> .

    (               shift and go to state 114
    .               shift and go to state 169
    *               reduce using rule 144 (empty -> .)
    /               reduce using rule 144 (empty -> .)
    +               reduce using rule 144 (empty -> .)
    -               reduce using rule 144 (empty -> .)
    EQ              reduce using rule 144 (empty -> .)
    DIF             reduce using rule 144 (empty -> .)
    LTOEQ           reduce using rule 144 (empty -> .)
    GTOEQ           reduce using rule 144 (empty -> .)
    >               reduce using rule 144 (empty -> .)
    <               reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    ,               reduce using rule 144 (empty -> .)
    )               reduce using rule 144 (empty -> .)
    ]               reduce using rule 144 (empty -> .)
    ;               reduce using rule 144 (empty -> .)
    [               reduce using rule 133 (errorOpStruct -> .)

    errorOpStruct                  shift and go to state 165
    opDictionary                   shift and go to state 170
    opStruct                       shift and go to state 166
    opAccess                       shift and go to state 167
    empty                          shift and go to state 168

state 136

    (83) opParamCall -> expresion . cyParamCall
    (85) cyParamCall -> . , expresion cyParamCall
    (86) cyParamCall -> . empty
    (144) empty -> .

    ,               shift and go to state 172
    )               reduce using rule 144 (empty -> .)

    cyParamCall                    shift and go to state 171
    empty                          shift and go to state 173

state 137

    (122) fact -> CTES .

    *               reduce using rule 122 (fact -> CTES .)
    /               reduce using rule 122 (fact -> CTES .)
    +               reduce using rule 122 (fact -> CTES .)
    -               reduce using rule 122 (fact -> CTES .)
    AND             reduce using rule 122 (fact -> CTES .)
    OR              reduce using rule 122 (fact -> CTES .)
    ,               reduce using rule 122 (fact -> CTES .)
    )               reduce using rule 122 (fact -> CTES .)
    ;               reduce using rule 122 (fact -> CTES .)
    ]               reduce using rule 122 (fact -> CTES .)
    EQ              reduce using rule 122 (fact -> CTES .)
    DIF             reduce using rule 122 (fact -> CTES .)
    LTOEQ           reduce using rule 122 (fact -> CTES .)
    GTOEQ           reduce using rule 122 (fact -> CTES .)
    >               reduce using rule 122 (fact -> CTES .)
    <               reduce using rule 122 (fact -> CTES .)


state 138

    (113) exp -> term . errorCyExp cyExp
    (117) errorCyExp -> .

    +               reduce using rule 117 (errorCyExp -> .)
    -               reduce using rule 117 (errorCyExp -> .)
    EQ              reduce using rule 117 (errorCyExp -> .)
    DIF             reduce using rule 117 (errorCyExp -> .)
    LTOEQ           reduce using rule 117 (errorCyExp -> .)
    GTOEQ           reduce using rule 117 (errorCyExp -> .)
    >               reduce using rule 117 (errorCyExp -> .)
    <               reduce using rule 117 (errorCyExp -> .)
    AND             reduce using rule 117 (errorCyExp -> .)
    OR              reduce using rule 117 (errorCyExp -> .)
    ,               reduce using rule 117 (errorCyExp -> .)
    )               reduce using rule 117 (errorCyExp -> .)
    ;               reduce using rule 117 (errorCyExp -> .)
    ]               reduce using rule 117 (errorCyExp -> .)

    errorCyExp                     shift and go to state 174

state 139

    (143) cte -> FALSE .

    *               reduce using rule 143 (cte -> FALSE .)
    /               reduce using rule 143 (cte -> FALSE .)
    +               reduce using rule 143 (cte -> FALSE .)
    -               reduce using rule 143 (cte -> FALSE .)
    EQ              reduce using rule 143 (cte -> FALSE .)
    DIF             reduce using rule 143 (cte -> FALSE .)
    LTOEQ           reduce using rule 143 (cte -> FALSE .)
    GTOEQ           reduce using rule 143 (cte -> FALSE .)
    >               reduce using rule 143 (cte -> FALSE .)
    <               reduce using rule 143 (cte -> FALSE .)
    AND             reduce using rule 143 (cte -> FALSE .)
    OR              reduce using rule 143 (cte -> FALSE .)
    )               reduce using rule 143 (cte -> FALSE .)
    :               reduce using rule 143 (cte -> FALSE .)
    ]               reduce using rule 143 (cte -> FALSE .)
    ,               reduce using rule 143 (cte -> FALSE .)
    ;               reduce using rule 143 (cte -> FALSE .)


state 140

    (124) fact -> funcCall .

    *               reduce using rule 124 (fact -> funcCall .)
    /               reduce using rule 124 (fact -> funcCall .)
    +               reduce using rule 124 (fact -> funcCall .)
    -               reduce using rule 124 (fact -> funcCall .)
    AND             reduce using rule 124 (fact -> funcCall .)
    OR              reduce using rule 124 (fact -> funcCall .)
    ,               reduce using rule 124 (fact -> funcCall .)
    )               reduce using rule 124 (fact -> funcCall .)
    ;               reduce using rule 124 (fact -> funcCall .)
    ]               reduce using rule 124 (fact -> funcCall .)
    EQ              reduce using rule 124 (fact -> funcCall .)
    DIF             reduce using rule 124 (fact -> funcCall .)
    LTOEQ           reduce using rule 124 (fact -> funcCall .)
    GTOEQ           reduce using rule 124 (fact -> funcCall .)
    >               reduce using rule 124 (fact -> funcCall .)
    <               reduce using rule 124 (fact -> funcCall .)


state 141

    (123) fact -> cte .

    *               reduce using rule 123 (fact -> cte .)
    /               reduce using rule 123 (fact -> cte .)
    +               reduce using rule 123 (fact -> cte .)
    -               reduce using rule 123 (fact -> cte .)
    AND             reduce using rule 123 (fact -> cte .)
    OR              reduce using rule 123 (fact -> cte .)
    ,               reduce using rule 123 (fact -> cte .)
    )               reduce using rule 123 (fact -> cte .)
    ;               reduce using rule 123 (fact -> cte .)
    ]               reduce using rule 123 (fact -> cte .)
    EQ              reduce using rule 123 (fact -> cte .)
    DIF             reduce using rule 123 (fact -> cte .)
    LTOEQ           reduce using rule 123 (fact -> cte .)
    GTOEQ           reduce using rule 123 (fact -> cte .)
    >               reduce using rule 123 (fact -> cte .)
    <               reduce using rule 123 (fact -> cte .)


state 142

    (141) cte -> CTEF .

    *               reduce using rule 141 (cte -> CTEF .)
    /               reduce using rule 141 (cte -> CTEF .)
    +               reduce using rule 141 (cte -> CTEF .)
    -               reduce using rule 141 (cte -> CTEF .)
    EQ              reduce using rule 141 (cte -> CTEF .)
    DIF             reduce using rule 141 (cte -> CTEF .)
    LTOEQ           reduce using rule 141 (cte -> CTEF .)
    GTOEQ           reduce using rule 141 (cte -> CTEF .)
    >               reduce using rule 141 (cte -> CTEF .)
    <               reduce using rule 141 (cte -> CTEF .)
    AND             reduce using rule 141 (cte -> CTEF .)
    OR              reduce using rule 141 (cte -> CTEF .)
    )               reduce using rule 141 (cte -> CTEF .)
    :               reduce using rule 141 (cte -> CTEF .)
    ]               reduce using rule 141 (cte -> CTEF .)
    ,               reduce using rule 141 (cte -> CTEF .)
    ;               reduce using rule 141 (cte -> CTEF .)


state 143

    (104) sExp -> exp . errorOpSExp opSExp
    (112) errorOpSExp -> .

    EQ              reduce using rule 112 (errorOpSExp -> .)
    DIF             reduce using rule 112 (errorOpSExp -> .)
    LTOEQ           reduce using rule 112 (errorOpSExp -> .)
    GTOEQ           reduce using rule 112 (errorOpSExp -> .)
    >               reduce using rule 112 (errorOpSExp -> .)
    <               reduce using rule 112 (errorOpSExp -> .)
    AND             reduce using rule 112 (errorOpSExp -> .)
    OR              reduce using rule 112 (errorOpSExp -> .)
    ,               reduce using rule 112 (errorOpSExp -> .)
    )               reduce using rule 112 (errorOpSExp -> .)
    ;               reduce using rule 112 (errorOpSExp -> .)
    ]               reduce using rule 112 (errorOpSExp -> .)

    errorOpSExp                    shift and go to state 175

state 144

    (118) term -> fact . cyTerm
    (119) cyTerm -> . * errorFact fact
    (120) cyTerm -> . / fact
    (121) cyTerm -> . empty
    (144) empty -> .

    *               shift and go to state 176
    /               shift and go to state 177
    +               reduce using rule 144 (empty -> .)
    -               reduce using rule 144 (empty -> .)
    EQ              reduce using rule 144 (empty -> .)
    DIF             reduce using rule 144 (empty -> .)
    LTOEQ           reduce using rule 144 (empty -> .)
    GTOEQ           reduce using rule 144 (empty -> .)
    >               reduce using rule 144 (empty -> .)
    <               reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    ,               reduce using rule 144 (empty -> .)
    )               reduce using rule 144 (empty -> .)
    ;               reduce using rule 144 (empty -> .)
    ]               reduce using rule 144 (empty -> .)

    cyTerm                         shift and go to state 178
    empty                          shift and go to state 179

state 145

    (29) init -> = . initWith errorInit
    (33) initDict -> = . ( dictType : dictType ) errorInitDict
    (31) initWith -> . expresion
    (32) initWith -> . funcCall
    (99) expresion -> . sExp cyExpresion errorExpresion
    (82) funcCall -> . ID ( opParamCall )
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE

    (               shift and go to state 181
    ID              shift and go to state 182
    CTES            shift and go to state 137
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 183
    initWith                       shift and go to state 180
    funcCall                       shift and go to state 184
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    term                           shift and go to state 138
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 146

    (77) assignOptions -> initDict .

    ;               reduce using rule 77 (assignOptions -> initDict .)
    )               reduce using rule 77 (assignOptions -> initDict .)


state 147

    (74) assign -> ID errorAssign assignOptions .

    ;               reduce using rule 74 (assign -> ID errorAssign assignOptions .)
    )               reduce using rule 74 (assign -> ID errorAssign assignOptions .)


state 148

    (76) assignOptions -> init .

    ;               reduce using rule 76 (assignOptions -> init .)
    )               reduce using rule 76 (assignOptions -> init .)


state 149

    (78) assignOptions -> [ . expresion ] assignMatrix init
    (99) expresion -> . sExp cyExpresion errorExpresion
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 185
    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 150

    (92) condition -> errorCondition IF ( . expresion ) { body } optionalElse
    (99) expresion -> . sExp cyExpresion errorExpresion
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 186
    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 151

    (41) cyParam -> errorCyParam ; . param
    (39) param -> . type errorParam ID cyTypeParam cyParam
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    type                           shift and go to state 51
    errorType                      shift and go to state 33
    param                          shift and go to state 187

state 152

    (97) dict -> errorDict ( type : type ) .

    [               reduce using rule 97 (dict -> errorDict ( type : type ) .)
    ;               reduce using rule 97 (dict -> errorDict ( type : type ) .)


state 153

    (90) optionalMatrix -> [ CTED . ]

    ]               shift and go to state 188


state 154

    (51) opReturns -> errorOpReturns RETURNS type { opVars body return .

    }               reduce using rule 51 (opReturns -> errorOpReturns RETURNS type { opVars body return .)


state 155

    (46) return -> errorReturn . RETURN expresion ;

    RETURN          shift and go to state 189


state 156

    (70) whileCycle -> errorWhileCycle WHILE ( expresion . ) { body }

    )               shift and go to state 190


state 157

    (74) assign -> ID . errorAssign assignOptions
    (75) errorAssign -> .

    [               reduce using rule 75 (errorAssign -> .)
    =               reduce using rule 75 (errorAssign -> .)

    errorAssign                    shift and go to state 115

state 158

    (72) forCycle -> errorForCycle FOR ( assign . ; expresion ; assign ) { body }

    ;               shift and go to state 191


state 159

    (82) funcCall -> ID ( opParamCall ) .

    *               reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    /               reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    +               reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    -               reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    AND             reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    OR              reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    ,               reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    )               reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    ;               reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    ]               reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    EQ              reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    DIF             reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    LTOEQ           reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    GTOEQ           reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    >               reduce using rule 82 (funcCall -> ID ( opParamCall ) .)
    <               reduce using rule 82 (funcCall -> ID ( opParamCall ) .)


state 160

    (125) fact -> ( expresion . )

    )               shift and go to state 192


state 161

    (101) cyExpresion -> AND . expresion
    (99) expresion -> . sExp cyExpresion errorExpresion
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 193
    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 162

    (99) expresion -> sExp cyExpresion . errorExpresion
    (100) errorExpresion -> .

    ,               reduce using rule 100 (errorExpresion -> .)
    )               reduce using rule 100 (errorExpresion -> .)
    ;               reduce using rule 100 (errorExpresion -> .)
    ]               reduce using rule 100 (errorExpresion -> .)

    errorExpresion                 shift and go to state 194

state 163

    (102) cyExpresion -> OR . expresion
    (99) expresion -> . sExp cyExpresion errorExpresion
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 195
    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 164

    (103) cyExpresion -> empty .

    ,               reduce using rule 103 (cyExpresion -> empty .)
    )               reduce using rule 103 (cyExpresion -> empty .)
    ;               reduce using rule 103 (cyExpresion -> empty .)
    ]               reduce using rule 103 (cyExpresion -> empty .)


state 165

    (132) opStruct -> errorOpStruct . [ expresion ] opMatrix

    [               shift and go to state 196


state 166

    (128) opAccess -> opStruct .

    *               reduce using rule 128 (opAccess -> opStruct .)
    /               reduce using rule 128 (opAccess -> opStruct .)
    +               reduce using rule 128 (opAccess -> opStruct .)
    -               reduce using rule 128 (opAccess -> opStruct .)
    EQ              reduce using rule 128 (opAccess -> opStruct .)
    DIF             reduce using rule 128 (opAccess -> opStruct .)
    LTOEQ           reduce using rule 128 (opAccess -> opStruct .)
    GTOEQ           reduce using rule 128 (opAccess -> opStruct .)
    >               reduce using rule 128 (opAccess -> opStruct .)
    <               reduce using rule 128 (opAccess -> opStruct .)
    AND             reduce using rule 128 (opAccess -> opStruct .)
    OR              reduce using rule 128 (opAccess -> opStruct .)
    ;               reduce using rule 128 (opAccess -> opStruct .)
    )               reduce using rule 128 (opAccess -> opStruct .)
    ,               reduce using rule 128 (opAccess -> opStruct .)
    ]               reduce using rule 128 (opAccess -> opStruct .)


state 167

    (126) fact -> ID opAccess . errorOpAccess
    (131) errorOpAccess -> .

    *               reduce using rule 131 (errorOpAccess -> .)
    /               reduce using rule 131 (errorOpAccess -> .)
    +               reduce using rule 131 (errorOpAccess -> .)
    -               reduce using rule 131 (errorOpAccess -> .)
    EQ              reduce using rule 131 (errorOpAccess -> .)
    DIF             reduce using rule 131 (errorOpAccess -> .)
    LTOEQ           reduce using rule 131 (errorOpAccess -> .)
    GTOEQ           reduce using rule 131 (errorOpAccess -> .)
    >               reduce using rule 131 (errorOpAccess -> .)
    <               reduce using rule 131 (errorOpAccess -> .)
    AND             reduce using rule 131 (errorOpAccess -> .)
    OR              reduce using rule 131 (errorOpAccess -> .)
    ,               reduce using rule 131 (errorOpAccess -> .)
    )               reduce using rule 131 (errorOpAccess -> .)
    ;               reduce using rule 131 (errorOpAccess -> .)
    ]               reduce using rule 131 (errorOpAccess -> .)

    errorOpAccess                  shift and go to state 197

state 168

    (130) opAccess -> empty .

    *               reduce using rule 130 (opAccess -> empty .)
    /               reduce using rule 130 (opAccess -> empty .)
    +               reduce using rule 130 (opAccess -> empty .)
    -               reduce using rule 130 (opAccess -> empty .)
    EQ              reduce using rule 130 (opAccess -> empty .)
    DIF             reduce using rule 130 (opAccess -> empty .)
    LTOEQ           reduce using rule 130 (opAccess -> empty .)
    GTOEQ           reduce using rule 130 (opAccess -> empty .)
    >               reduce using rule 130 (opAccess -> empty .)
    <               reduce using rule 130 (opAccess -> empty .)
    AND             reduce using rule 130 (opAccess -> empty .)
    OR              reduce using rule 130 (opAccess -> empty .)
    ;               reduce using rule 130 (opAccess -> empty .)
    )               reduce using rule 130 (opAccess -> empty .)
    ,               reduce using rule 130 (opAccess -> empty .)
    ]               reduce using rule 130 (opAccess -> empty .)


state 169

    (137) opDictionary -> . . dictIndex
    (138) dictIndex -> . FIRST
    (139) dictIndex -> . LAST

    FIRST           shift and go to state 198
    LAST            shift and go to state 199

    dictIndex                      shift and go to state 200

state 170

    (129) opAccess -> opDictionary .

    *               reduce using rule 129 (opAccess -> opDictionary .)
    /               reduce using rule 129 (opAccess -> opDictionary .)
    +               reduce using rule 129 (opAccess -> opDictionary .)
    -               reduce using rule 129 (opAccess -> opDictionary .)
    EQ              reduce using rule 129 (opAccess -> opDictionary .)
    DIF             reduce using rule 129 (opAccess -> opDictionary .)
    LTOEQ           reduce using rule 129 (opAccess -> opDictionary .)
    GTOEQ           reduce using rule 129 (opAccess -> opDictionary .)
    >               reduce using rule 129 (opAccess -> opDictionary .)
    <               reduce using rule 129 (opAccess -> opDictionary .)
    AND             reduce using rule 129 (opAccess -> opDictionary .)
    OR              reduce using rule 129 (opAccess -> opDictionary .)
    ;               reduce using rule 129 (opAccess -> opDictionary .)
    )               reduce using rule 129 (opAccess -> opDictionary .)
    ,               reduce using rule 129 (opAccess -> opDictionary .)
    ]               reduce using rule 129 (opAccess -> opDictionary .)


state 171

    (83) opParamCall -> expresion cyParamCall .

    )               reduce using rule 83 (opParamCall -> expresion cyParamCall .)


state 172

    (85) cyParamCall -> , . expresion cyParamCall
    (99) expresion -> . sExp cyExpresion errorExpresion
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 201
    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 173

    (86) cyParamCall -> empty .

    )               reduce using rule 86 (cyParamCall -> empty .)


state 174

    (113) exp -> term errorCyExp . cyExp
    (114) cyExp -> . + term
    (115) cyExp -> . - term
    (116) cyExp -> . empty
    (144) empty -> .

    +               shift and go to state 203
    -               shift and go to state 204
    EQ              reduce using rule 144 (empty -> .)
    DIF             reduce using rule 144 (empty -> .)
    LTOEQ           reduce using rule 144 (empty -> .)
    GTOEQ           reduce using rule 144 (empty -> .)
    >               reduce using rule 144 (empty -> .)
    <               reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    ,               reduce using rule 144 (empty -> .)
    )               reduce using rule 144 (empty -> .)
    ;               reduce using rule 144 (empty -> .)
    ]               reduce using rule 144 (empty -> .)

    cyExp                          shift and go to state 202
    empty                          shift and go to state 205

state 175

    (104) sExp -> exp errorOpSExp . opSExp
    (105) opSExp -> . EQ exp
    (106) opSExp -> . DIF exp
    (107) opSExp -> . LTOEQ exp
    (108) opSExp -> . GTOEQ exp
    (109) opSExp -> . > exp
    (110) opSExp -> . < exp
    (111) opSExp -> . empty
    (144) empty -> .

    EQ              shift and go to state 206
    DIF             shift and go to state 207
    LTOEQ           shift and go to state 210
    GTOEQ           shift and go to state 208
    >               shift and go to state 209
    <               shift and go to state 211
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    ,               reduce using rule 144 (empty -> .)
    )               reduce using rule 144 (empty -> .)
    ;               reduce using rule 144 (empty -> .)
    ]               reduce using rule 144 (empty -> .)

    empty                          shift and go to state 212
    opSExp                         shift and go to state 213

state 176

    (119) cyTerm -> * . errorFact fact
    (127) errorFact -> .

    CTES            reduce using rule 127 (errorFact -> .)
    (               reduce using rule 127 (errorFact -> .)
    ID              reduce using rule 127 (errorFact -> .)
    CTED            reduce using rule 127 (errorFact -> .)
    CTEF            reduce using rule 127 (errorFact -> .)
    TRUE            reduce using rule 127 (errorFact -> .)
    FALSE           reduce using rule 127 (errorFact -> .)

    errorFact                      shift and go to state 214

state 177

    (120) cyTerm -> / . fact
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    funcCall                       shift and go to state 140
    cte                            shift and go to state 141
    fact                           shift and go to state 215

state 178

    (118) term -> fact cyTerm .

    +               reduce using rule 118 (term -> fact cyTerm .)
    -               reduce using rule 118 (term -> fact cyTerm .)
    EQ              reduce using rule 118 (term -> fact cyTerm .)
    DIF             reduce using rule 118 (term -> fact cyTerm .)
    LTOEQ           reduce using rule 118 (term -> fact cyTerm .)
    GTOEQ           reduce using rule 118 (term -> fact cyTerm .)
    >               reduce using rule 118 (term -> fact cyTerm .)
    <               reduce using rule 118 (term -> fact cyTerm .)
    AND             reduce using rule 118 (term -> fact cyTerm .)
    OR              reduce using rule 118 (term -> fact cyTerm .)
    )               reduce using rule 118 (term -> fact cyTerm .)
    ;               reduce using rule 118 (term -> fact cyTerm .)
    ]               reduce using rule 118 (term -> fact cyTerm .)
    ,               reduce using rule 118 (term -> fact cyTerm .)


state 179

    (121) cyTerm -> empty .

    +               reduce using rule 121 (cyTerm -> empty .)
    -               reduce using rule 121 (cyTerm -> empty .)
    EQ              reduce using rule 121 (cyTerm -> empty .)
    DIF             reduce using rule 121 (cyTerm -> empty .)
    LTOEQ           reduce using rule 121 (cyTerm -> empty .)
    GTOEQ           reduce using rule 121 (cyTerm -> empty .)
    >               reduce using rule 121 (cyTerm -> empty .)
    <               reduce using rule 121 (cyTerm -> empty .)
    AND             reduce using rule 121 (cyTerm -> empty .)
    OR              reduce using rule 121 (cyTerm -> empty .)
    ,               reduce using rule 121 (cyTerm -> empty .)
    )               reduce using rule 121 (cyTerm -> empty .)
    ;               reduce using rule 121 (cyTerm -> empty .)
    ]               reduce using rule 121 (cyTerm -> empty .)


state 180

    (29) init -> = initWith . errorInit
    (30) errorInit -> .

    ;               reduce using rule 30 (errorInit -> .)
    )               reduce using rule 30 (errorInit -> .)

    errorInit                      shift and go to state 216

state 181

    (33) initDict -> = ( . dictType : dictType ) errorInitDict
    (125) fact -> ( . expresion )
    (35) dictType -> . errorDictType CTES
    (36) dictType -> . cte
    (37) dictType -> . ID
    (99) expresion -> . sExp cyExpresion errorExpresion
    (38) errorDictType -> .
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (82) funcCall -> . ID ( opParamCall )

  ! shift/reduce conflict for CTES resolved as shift
    ID              shift and go to state 219
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139
    CTES            shift and go to state 137
    (               shift and go to state 131

  ! CTES            [ reduce using rule 38 (errorDictType -> .) ]

    dictType                       shift and go to state 217
    expresion                      shift and go to state 160
    term                           shift and go to state 138
    errorDictType                  shift and go to state 218
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 220
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 182

    (82) funcCall -> ID . ( opParamCall )
    (126) fact -> ID . opAccess errorOpAccess
    (128) opAccess -> . opStruct
    (129) opAccess -> . opDictionary
    (130) opAccess -> . empty
    (132) opStruct -> . errorOpStruct [ expresion ] opMatrix
    (137) opDictionary -> . . dictIndex
    (144) empty -> .
    (133) errorOpStruct -> .

    (               shift and go to state 114
    .               shift and go to state 169
    *               reduce using rule 144 (empty -> .)
    /               reduce using rule 144 (empty -> .)
    +               reduce using rule 144 (empty -> .)
    -               reduce using rule 144 (empty -> .)
    EQ              reduce using rule 144 (empty -> .)
    DIF             reduce using rule 144 (empty -> .)
    LTOEQ           reduce using rule 144 (empty -> .)
    GTOEQ           reduce using rule 144 (empty -> .)
    >               reduce using rule 144 (empty -> .)
    <               reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    ;               reduce using rule 144 (empty -> .)
    )               reduce using rule 144 (empty -> .)
    [               reduce using rule 133 (errorOpStruct -> .)

    errorOpStruct                  shift and go to state 165
    opDictionary                   shift and go to state 170
    opStruct                       shift and go to state 166
    opAccess                       shift and go to state 167
    empty                          shift and go to state 168

state 183

    (31) initWith -> expresion .

    ;               reduce using rule 31 (initWith -> expresion .)
    )               reduce using rule 31 (initWith -> expresion .)


state 184

    (32) initWith -> funcCall .
    (124) fact -> funcCall .

  ! reduce/reduce conflict for ; resolved using rule 32 (initWith -> funcCall .)
  ! reduce/reduce conflict for ) resolved using rule 32 (initWith -> funcCall .)
    ;               reduce using rule 32 (initWith -> funcCall .)
    )               reduce using rule 32 (initWith -> funcCall .)
    *               reduce using rule 124 (fact -> funcCall .)
    /               reduce using rule 124 (fact -> funcCall .)
    +               reduce using rule 124 (fact -> funcCall .)
    -               reduce using rule 124 (fact -> funcCall .)
    EQ              reduce using rule 124 (fact -> funcCall .)
    DIF             reduce using rule 124 (fact -> funcCall .)
    LTOEQ           reduce using rule 124 (fact -> funcCall .)
    GTOEQ           reduce using rule 124 (fact -> funcCall .)
    >               reduce using rule 124 (fact -> funcCall .)
    <               reduce using rule 124 (fact -> funcCall .)
    AND             reduce using rule 124 (fact -> funcCall .)
    OR              reduce using rule 124 (fact -> funcCall .)

  ! ;               [ reduce using rule 124 (fact -> funcCall .) ]
  ! )               [ reduce using rule 124 (fact -> funcCall .) ]


state 185

    (78) assignOptions -> [ expresion . ] assignMatrix init

    ]               shift and go to state 221


state 186

    (92) condition -> errorCondition IF ( expresion . ) { body } optionalElse

    )               shift and go to state 222


state 187

    (41) cyParam -> errorCyParam ; param .

    )               reduce using rule 41 (cyParam -> errorCyParam ; param .)


state 188

    (90) optionalMatrix -> [ CTED ] .

    ;               reduce using rule 90 (optionalMatrix -> [ CTED ] .)


state 189

    (46) return -> errorReturn RETURN . expresion ;
    (99) expresion -> . sExp cyExpresion errorExpresion
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 223
    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 190

    (70) whileCycle -> errorWhileCycle WHILE ( expresion ) . { body }

    {               shift and go to state 224


state 191

    (72) forCycle -> errorForCycle FOR ( assign ; . expresion ; assign ) { body }
    (99) expresion -> . sExp cyExpresion errorExpresion
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 225
    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 192

    (125) fact -> ( expresion ) .

    *               reduce using rule 125 (fact -> ( expresion ) .)
    /               reduce using rule 125 (fact -> ( expresion ) .)
    +               reduce using rule 125 (fact -> ( expresion ) .)
    -               reduce using rule 125 (fact -> ( expresion ) .)
    AND             reduce using rule 125 (fact -> ( expresion ) .)
    OR              reduce using rule 125 (fact -> ( expresion ) .)
    ,               reduce using rule 125 (fact -> ( expresion ) .)
    )               reduce using rule 125 (fact -> ( expresion ) .)
    ;               reduce using rule 125 (fact -> ( expresion ) .)
    ]               reduce using rule 125 (fact -> ( expresion ) .)
    EQ              reduce using rule 125 (fact -> ( expresion ) .)
    DIF             reduce using rule 125 (fact -> ( expresion ) .)
    LTOEQ           reduce using rule 125 (fact -> ( expresion ) .)
    GTOEQ           reduce using rule 125 (fact -> ( expresion ) .)
    >               reduce using rule 125 (fact -> ( expresion ) .)
    <               reduce using rule 125 (fact -> ( expresion ) .)


state 193

    (101) cyExpresion -> AND expresion .

    ,               reduce using rule 101 (cyExpresion -> AND expresion .)
    )               reduce using rule 101 (cyExpresion -> AND expresion .)
    ;               reduce using rule 101 (cyExpresion -> AND expresion .)
    ]               reduce using rule 101 (cyExpresion -> AND expresion .)


state 194

    (99) expresion -> sExp cyExpresion errorExpresion .

    ]               reduce using rule 99 (expresion -> sExp cyExpresion errorExpresion .)
    )               reduce using rule 99 (expresion -> sExp cyExpresion errorExpresion .)
    ;               reduce using rule 99 (expresion -> sExp cyExpresion errorExpresion .)
    ,               reduce using rule 99 (expresion -> sExp cyExpresion errorExpresion .)


state 195

    (102) cyExpresion -> OR expresion .

    ,               reduce using rule 102 (cyExpresion -> OR expresion .)
    )               reduce using rule 102 (cyExpresion -> OR expresion .)
    ;               reduce using rule 102 (cyExpresion -> OR expresion .)
    ]               reduce using rule 102 (cyExpresion -> OR expresion .)


state 196

    (132) opStruct -> errorOpStruct [ . expresion ] opMatrix
    (99) expresion -> . sExp cyExpresion errorExpresion
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 226
    term                           shift and go to state 138
    exp                            shift and go to state 143
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    fact                           shift and go to state 144

state 197

    (126) fact -> ID opAccess errorOpAccess .

    *               reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    /               reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    +               reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    -               reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    AND             reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    OR              reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    ,               reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    )               reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    ;               reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    ]               reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    EQ              reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    DIF             reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    LTOEQ           reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    GTOEQ           reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    >               reduce using rule 126 (fact -> ID opAccess errorOpAccess .)
    <               reduce using rule 126 (fact -> ID opAccess errorOpAccess .)


state 198

    (138) dictIndex -> FIRST .

    *               reduce using rule 138 (dictIndex -> FIRST .)
    /               reduce using rule 138 (dictIndex -> FIRST .)
    +               reduce using rule 138 (dictIndex -> FIRST .)
    -               reduce using rule 138 (dictIndex -> FIRST .)
    EQ              reduce using rule 138 (dictIndex -> FIRST .)
    DIF             reduce using rule 138 (dictIndex -> FIRST .)
    LTOEQ           reduce using rule 138 (dictIndex -> FIRST .)
    GTOEQ           reduce using rule 138 (dictIndex -> FIRST .)
    >               reduce using rule 138 (dictIndex -> FIRST .)
    <               reduce using rule 138 (dictIndex -> FIRST .)
    AND             reduce using rule 138 (dictIndex -> FIRST .)
    OR              reduce using rule 138 (dictIndex -> FIRST .)
    ,               reduce using rule 138 (dictIndex -> FIRST .)
    )               reduce using rule 138 (dictIndex -> FIRST .)
    ]               reduce using rule 138 (dictIndex -> FIRST .)
    ;               reduce using rule 138 (dictIndex -> FIRST .)


state 199

    (139) dictIndex -> LAST .

    *               reduce using rule 139 (dictIndex -> LAST .)
    /               reduce using rule 139 (dictIndex -> LAST .)
    +               reduce using rule 139 (dictIndex -> LAST .)
    -               reduce using rule 139 (dictIndex -> LAST .)
    EQ              reduce using rule 139 (dictIndex -> LAST .)
    DIF             reduce using rule 139 (dictIndex -> LAST .)
    LTOEQ           reduce using rule 139 (dictIndex -> LAST .)
    GTOEQ           reduce using rule 139 (dictIndex -> LAST .)
    >               reduce using rule 139 (dictIndex -> LAST .)
    <               reduce using rule 139 (dictIndex -> LAST .)
    AND             reduce using rule 139 (dictIndex -> LAST .)
    OR              reduce using rule 139 (dictIndex -> LAST .)
    ,               reduce using rule 139 (dictIndex -> LAST .)
    )               reduce using rule 139 (dictIndex -> LAST .)
    ]               reduce using rule 139 (dictIndex -> LAST .)
    ;               reduce using rule 139 (dictIndex -> LAST .)


state 200

    (137) opDictionary -> . dictIndex .

    *               reduce using rule 137 (opDictionary -> . dictIndex .)
    /               reduce using rule 137 (opDictionary -> . dictIndex .)
    +               reduce using rule 137 (opDictionary -> . dictIndex .)
    -               reduce using rule 137 (opDictionary -> . dictIndex .)
    EQ              reduce using rule 137 (opDictionary -> . dictIndex .)
    DIF             reduce using rule 137 (opDictionary -> . dictIndex .)
    LTOEQ           reduce using rule 137 (opDictionary -> . dictIndex .)
    GTOEQ           reduce using rule 137 (opDictionary -> . dictIndex .)
    >               reduce using rule 137 (opDictionary -> . dictIndex .)
    <               reduce using rule 137 (opDictionary -> . dictIndex .)
    AND             reduce using rule 137 (opDictionary -> . dictIndex .)
    OR              reduce using rule 137 (opDictionary -> . dictIndex .)
    ,               reduce using rule 137 (opDictionary -> . dictIndex .)
    )               reduce using rule 137 (opDictionary -> . dictIndex .)
    ]               reduce using rule 137 (opDictionary -> . dictIndex .)
    ;               reduce using rule 137 (opDictionary -> . dictIndex .)


state 201

    (85) cyParamCall -> , expresion . cyParamCall
    (85) cyParamCall -> . , expresion cyParamCall
    (86) cyParamCall -> . empty
    (144) empty -> .

    ,               shift and go to state 172
    )               reduce using rule 144 (empty -> .)

    cyParamCall                    shift and go to state 227
    empty                          shift and go to state 173

state 202

    (113) exp -> term errorCyExp cyExp .

    EQ              reduce using rule 113 (exp -> term errorCyExp cyExp .)
    DIF             reduce using rule 113 (exp -> term errorCyExp cyExp .)
    LTOEQ           reduce using rule 113 (exp -> term errorCyExp cyExp .)
    GTOEQ           reduce using rule 113 (exp -> term errorCyExp cyExp .)
    >               reduce using rule 113 (exp -> term errorCyExp cyExp .)
    <               reduce using rule 113 (exp -> term errorCyExp cyExp .)
    AND             reduce using rule 113 (exp -> term errorCyExp cyExp .)
    OR              reduce using rule 113 (exp -> term errorCyExp cyExp .)
    )               reduce using rule 113 (exp -> term errorCyExp cyExp .)
    ]               reduce using rule 113 (exp -> term errorCyExp cyExp .)
    ,               reduce using rule 113 (exp -> term errorCyExp cyExp .)
    ;               reduce using rule 113 (exp -> term errorCyExp cyExp .)


state 203

    (114) cyExp -> + . term
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    term                           shift and go to state 228
    funcCall                       shift and go to state 140
    cte                            shift and go to state 141
    fact                           shift and go to state 144

state 204

    (115) cyExp -> - . term
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    term                           shift and go to state 229
    funcCall                       shift and go to state 140
    cte                            shift and go to state 141
    fact                           shift and go to state 144

state 205

    (116) cyExp -> empty .

    EQ              reduce using rule 116 (cyExp -> empty .)
    DIF             reduce using rule 116 (cyExp -> empty .)
    LTOEQ           reduce using rule 116 (cyExp -> empty .)
    GTOEQ           reduce using rule 116 (cyExp -> empty .)
    >               reduce using rule 116 (cyExp -> empty .)
    <               reduce using rule 116 (cyExp -> empty .)
    AND             reduce using rule 116 (cyExp -> empty .)
    OR              reduce using rule 116 (cyExp -> empty .)
    ,               reduce using rule 116 (cyExp -> empty .)
    )               reduce using rule 116 (cyExp -> empty .)
    ;               reduce using rule 116 (cyExp -> empty .)
    ]               reduce using rule 116 (cyExp -> empty .)


state 206

    (105) opSExp -> EQ . exp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    cte                            shift and go to state 141
    exp                            shift and go to state 230
    fact                           shift and go to state 144

state 207

    (106) opSExp -> DIF . exp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    cte                            shift and go to state 141
    exp                            shift and go to state 231
    fact                           shift and go to state 144

state 208

    (108) opSExp -> GTOEQ . exp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    cte                            shift and go to state 141
    exp                            shift and go to state 232
    fact                           shift and go to state 144

state 209

    (109) opSExp -> > . exp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    cte                            shift and go to state 141
    exp                            shift and go to state 233
    fact                           shift and go to state 144

state 210

    (107) opSExp -> LTOEQ . exp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    cte                            shift and go to state 141
    exp                            shift and go to state 234
    fact                           shift and go to state 144

state 211

    (110) opSExp -> < . exp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    cte                            shift and go to state 141
    exp                            shift and go to state 235
    fact                           shift and go to state 144

state 212

    (111) opSExp -> empty .

    AND             reduce using rule 111 (opSExp -> empty .)
    OR              reduce using rule 111 (opSExp -> empty .)
    ,               reduce using rule 111 (opSExp -> empty .)
    )               reduce using rule 111 (opSExp -> empty .)
    ;               reduce using rule 111 (opSExp -> empty .)
    ]               reduce using rule 111 (opSExp -> empty .)


state 213

    (104) sExp -> exp errorOpSExp opSExp .

    AND             reduce using rule 104 (sExp -> exp errorOpSExp opSExp .)
    OR              reduce using rule 104 (sExp -> exp errorOpSExp opSExp .)
    ]               reduce using rule 104 (sExp -> exp errorOpSExp opSExp .)
    ,               reduce using rule 104 (sExp -> exp errorOpSExp opSExp .)
    )               reduce using rule 104 (sExp -> exp errorOpSExp opSExp .)
    ;               reduce using rule 104 (sExp -> exp errorOpSExp opSExp .)


state 214

    (119) cyTerm -> * errorFact . fact
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    funcCall                       shift and go to state 140
    cte                            shift and go to state 141
    fact                           shift and go to state 236

state 215

    (120) cyTerm -> / fact .

    +               reduce using rule 120 (cyTerm -> / fact .)
    -               reduce using rule 120 (cyTerm -> / fact .)
    EQ              reduce using rule 120 (cyTerm -> / fact .)
    DIF             reduce using rule 120 (cyTerm -> / fact .)
    LTOEQ           reduce using rule 120 (cyTerm -> / fact .)
    GTOEQ           reduce using rule 120 (cyTerm -> / fact .)
    >               reduce using rule 120 (cyTerm -> / fact .)
    <               reduce using rule 120 (cyTerm -> / fact .)
    AND             reduce using rule 120 (cyTerm -> / fact .)
    OR              reduce using rule 120 (cyTerm -> / fact .)
    ,               reduce using rule 120 (cyTerm -> / fact .)
    )               reduce using rule 120 (cyTerm -> / fact .)
    ;               reduce using rule 120 (cyTerm -> / fact .)
    ]               reduce using rule 120 (cyTerm -> / fact .)


state 216

    (29) init -> = initWith errorInit .

    ;               reduce using rule 29 (init -> = initWith errorInit .)
    )               reduce using rule 29 (init -> = initWith errorInit .)


state 217

    (33) initDict -> = ( dictType . : dictType ) errorInitDict

    :               shift and go to state 237


state 218

    (35) dictType -> errorDictType . CTES

    CTES            shift and go to state 238


state 219

    (37) dictType -> ID .
    (126) fact -> ID . opAccess errorOpAccess
    (82) funcCall -> ID . ( opParamCall )
    (128) opAccess -> . opStruct
    (129) opAccess -> . opDictionary
    (130) opAccess -> . empty
    (132) opStruct -> . errorOpStruct [ expresion ] opMatrix
    (137) opDictionary -> . . dictIndex
    (144) empty -> .
    (133) errorOpStruct -> .

    :               reduce using rule 37 (dictType -> ID .)
    (               shift and go to state 114
    .               shift and go to state 169
    *               reduce using rule 144 (empty -> .)
    /               reduce using rule 144 (empty -> .)
    +               reduce using rule 144 (empty -> .)
    -               reduce using rule 144 (empty -> .)
    EQ              reduce using rule 144 (empty -> .)
    DIF             reduce using rule 144 (empty -> .)
    LTOEQ           reduce using rule 144 (empty -> .)
    GTOEQ           reduce using rule 144 (empty -> .)
    >               reduce using rule 144 (empty -> .)
    <               reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    )               reduce using rule 144 (empty -> .)
    [               reduce using rule 133 (errorOpStruct -> .)

    errorOpStruct                  shift and go to state 165
    opDictionary                   shift and go to state 170
    opStruct                       shift and go to state 166
    opAccess                       shift and go to state 167
    empty                          shift and go to state 168

state 220

    (36) dictType -> cte .
    (123) fact -> cte .

    :               reduce using rule 36 (dictType -> cte .)
    *               reduce using rule 123 (fact -> cte .)
    /               reduce using rule 123 (fact -> cte .)
    +               reduce using rule 123 (fact -> cte .)
    -               reduce using rule 123 (fact -> cte .)
    EQ              reduce using rule 123 (fact -> cte .)
    DIF             reduce using rule 123 (fact -> cte .)
    LTOEQ           reduce using rule 123 (fact -> cte .)
    GTOEQ           reduce using rule 123 (fact -> cte .)
    >               reduce using rule 123 (fact -> cte .)
    <               reduce using rule 123 (fact -> cte .)
    AND             reduce using rule 123 (fact -> cte .)
    OR              reduce using rule 123 (fact -> cte .)
    )               reduce using rule 123 (fact -> cte .)


state 221

    (78) assignOptions -> [ expresion ] . assignMatrix init
    (79) assignMatrix -> . [ expresion ] errorAssignMatrix
    (80) assignMatrix -> . empty
    (144) empty -> .

    [               shift and go to state 240
    =               reduce using rule 144 (empty -> .)

    assignMatrix                   shift and go to state 239
    empty                          shift and go to state 241

state 222

    (92) condition -> errorCondition IF ( expresion ) . { body } optionalElse

    {               shift and go to state 242


state 223

    (46) return -> errorReturn RETURN expresion . ;

    ;               shift and go to state 243


state 224

    (70) whileCycle -> errorWhileCycle WHILE ( expresion ) { . body }
    (64) body -> . errorBody cyInstruction
    (65) body -> . empty
    (66) errorBody -> .
    (144) empty -> .

    ID              reduce using rule 66 (errorBody -> .)
    IF              reduce using rule 66 (errorBody -> .)
    FOR             reduce using rule 66 (errorBody -> .)
    WHILE           reduce using rule 66 (errorBody -> .)
    }               reduce using rule 144 (empty -> .)

    body                           shift and go to state 244
    errorBody                      shift and go to state 76
    empty                          shift and go to state 77

state 225

    (72) forCycle -> errorForCycle FOR ( assign ; expresion . ; assign ) { body }

    ;               shift and go to state 245


state 226

    (132) opStruct -> errorOpStruct [ expresion . ] opMatrix

    ]               shift and go to state 246


state 227

    (85) cyParamCall -> , expresion cyParamCall .

    )               reduce using rule 85 (cyParamCall -> , expresion cyParamCall .)


state 228

    (114) cyExp -> + term .

    EQ              reduce using rule 114 (cyExp -> + term .)
    DIF             reduce using rule 114 (cyExp -> + term .)
    LTOEQ           reduce using rule 114 (cyExp -> + term .)
    GTOEQ           reduce using rule 114 (cyExp -> + term .)
    >               reduce using rule 114 (cyExp -> + term .)
    <               reduce using rule 114 (cyExp -> + term .)
    AND             reduce using rule 114 (cyExp -> + term .)
    OR              reduce using rule 114 (cyExp -> + term .)
    ,               reduce using rule 114 (cyExp -> + term .)
    )               reduce using rule 114 (cyExp -> + term .)
    ;               reduce using rule 114 (cyExp -> + term .)
    ]               reduce using rule 114 (cyExp -> + term .)


state 229

    (115) cyExp -> - term .

    EQ              reduce using rule 115 (cyExp -> - term .)
    DIF             reduce using rule 115 (cyExp -> - term .)
    LTOEQ           reduce using rule 115 (cyExp -> - term .)
    GTOEQ           reduce using rule 115 (cyExp -> - term .)
    >               reduce using rule 115 (cyExp -> - term .)
    <               reduce using rule 115 (cyExp -> - term .)
    AND             reduce using rule 115 (cyExp -> - term .)
    OR              reduce using rule 115 (cyExp -> - term .)
    ,               reduce using rule 115 (cyExp -> - term .)
    )               reduce using rule 115 (cyExp -> - term .)
    ;               reduce using rule 115 (cyExp -> - term .)
    ]               reduce using rule 115 (cyExp -> - term .)


state 230

    (105) opSExp -> EQ exp .

    AND             reduce using rule 105 (opSExp -> EQ exp .)
    OR              reduce using rule 105 (opSExp -> EQ exp .)
    ,               reduce using rule 105 (opSExp -> EQ exp .)
    )               reduce using rule 105 (opSExp -> EQ exp .)
    ;               reduce using rule 105 (opSExp -> EQ exp .)
    ]               reduce using rule 105 (opSExp -> EQ exp .)


state 231

    (106) opSExp -> DIF exp .

    AND             reduce using rule 106 (opSExp -> DIF exp .)
    OR              reduce using rule 106 (opSExp -> DIF exp .)
    ,               reduce using rule 106 (opSExp -> DIF exp .)
    )               reduce using rule 106 (opSExp -> DIF exp .)
    ;               reduce using rule 106 (opSExp -> DIF exp .)
    ]               reduce using rule 106 (opSExp -> DIF exp .)


state 232

    (108) opSExp -> GTOEQ exp .

    AND             reduce using rule 108 (opSExp -> GTOEQ exp .)
    OR              reduce using rule 108 (opSExp -> GTOEQ exp .)
    ,               reduce using rule 108 (opSExp -> GTOEQ exp .)
    )               reduce using rule 108 (opSExp -> GTOEQ exp .)
    ;               reduce using rule 108 (opSExp -> GTOEQ exp .)
    ]               reduce using rule 108 (opSExp -> GTOEQ exp .)


state 233

    (109) opSExp -> > exp .

    AND             reduce using rule 109 (opSExp -> > exp .)
    OR              reduce using rule 109 (opSExp -> > exp .)
    ,               reduce using rule 109 (opSExp -> > exp .)
    )               reduce using rule 109 (opSExp -> > exp .)
    ;               reduce using rule 109 (opSExp -> > exp .)
    ]               reduce using rule 109 (opSExp -> > exp .)


state 234

    (107) opSExp -> LTOEQ exp .

    AND             reduce using rule 107 (opSExp -> LTOEQ exp .)
    OR              reduce using rule 107 (opSExp -> LTOEQ exp .)
    ,               reduce using rule 107 (opSExp -> LTOEQ exp .)
    )               reduce using rule 107 (opSExp -> LTOEQ exp .)
    ;               reduce using rule 107 (opSExp -> LTOEQ exp .)
    ]               reduce using rule 107 (opSExp -> LTOEQ exp .)


state 235

    (110) opSExp -> < exp .

    AND             reduce using rule 110 (opSExp -> < exp .)
    OR              reduce using rule 110 (opSExp -> < exp .)
    ,               reduce using rule 110 (opSExp -> < exp .)
    )               reduce using rule 110 (opSExp -> < exp .)
    ;               reduce using rule 110 (opSExp -> < exp .)
    ]               reduce using rule 110 (opSExp -> < exp .)


state 236

    (119) cyTerm -> * errorFact fact .

    +               reduce using rule 119 (cyTerm -> * errorFact fact .)
    -               reduce using rule 119 (cyTerm -> * errorFact fact .)
    EQ              reduce using rule 119 (cyTerm -> * errorFact fact .)
    DIF             reduce using rule 119 (cyTerm -> * errorFact fact .)
    LTOEQ           reduce using rule 119 (cyTerm -> * errorFact fact .)
    GTOEQ           reduce using rule 119 (cyTerm -> * errorFact fact .)
    >               reduce using rule 119 (cyTerm -> * errorFact fact .)
    <               reduce using rule 119 (cyTerm -> * errorFact fact .)
    AND             reduce using rule 119 (cyTerm -> * errorFact fact .)
    OR              reduce using rule 119 (cyTerm -> * errorFact fact .)
    ,               reduce using rule 119 (cyTerm -> * errorFact fact .)
    )               reduce using rule 119 (cyTerm -> * errorFact fact .)
    ;               reduce using rule 119 (cyTerm -> * errorFact fact .)
    ]               reduce using rule 119 (cyTerm -> * errorFact fact .)


state 237

    (33) initDict -> = ( dictType : . dictType ) errorInitDict
    (35) dictType -> . errorDictType CTES
    (36) dictType -> . cte
    (37) dictType -> . ID
    (38) errorDictType -> .
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE

    ID              shift and go to state 249
    CTES            reduce using rule 38 (errorDictType -> .)
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    dictType                       shift and go to state 247
    errorDictType                  shift and go to state 218
    cte                            shift and go to state 248

state 238

    (35) dictType -> errorDictType CTES .

    )               reduce using rule 35 (dictType -> errorDictType CTES .)
    :               reduce using rule 35 (dictType -> errorDictType CTES .)


state 239

    (78) assignOptions -> [ expresion ] assignMatrix . init
    (29) init -> . = initWith errorInit

    =               shift and go to state 251

    init                           shift and go to state 250

state 240

    (79) assignMatrix -> [ . expresion ] errorAssignMatrix
    (99) expresion -> . sExp cyExpresion errorExpresion
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 252
    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 241

    (80) assignMatrix -> empty .

    =               reduce using rule 80 (assignMatrix -> empty .)


state 242

    (92) condition -> errorCondition IF ( expresion ) { . body } optionalElse
    (64) body -> . errorBody cyInstruction
    (65) body -> . empty
    (66) errorBody -> .
    (144) empty -> .

    ID              reduce using rule 66 (errorBody -> .)
    IF              reduce using rule 66 (errorBody -> .)
    FOR             reduce using rule 66 (errorBody -> .)
    WHILE           reduce using rule 66 (errorBody -> .)
    }               reduce using rule 144 (empty -> .)

    body                           shift and go to state 253
    errorBody                      shift and go to state 76
    empty                          shift and go to state 77

state 243

    (46) return -> errorReturn RETURN expresion ; .

    }               reduce using rule 46 (return -> errorReturn RETURN expresion ; .)


state 244

    (70) whileCycle -> errorWhileCycle WHILE ( expresion ) { body . }

    }               shift and go to state 254


state 245

    (72) forCycle -> errorForCycle FOR ( assign ; expresion ; . assign ) { body }
    (74) assign -> . ID errorAssign assignOptions

    ID              shift and go to state 157

    assign                         shift and go to state 255

state 246

    (132) opStruct -> errorOpStruct [ expresion ] . opMatrix
    (134) opMatrix -> . errorOpMatrix [ expresion ]
    (135) opMatrix -> . empty
    (136) errorOpMatrix -> .
    (144) empty -> .

    [               reduce using rule 136 (errorOpMatrix -> .)
    *               reduce using rule 144 (empty -> .)
    /               reduce using rule 144 (empty -> .)
    +               reduce using rule 144 (empty -> .)
    -               reduce using rule 144 (empty -> .)
    EQ              reduce using rule 144 (empty -> .)
    DIF             reduce using rule 144 (empty -> .)
    LTOEQ           reduce using rule 144 (empty -> .)
    GTOEQ           reduce using rule 144 (empty -> .)
    >               reduce using rule 144 (empty -> .)
    <               reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    ,               reduce using rule 144 (empty -> .)
    )               reduce using rule 144 (empty -> .)
    ]               reduce using rule 144 (empty -> .)
    ;               reduce using rule 144 (empty -> .)

    empty                          shift and go to state 258
    errorOpMatrix                  shift and go to state 256
    opMatrix                       shift and go to state 257

state 247

    (33) initDict -> = ( dictType : dictType . ) errorInitDict

    )               shift and go to state 259


state 248

    (36) dictType -> cte .

    )               reduce using rule 36 (dictType -> cte .)


state 249

    (37) dictType -> ID .

    )               reduce using rule 37 (dictType -> ID .)


state 250

    (78) assignOptions -> [ expresion ] assignMatrix init .

    ;               reduce using rule 78 (assignOptions -> [ expresion ] assignMatrix init .)
    )               reduce using rule 78 (assignOptions -> [ expresion ] assignMatrix init .)


state 251

    (29) init -> = . initWith errorInit
    (31) initWith -> . expresion
    (32) initWith -> . funcCall
    (99) expresion -> . sExp cyExpresion errorExpresion
    (82) funcCall -> . ID ( opParamCall )
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE

    ID              shift and go to state 182
    CTES            shift and go to state 137
    (               shift and go to state 131
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 183
    initWith                       shift and go to state 180
    funcCall                       shift and go to state 184
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    term                           shift and go to state 138
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 252

    (79) assignMatrix -> [ expresion . ] errorAssignMatrix

    ]               shift and go to state 260


state 253

    (92) condition -> errorCondition IF ( expresion ) { body . } optionalElse

    }               shift and go to state 261


state 254

    (70) whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .

    ID              reduce using rule 70 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    IF              reduce using rule 70 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    FOR             reduce using rule 70 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    WHILE           reduce using rule 70 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    }               reduce using rule 70 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    RETURN          reduce using rule 70 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)


state 255

    (72) forCycle -> errorForCycle FOR ( assign ; expresion ; assign . ) { body }

    )               shift and go to state 262


state 256

    (134) opMatrix -> errorOpMatrix . [ expresion ]

    [               shift and go to state 263


state 257

    (132) opStruct -> errorOpStruct [ expresion ] opMatrix .

    *               reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    /               reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    +               reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    -               reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    EQ              reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    DIF             reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    LTOEQ           reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    GTOEQ           reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    >               reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    <               reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    AND             reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    OR              reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    )               reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    ,               reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    ]               reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    ;               reduce using rule 132 (opStruct -> errorOpStruct [ expresion ] opMatrix .)


state 258

    (135) opMatrix -> empty .

    *               reduce using rule 135 (opMatrix -> empty .)
    /               reduce using rule 135 (opMatrix -> empty .)
    +               reduce using rule 135 (opMatrix -> empty .)
    -               reduce using rule 135 (opMatrix -> empty .)
    EQ              reduce using rule 135 (opMatrix -> empty .)
    DIF             reduce using rule 135 (opMatrix -> empty .)
    LTOEQ           reduce using rule 135 (opMatrix -> empty .)
    GTOEQ           reduce using rule 135 (opMatrix -> empty .)
    >               reduce using rule 135 (opMatrix -> empty .)
    <               reduce using rule 135 (opMatrix -> empty .)
    AND             reduce using rule 135 (opMatrix -> empty .)
    OR              reduce using rule 135 (opMatrix -> empty .)
    ,               reduce using rule 135 (opMatrix -> empty .)
    )               reduce using rule 135 (opMatrix -> empty .)
    ]               reduce using rule 135 (opMatrix -> empty .)
    ;               reduce using rule 135 (opMatrix -> empty .)


state 259

    (33) initDict -> = ( dictType : dictType ) . errorInitDict
    (34) errorInitDict -> .

    ;               reduce using rule 34 (errorInitDict -> .)
    )               reduce using rule 34 (errorInitDict -> .)

    errorInitDict                  shift and go to state 264

state 260

    (79) assignMatrix -> [ expresion ] . errorAssignMatrix
    (81) errorAssignMatrix -> .

    =               reduce using rule 81 (errorAssignMatrix -> .)

    errorAssignMatrix              shift and go to state 265

state 261

    (92) condition -> errorCondition IF ( expresion ) { body } . optionalElse
    (94) optionalElse -> . errorElse ELSE { body }
    (95) optionalElse -> . empty
    (96) errorElse -> .
    (144) empty -> .

    ELSE            reduce using rule 96 (errorElse -> .)
    ID              reduce using rule 144 (empty -> .)
    IF              reduce using rule 144 (empty -> .)
    FOR             reduce using rule 144 (empty -> .)
    WHILE           reduce using rule 144 (empty -> .)
    }               reduce using rule 144 (empty -> .)
    RETURN          reduce using rule 144 (empty -> .)

    errorElse                      shift and go to state 266
    optionalElse                   shift and go to state 267
    empty                          shift and go to state 268

state 262

    (72) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) . { body }

    {               shift and go to state 269


state 263

    (134) opMatrix -> errorOpMatrix [ . expresion ]
    (99) expresion -> . sExp cyExpresion errorExpresion
    (104) sExp -> . exp errorOpSExp opSExp
    (113) exp -> . term errorCyExp cyExp
    (118) term -> . fact cyTerm
    (122) fact -> . CTES
    (123) fact -> . cte
    (124) fact -> . funcCall
    (125) fact -> . ( expresion )
    (126) fact -> . ID opAccess errorOpAccess
    (140) cte -> . CTED
    (141) cte -> . CTEF
    (142) cte -> . TRUE
    (143) cte -> . FALSE
    (82) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 137
    (               shift and go to state 131
    ID              shift and go to state 135
    CTED            shift and go to state 134
    CTEF            shift and go to state 142
    TRUE            shift and go to state 130
    FALSE           shift and go to state 139

    expresion                      shift and go to state 270
    term                           shift and go to state 138
    funcCall                       shift and go to state 140
    sExp                           shift and go to state 132
    cte                            shift and go to state 141
    exp                            shift and go to state 143
    fact                           shift and go to state 144

state 264

    (33) initDict -> = ( dictType : dictType ) errorInitDict .

    ;               reduce using rule 33 (initDict -> = ( dictType : dictType ) errorInitDict .)
    )               reduce using rule 33 (initDict -> = ( dictType : dictType ) errorInitDict .)


state 265

    (79) assignMatrix -> [ expresion ] errorAssignMatrix .

    =               reduce using rule 79 (assignMatrix -> [ expresion ] errorAssignMatrix .)


state 266

    (94) optionalElse -> errorElse . ELSE { body }

    ELSE            shift and go to state 271


state 267

    (92) condition -> errorCondition IF ( expresion ) { body } optionalElse .

    ID              reduce using rule 92 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    IF              reduce using rule 92 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    FOR             reduce using rule 92 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    WHILE           reduce using rule 92 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    }               reduce using rule 92 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    RETURN          reduce using rule 92 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)


state 268

    (95) optionalElse -> empty .

    ID              reduce using rule 95 (optionalElse -> empty .)
    IF              reduce using rule 95 (optionalElse -> empty .)
    FOR             reduce using rule 95 (optionalElse -> empty .)
    WHILE           reduce using rule 95 (optionalElse -> empty .)
    }               reduce using rule 95 (optionalElse -> empty .)
    RETURN          reduce using rule 95 (optionalElse -> empty .)


state 269

    (72) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { . body }
    (64) body -> . errorBody cyInstruction
    (65) body -> . empty
    (66) errorBody -> .
    (144) empty -> .

    ID              reduce using rule 66 (errorBody -> .)
    IF              reduce using rule 66 (errorBody -> .)
    FOR             reduce using rule 66 (errorBody -> .)
    WHILE           reduce using rule 66 (errorBody -> .)
    }               reduce using rule 144 (empty -> .)

    body                           shift and go to state 272
    errorBody                      shift and go to state 76
    empty                          shift and go to state 77

state 270

    (134) opMatrix -> errorOpMatrix [ expresion . ]

    ]               shift and go to state 273


state 271

    (94) optionalElse -> errorElse ELSE . { body }

    {               shift and go to state 274


state 272

    (72) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body . }

    }               shift and go to state 275


state 273

    (134) opMatrix -> errorOpMatrix [ expresion ] .

    *               reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    /               reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    +               reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    -               reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    EQ              reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    DIF             reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    LTOEQ           reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    GTOEQ           reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    >               reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    <               reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    AND             reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    OR              reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    ,               reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    )               reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    ]               reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)
    ;               reduce using rule 134 (opMatrix -> errorOpMatrix [ expresion ] .)


state 274

    (94) optionalElse -> errorElse ELSE { . body }
    (64) body -> . errorBody cyInstruction
    (65) body -> . empty
    (66) errorBody -> .
    (144) empty -> .

    ID              reduce using rule 66 (errorBody -> .)
    IF              reduce using rule 66 (errorBody -> .)
    FOR             reduce using rule 66 (errorBody -> .)
    WHILE           reduce using rule 66 (errorBody -> .)
    }               reduce using rule 144 (empty -> .)

    body                           shift and go to state 276
    empty                          shift and go to state 77
    errorBody                      shift and go to state 76

state 275

    (72) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .

    ID              reduce using rule 72 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    IF              reduce using rule 72 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    FOR             reduce using rule 72 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    WHILE           reduce using rule 72 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    }               reduce using rule 72 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    RETURN          reduce using rule 72 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)


state 276

    (94) optionalElse -> errorElse ELSE { body . }

    }               shift and go to state 277


state 277

    (94) optionalElse -> errorElse ELSE { body } .

    ID              reduce using rule 94 (optionalElse -> errorElse ELSE { body } .)
    IF              reduce using rule 94 (optionalElse -> errorElse ELSE { body } .)
    FOR             reduce using rule 94 (optionalElse -> errorElse ELSE { body } .)
    WHILE           reduce using rule 94 (optionalElse -> errorElse ELSE { body } .)
    }               reduce using rule 94 (optionalElse -> errorElse ELSE { body } .)
    RETURN          reduce using rule 94 (optionalElse -> errorElse ELSE { body } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CTES in state 181 resolved as shift
WARNING: reduce/reduce conflict in state 184 resolved using rule (initWith -> funcCall)
WARNING: rejected rule (fact -> funcCall) in state 184
