Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> errorProgram PROGRAM saveType ID saveProc { opVars changeCurrentScope opFunctions main } printTables
Rule 2     changeCurrentScope -> <empty>
Rule 3     saveType -> <empty>
Rule 4     saveProc -> <empty>
Rule 5     errorProgram -> <empty>
Rule 6     opVars -> vars
Rule 7     opVars -> empty
Rule 8     opFunctions -> function opFunctions
Rule 9     opFunctions -> empty
Rule 10    vars -> errorVars VARS declare
Rule 11    saveID -> <empty>
Rule 12    errorVars -> <empty>
Rule 13    type -> errorType INT
Rule 14    type -> FLOAT
Rule 15    type -> STRING
Rule 16    type -> BOOL
Rule 17    errorType -> <empty>
Rule 18    main -> errorMain MAIN saveMain { opVars body } clearVarsTable
Rule 19    saveMain -> <empty>
Rule 20    errorMain -> <empty>
Rule 21    instr -> basicStatements ;
Rule 22    instr -> condition
Rule 23    instr -> cycle
Rule 24    basicStatements -> assign
Rule 25    basicStatements -> funcCall
Rule 26    declare -> basicDeclare
Rule 27    declare -> structDeclare
Rule 28    declare -> dictDeclare
Rule 29    init -> ASGN initWith errorInit
Rule 30    errorInit -> <empty>
Rule 31    initWith -> expresion
Rule 32    initWith -> funcCall
Rule 33    initDict -> ASGN ( dictType : dictType ) errorInitDict
Rule 34    errorInitDict -> <empty>
Rule 35    dictType -> errorDictType CTES
Rule 36    dictType -> cte
Rule 37    dictType -> ID
Rule 38    errorDictType -> <empty>
Rule 39    param -> saveType type errorParam ID cyTypeParam cyParam
Rule 40    errorParam -> <empty>
Rule 41    cyParam -> errorCyParam saveID saveTypeParam ; param
Rule 42    cyParam -> empty saveID saveTypeParam
Rule 43    cyTypeParam -> , saveID saveTypeParam ID cyTypeParam
Rule 44    cyTypeParam -> empty
Rule 45    saveTypeParam -> <empty>
Rule 46    errorCyParam -> <empty>
Rule 47    function -> errorFunction FUNC saveType ID saveProc flagParameters ( opParameters ) flagParameters opReturns } clearVarsTable
Rule 48    errorFunction -> <empty>
Rule 49    clearVarsTable -> <empty>
Rule 50    return -> errorReturn RETURN expresion ;
Rule 51    errorReturn -> <empty>
Rule 52    opParameters -> param saveParamToDirProc errorOpParameters
Rule 53    opParameters -> empty
Rule 54    flagParameters -> <empty>
Rule 55    saveParamToDirProc -> <empty>
Rule 56    errorOpParameters -> <empty>
Rule 57    opReturns -> errorOpReturns RETURNS type saveReturnType { opVars body return
Rule 58    opReturns -> { opVars body
Rule 59    saveReturnType -> <empty>
Rule 60    errorOpReturns -> <empty>
Rule 61    basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
Rule 62    errorBasicDeclare -> <empty>
Rule 63    structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare
Rule 64    errorStructDeclare -> <empty>
Rule 65    dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare
Rule 66    errorDictDeclare -> <empty>
Rule 67    cyDeclare -> declare
Rule 68    cyDeclare -> empty
Rule 69    body -> errorBody cyInstruction
Rule 70    body -> empty
Rule 71    errorBody -> <empty>
Rule 72    cyInstruction -> instr body
Rule 73    cycle -> forCycle
Rule 74    cycle -> whileCycle
Rule 75    whileCycle -> errorWhileCycle WHILE ( expresion ) { body }
Rule 76    errorWhileCycle -> <empty>
Rule 77    forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body }
Rule 78    errorForCycle -> <empty>
Rule 79    assign -> ID errorAssign assignOptions
Rule 80    errorAssign -> <empty>
Rule 81    assignOptions -> init
Rule 82    assignOptions -> initDict
Rule 83    assignOptions -> [ expresion ] assignMatrix init
Rule 84    assignMatrix -> [ expresion ] errorAssignMatrix
Rule 85    assignMatrix -> empty
Rule 86    errorAssignMatrix -> <empty>
Rule 87    funcCall -> ID ( opParamCall )
Rule 88    opParamCall -> expresion cyParamCall
Rule 89    opParamCall -> empty
Rule 90    cyParamCall -> , expresion cyParamCall
Rule 91    cyParamCall -> empty
Rule 92    struct -> structType [ CTED ] optionalMatrix
Rule 93    structType -> type
Rule 94    structType -> DICT dict
Rule 95    optionalMatrix -> [ CTED ]
Rule 96    optionalMatrix -> empty
Rule 97    condition -> errorCondition IF ( expresion ) { body } optionalElse
Rule 98    errorCondition -> <empty>
Rule 99    optionalElse -> errorElse ELSE { body }
Rule 100   optionalElse -> empty
Rule 101   errorElse -> <empty>
Rule 102   dict -> errorDict ( type : type )
Rule 103   errorDict -> <empty>
Rule 104   expresion -> sExp cyExpresion errorExpresion
Rule 105   errorExpresion -> <empty>
Rule 106   cyExpresion -> AND expresion
Rule 107   cyExpresion -> OR expresion
Rule 108   cyExpresion -> empty
Rule 109   sExp -> exp errorOpSExp opSExp
Rule 110   opSExp -> prueba EQ exp
Rule 111   opSExp -> prueba DIF exp
Rule 112   opSExp -> prueba LTOEQ exp
Rule 113   opSExp -> prueba GTOEQ exp
Rule 114   opSExp -> prueba GT exp
Rule 115   opSExp -> prueba LT exp
Rule 116   opSExp -> empty
Rule 117   prueba -> <empty>
Rule 118   errorOpSExp -> <empty>
Rule 119   exp -> term errorCyExp cyExp
Rule 120   cyExp -> PLUS term
Rule 121   cyExp -> MINUS term
Rule 122   cyExp -> empty
Rule 123   errorCyExp -> <empty>
Rule 124   term -> fact cyTerm
Rule 125   cyTerm -> MULT errorFact fact
Rule 126   cyTerm -> DIV fact
Rule 127   cyTerm -> empty
Rule 128   fact -> CTES
Rule 129   fact -> cte
Rule 130   fact -> funcCall
Rule 131   fact -> ( expresion )
Rule 132   fact -> ID opAccess errorOpAccess
Rule 133   errorFact -> <empty>
Rule 134   opAccess -> opStruct
Rule 135   opAccess -> opDictionary
Rule 136   opAccess -> empty
Rule 137   errorOpAccess -> <empty>
Rule 138   opStruct -> errorOpStruct [ expresion ] opMatrix
Rule 139   errorOpStruct -> <empty>
Rule 140   opMatrix -> errorOpMatrix [ expresion ]
Rule 141   opMatrix -> empty
Rule 142   errorOpMatrix -> <empty>
Rule 143   opDictionary -> . dictIndex
Rule 144   dictIndex -> FIRST
Rule 145   dictIndex -> LAST
Rule 146   cte -> CTED
Rule 147   cte -> CTEF
Rule 148   cte -> TRUE
Rule 149   cte -> FALSE
Rule 150   empty -> <empty>
Rule 151   printTables -> <empty>

Terminals, with rules where they appear

(                    : 33 47 75 77 87 97 102 131
)                    : 33 47 75 77 87 97 102 131
,                    : 43 90
.                    : 143
:                    : 33 102
;                    : 21 41 50 61 63 65 77 77
AND                  : 106
ASGN                 : 29 33
BOOL                 : 16
CTED                 : 92 95 146
CTEF                 : 147
CTES                 : 35 128
DICT                 : 65 94
DIF                  : 111
DIV                  : 126
ELSE                 : 99
EQ                   : 110
FALSE                : 149
FIRST                : 144
FLOAT                : 14
FOR                  : 77
FUNC                 : 47
GT                   : 114
GTOEQ                : 113
ID                   : 1 37 39 43 47 61 63 65 79 87 132
IF                   : 97
INT                  : 13
LAST                 : 145
LT                   : 115
LTOEQ                : 112
MAIN                 : 18
MINUS                : 121
MULT                 : 125
OR                   : 107
PLUS                 : 120
PROGRAM              : 1
RETURN               : 50
RETURNS              : 57
STRING               : 15
STRUCT               : 63
TRUE                 : 148
VARS                 : 10
WHILE                : 75
[                    : 83 84 92 95 138 140
]                    : 83 84 92 95 138 140
error                : 
{                    : 1 18 57 58 75 77 97 99
}                    : 1 18 47 75 77 97 99

Nonterminals, with rules where they appear

assign               : 24 77 77
assignMatrix         : 83
assignOptions        : 79
basicDeclare         : 26
basicStatements      : 21
body                 : 18 57 58 72 75 77 97 99
changeCurrentScope   : 1
clearVarsTable       : 18 47
condition            : 22
cte                  : 36 129
cyDeclare            : 61 63 65
cyExp                : 119
cyExpresion          : 104
cyInstruction        : 69
cyParam              : 39
cyParamCall          : 88 90
cyTerm               : 124
cyTypeParam          : 39 43 61
cycle                : 23
declare              : 10 67
dict                 : 65 94
dictDeclare          : 28
dictIndex            : 143
dictType             : 33 33
empty                : 7 9 42 44 53 68 70 85 89 91 96 100 108 116 122 127 136 141
errorAssign          : 79
errorAssignMatrix    : 84
errorBasicDeclare    : 61
errorBody            : 69
errorCondition       : 97
errorCyExp           : 119
errorCyParam         : 41
errorDict            : 102
errorDictDeclare     : 65
errorDictType        : 35
errorElse            : 99
errorExpresion       : 104
errorFact            : 125
errorForCycle        : 77
errorFunction        : 47
errorInit            : 29
errorInitDict        : 33
errorMain            : 18
errorOpAccess        : 132
errorOpMatrix        : 140
errorOpParameters    : 52
errorOpReturns       : 57
errorOpSExp          : 109
errorOpStruct        : 138
errorParam           : 39
errorProgram         : 1
errorReturn          : 50
errorStructDeclare   : 63
errorType            : 13
errorVars            : 10
errorWhileCycle      : 75
exp                  : 109 110 111 112 113 114 115
expresion            : 31 50 75 77 83 84 88 90 97 106 107 131 138 140
fact                 : 124 125 126
flagParameters       : 47 47
forCycle             : 73
funcCall             : 25 32 130
function             : 8
init                 : 81 83
initDict             : 82
initWith             : 29
instr                : 72
main                 : 1
opAccess             : 132
opDictionary         : 135
opFunctions          : 1 8
opMatrix             : 138
opParamCall          : 87
opParameters         : 47
opReturns            : 47
opSExp               : 109
opStruct             : 134
opVars               : 1 18 57 58
optionalElse         : 97
optionalMatrix       : 92
param                : 41 52
printTables          : 1
program              : 0
prueba               : 110 111 112 113 114 115
return               : 57
sExp                 : 104
saveID               : 41 42 43 61
saveMain             : 18
saveParamToDirProc   : 52
saveProc             : 1 47
saveReturnType       : 57
saveType             : 1 39 47 61
saveTypeParam        : 41 42 43
struct               : 63
structDeclare        : 27
structType           : 92
term                 : 119 120 121
type                 : 39 57 61 93 102 102
vars                 : 6
whileCycle           : 74

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . errorProgram PROGRAM saveType ID saveProc { opVars changeCurrentScope opFunctions main } printTables
    (5) errorProgram -> .

    PROGRAM         reduce using rule 5 (errorProgram -> .)

    errorProgram                   shift and go to state 2
    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> errorProgram . PROGRAM saveType ID saveProc { opVars changeCurrentScope opFunctions main } printTables

    PROGRAM         shift and go to state 3


state 3

    (1) program -> errorProgram PROGRAM . saveType ID saveProc { opVars changeCurrentScope opFunctions main } printTables
    (3) saveType -> .

    ID              reduce using rule 3 (saveType -> .)

    saveType                       shift and go to state 4

state 4

    (1) program -> errorProgram PROGRAM saveType . ID saveProc { opVars changeCurrentScope opFunctions main } printTables

    ID              shift and go to state 5


state 5

    (1) program -> errorProgram PROGRAM saveType ID . saveProc { opVars changeCurrentScope opFunctions main } printTables
    (4) saveProc -> .

    {               reduce using rule 4 (saveProc -> .)

    saveProc                       shift and go to state 6

state 6

    (1) program -> errorProgram PROGRAM saveType ID saveProc . { opVars changeCurrentScope opFunctions main } printTables

    {               shift and go to state 7


state 7

    (1) program -> errorProgram PROGRAM saveType ID saveProc { . opVars changeCurrentScope opFunctions main } printTables
    (6) opVars -> . vars
    (7) opVars -> . empty
    (10) vars -> . errorVars VARS declare
    (150) empty -> .
    (12) errorVars -> .

    MAIN            reduce using rule 150 (empty -> .)
    FUNC            reduce using rule 150 (empty -> .)
    VARS            reduce using rule 12 (errorVars -> .)

    vars                           shift and go to state 8
    opVars                         shift and go to state 9
    errorVars                      shift and go to state 10
    empty                          shift and go to state 11

state 8

    (6) opVars -> vars .

    ID              reduce using rule 6 (opVars -> vars .)
    IF              reduce using rule 6 (opVars -> vars .)
    FOR             reduce using rule 6 (opVars -> vars .)
    WHILE           reduce using rule 6 (opVars -> vars .)
    }               reduce using rule 6 (opVars -> vars .)
    MAIN            reduce using rule 6 (opVars -> vars .)
    FUNC            reduce using rule 6 (opVars -> vars .)
    RETURN          reduce using rule 6 (opVars -> vars .)


state 9

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars . changeCurrentScope opFunctions main } printTables
    (2) changeCurrentScope -> .

    MAIN            reduce using rule 2 (changeCurrentScope -> .)
    FUNC            reduce using rule 2 (changeCurrentScope -> .)

    changeCurrentScope             shift and go to state 12

state 10

    (10) vars -> errorVars . VARS declare

    VARS            shift and go to state 13


state 11

    (7) opVars -> empty .

    ID              reduce using rule 7 (opVars -> empty .)
    IF              reduce using rule 7 (opVars -> empty .)
    FOR             reduce using rule 7 (opVars -> empty .)
    WHILE           reduce using rule 7 (opVars -> empty .)
    }               reduce using rule 7 (opVars -> empty .)
    MAIN            reduce using rule 7 (opVars -> empty .)
    FUNC            reduce using rule 7 (opVars -> empty .)
    RETURN          reduce using rule 7 (opVars -> empty .)


state 12

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars changeCurrentScope . opFunctions main } printTables
    (8) opFunctions -> . function opFunctions
    (9) opFunctions -> . empty
    (47) function -> . errorFunction FUNC saveType ID saveProc flagParameters ( opParameters ) flagParameters opReturns } clearVarsTable
    (150) empty -> .
    (48) errorFunction -> .

    MAIN            reduce using rule 150 (empty -> .)
    FUNC            reduce using rule 48 (errorFunction -> .)

    function                       shift and go to state 16
    errorFunction                  shift and go to state 17
    empty                          shift and go to state 15
    opFunctions                    shift and go to state 14

state 13

    (10) vars -> errorVars VARS . declare
    (26) declare -> . basicDeclare
    (27) declare -> . structDeclare
    (28) declare -> . dictDeclare
    (61) basicDeclare -> . saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (63) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (65) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (3) saveType -> .
    (64) errorStructDeclare -> .
    (66) errorDictDeclare -> .

    FLOAT           reduce using rule 3 (saveType -> .)
    STRING          reduce using rule 3 (saveType -> .)
    BOOL            reduce using rule 3 (saveType -> .)
    INT             reduce using rule 3 (saveType -> .)
    STRUCT          reduce using rule 64 (errorStructDeclare -> .)
    DICT            reduce using rule 66 (errorDictDeclare -> .)

    dictDeclare                    shift and go to state 18
    saveType                       shift and go to state 19
    errorDictDeclare               shift and go to state 20
    structDeclare                  shift and go to state 21
    errorStructDeclare             shift and go to state 22
    basicDeclare                   shift and go to state 23
    declare                        shift and go to state 24

state 14

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars changeCurrentScope opFunctions . main } printTables
    (18) main -> . errorMain MAIN saveMain { opVars body } clearVarsTable
    (20) errorMain -> .

    MAIN            reduce using rule 20 (errorMain -> .)

    main                           shift and go to state 25
    errorMain                      shift and go to state 26

state 15

    (9) opFunctions -> empty .

    MAIN            reduce using rule 9 (opFunctions -> empty .)


state 16

    (8) opFunctions -> function . opFunctions
    (8) opFunctions -> . function opFunctions
    (9) opFunctions -> . empty
    (47) function -> . errorFunction FUNC saveType ID saveProc flagParameters ( opParameters ) flagParameters opReturns } clearVarsTable
    (150) empty -> .
    (48) errorFunction -> .

    MAIN            reduce using rule 150 (empty -> .)
    FUNC            reduce using rule 48 (errorFunction -> .)

    function                       shift and go to state 16
    errorFunction                  shift and go to state 17
    empty                          shift and go to state 15
    opFunctions                    shift and go to state 27

state 17

    (47) function -> errorFunction . FUNC saveType ID saveProc flagParameters ( opParameters ) flagParameters opReturns } clearVarsTable

    FUNC            shift and go to state 28


state 18

    (28) declare -> dictDeclare .

    MAIN            reduce using rule 28 (declare -> dictDeclare .)
    FUNC            reduce using rule 28 (declare -> dictDeclare .)
    }               reduce using rule 28 (declare -> dictDeclare .)
    ID              reduce using rule 28 (declare -> dictDeclare .)
    IF              reduce using rule 28 (declare -> dictDeclare .)
    FOR             reduce using rule 28 (declare -> dictDeclare .)
    WHILE           reduce using rule 28 (declare -> dictDeclare .)
    RETURN          reduce using rule 28 (declare -> dictDeclare .)


state 19

    (61) basicDeclare -> saveType . type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (13) type -> . errorType INT
    (14) type -> . FLOAT
    (15) type -> . STRING
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    BOOL            shift and go to state 32
    INT             reduce using rule 17 (errorType -> .)

    errorType                      shift and go to state 31
    type                           shift and go to state 33

state 20

    (65) dictDeclare -> errorDictDeclare . DICT ID dict ; cyDeclare

    DICT            shift and go to state 34


state 21

    (27) declare -> structDeclare .

    MAIN            reduce using rule 27 (declare -> structDeclare .)
    FUNC            reduce using rule 27 (declare -> structDeclare .)
    }               reduce using rule 27 (declare -> structDeclare .)
    ID              reduce using rule 27 (declare -> structDeclare .)
    IF              reduce using rule 27 (declare -> structDeclare .)
    FOR             reduce using rule 27 (declare -> structDeclare .)
    WHILE           reduce using rule 27 (declare -> structDeclare .)
    RETURN          reduce using rule 27 (declare -> structDeclare .)


state 22

    (63) structDeclare -> errorStructDeclare . STRUCT ID struct ; cyDeclare

    STRUCT          shift and go to state 35


state 23

    (26) declare -> basicDeclare .

    MAIN            reduce using rule 26 (declare -> basicDeclare .)
    FUNC            reduce using rule 26 (declare -> basicDeclare .)
    }               reduce using rule 26 (declare -> basicDeclare .)
    ID              reduce using rule 26 (declare -> basicDeclare .)
    IF              reduce using rule 26 (declare -> basicDeclare .)
    FOR             reduce using rule 26 (declare -> basicDeclare .)
    WHILE           reduce using rule 26 (declare -> basicDeclare .)
    RETURN          reduce using rule 26 (declare -> basicDeclare .)


state 24

    (10) vars -> errorVars VARS declare .

    RETURN          reduce using rule 10 (vars -> errorVars VARS declare .)
    ID              reduce using rule 10 (vars -> errorVars VARS declare .)
    IF              reduce using rule 10 (vars -> errorVars VARS declare .)
    FOR             reduce using rule 10 (vars -> errorVars VARS declare .)
    WHILE           reduce using rule 10 (vars -> errorVars VARS declare .)
    MAIN            reduce using rule 10 (vars -> errorVars VARS declare .)
    FUNC            reduce using rule 10 (vars -> errorVars VARS declare .)
    }               reduce using rule 10 (vars -> errorVars VARS declare .)


state 25

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars changeCurrentScope opFunctions main . } printTables

    }               shift and go to state 36


state 26

    (18) main -> errorMain . MAIN saveMain { opVars body } clearVarsTable

    MAIN            shift and go to state 37


state 27

    (8) opFunctions -> function opFunctions .

    MAIN            reduce using rule 8 (opFunctions -> function opFunctions .)


state 28

    (47) function -> errorFunction FUNC . saveType ID saveProc flagParameters ( opParameters ) flagParameters opReturns } clearVarsTable
    (3) saveType -> .

    ID              reduce using rule 3 (saveType -> .)

    saveType                       shift and go to state 38

state 29

    (14) type -> FLOAT .

    ID              reduce using rule 14 (type -> FLOAT .)
    )               reduce using rule 14 (type -> FLOAT .)
    [               reduce using rule 14 (type -> FLOAT .)
    {               reduce using rule 14 (type -> FLOAT .)
    :               reduce using rule 14 (type -> FLOAT .)


state 30

    (15) type -> STRING .

    ID              reduce using rule 15 (type -> STRING .)
    )               reduce using rule 15 (type -> STRING .)
    [               reduce using rule 15 (type -> STRING .)
    {               reduce using rule 15 (type -> STRING .)
    :               reduce using rule 15 (type -> STRING .)


state 31

    (13) type -> errorType . INT

    INT             shift and go to state 39


state 32

    (16) type -> BOOL .

    ID              reduce using rule 16 (type -> BOOL .)
    )               reduce using rule 16 (type -> BOOL .)
    [               reduce using rule 16 (type -> BOOL .)
    {               reduce using rule 16 (type -> BOOL .)
    :               reduce using rule 16 (type -> BOOL .)


state 33

    (61) basicDeclare -> saveType type . errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (62) errorBasicDeclare -> .

    ID              reduce using rule 62 (errorBasicDeclare -> .)

    errorBasicDeclare              shift and go to state 40

state 34

    (65) dictDeclare -> errorDictDeclare DICT . ID dict ; cyDeclare

    ID              shift and go to state 41


state 35

    (63) structDeclare -> errorStructDeclare STRUCT . ID struct ; cyDeclare

    ID              shift and go to state 42


state 36

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars changeCurrentScope opFunctions main } . printTables
    (151) printTables -> .

    $end            reduce using rule 151 (printTables -> .)

    printTables                    shift and go to state 43

state 37

    (18) main -> errorMain MAIN . saveMain { opVars body } clearVarsTable
    (19) saveMain -> .

    {               reduce using rule 19 (saveMain -> .)

    saveMain                       shift and go to state 44

state 38

    (47) function -> errorFunction FUNC saveType . ID saveProc flagParameters ( opParameters ) flagParameters opReturns } clearVarsTable

    ID              shift and go to state 45


state 39

    (13) type -> errorType INT .

    ID              reduce using rule 13 (type -> errorType INT .)
    )               reduce using rule 13 (type -> errorType INT .)
    [               reduce using rule 13 (type -> errorType INT .)
    {               reduce using rule 13 (type -> errorType INT .)
    :               reduce using rule 13 (type -> errorType INT .)


state 40

    (61) basicDeclare -> saveType type errorBasicDeclare . ID cyTypeParam saveID ; cyDeclare

    ID              shift and go to state 46


state 41

    (65) dictDeclare -> errorDictDeclare DICT ID . dict ; cyDeclare
    (102) dict -> . errorDict ( type : type )
    (103) errorDict -> .

    (               reduce using rule 103 (errorDict -> .)

    dict                           shift and go to state 48
    errorDict                      shift and go to state 47

state 42

    (63) structDeclare -> errorStructDeclare STRUCT ID . struct ; cyDeclare
    (92) struct -> . structType [ CTED ] optionalMatrix
    (93) structType -> . type
    (94) structType -> . DICT dict
    (13) type -> . errorType INT
    (14) type -> . FLOAT
    (15) type -> . STRING
    (16) type -> . BOOL
    (17) errorType -> .

    DICT            shift and go to state 51
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    BOOL            shift and go to state 32
    INT             reduce using rule 17 (errorType -> .)

    structType                     shift and go to state 49
    struct                         shift and go to state 50
    errorType                      shift and go to state 31
    type                           shift and go to state 52

state 43

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars changeCurrentScope opFunctions main } printTables .

    $end            reduce using rule 1 (program -> errorProgram PROGRAM saveType ID saveProc { opVars changeCurrentScope opFunctions main } printTables .)


state 44

    (18) main -> errorMain MAIN saveMain . { opVars body } clearVarsTable

    {               shift and go to state 53


state 45

    (47) function -> errorFunction FUNC saveType ID . saveProc flagParameters ( opParameters ) flagParameters opReturns } clearVarsTable
    (4) saveProc -> .

    (               reduce using rule 4 (saveProc -> .)

    saveProc                       shift and go to state 54

state 46

    (61) basicDeclare -> saveType type errorBasicDeclare ID . cyTypeParam saveID ; cyDeclare
    (43) cyTypeParam -> . , saveID saveTypeParam ID cyTypeParam
    (44) cyTypeParam -> . empty
    (150) empty -> .

    ,               shift and go to state 55
    ;               reduce using rule 150 (empty -> .)

    empty                          shift and go to state 56
    cyTypeParam                    shift and go to state 57

state 47

    (102) dict -> errorDict . ( type : type )

    (               shift and go to state 58


state 48

    (65) dictDeclare -> errorDictDeclare DICT ID dict . ; cyDeclare

    ;               shift and go to state 59


state 49

    (92) struct -> structType . [ CTED ] optionalMatrix

    [               shift and go to state 60


state 50

    (63) structDeclare -> errorStructDeclare STRUCT ID struct . ; cyDeclare

    ;               shift and go to state 61


state 51

    (94) structType -> DICT . dict
    (102) dict -> . errorDict ( type : type )
    (103) errorDict -> .

    (               reduce using rule 103 (errorDict -> .)

    dict                           shift and go to state 62
    errorDict                      shift and go to state 47

state 52

    (93) structType -> type .

    [               reduce using rule 93 (structType -> type .)


state 53

    (18) main -> errorMain MAIN saveMain { . opVars body } clearVarsTable
    (6) opVars -> . vars
    (7) opVars -> . empty
    (10) vars -> . errorVars VARS declare
    (150) empty -> .
    (12) errorVars -> .

    }               reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    VARS            reduce using rule 12 (errorVars -> .)

    vars                           shift and go to state 8
    opVars                         shift and go to state 63
    errorVars                      shift and go to state 10
    empty                          shift and go to state 11

state 54

    (47) function -> errorFunction FUNC saveType ID saveProc . flagParameters ( opParameters ) flagParameters opReturns } clearVarsTable
    (54) flagParameters -> .

    (               reduce using rule 54 (flagParameters -> .)

    flagParameters                 shift and go to state 64

state 55

    (43) cyTypeParam -> , . saveID saveTypeParam ID cyTypeParam
    (11) saveID -> .

    ID              reduce using rule 11 (saveID -> .)

    saveID                         shift and go to state 65

state 56

    (44) cyTypeParam -> empty .

    ;               reduce using rule 44 (cyTypeParam -> empty .)
    )               reduce using rule 44 (cyTypeParam -> empty .)


state 57

    (61) basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam . saveID ; cyDeclare
    (11) saveID -> .

    ;               reduce using rule 11 (saveID -> .)

    saveID                         shift and go to state 66

state 58

    (102) dict -> errorDict ( . type : type )
    (13) type -> . errorType INT
    (14) type -> . FLOAT
    (15) type -> . STRING
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    BOOL            shift and go to state 32
    INT             reduce using rule 17 (errorType -> .)

    errorType                      shift and go to state 31
    type                           shift and go to state 67

state 59

    (65) dictDeclare -> errorDictDeclare DICT ID dict ; . cyDeclare
    (67) cyDeclare -> . declare
    (68) cyDeclare -> . empty
    (26) declare -> . basicDeclare
    (27) declare -> . structDeclare
    (28) declare -> . dictDeclare
    (150) empty -> .
    (61) basicDeclare -> . saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (63) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (65) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (3) saveType -> .
    (64) errorStructDeclare -> .
    (66) errorDictDeclare -> .

    MAIN            reduce using rule 150 (empty -> .)
    FUNC            reduce using rule 150 (empty -> .)
    }               reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)
    FLOAT           reduce using rule 3 (saveType -> .)
    STRING          reduce using rule 3 (saveType -> .)
    BOOL            reduce using rule 3 (saveType -> .)
    INT             reduce using rule 3 (saveType -> .)
    STRUCT          reduce using rule 64 (errorStructDeclare -> .)
    DICT            reduce using rule 66 (errorDictDeclare -> .)

    dictDeclare                    shift and go to state 18
    cyDeclare                      shift and go to state 68
    saveType                       shift and go to state 19
    structDeclare                  shift and go to state 21
    errorDictDeclare               shift and go to state 20
    errorStructDeclare             shift and go to state 22
    basicDeclare                   shift and go to state 23
    declare                        shift and go to state 69
    empty                          shift and go to state 70

state 60

    (92) struct -> structType [ . CTED ] optionalMatrix

    CTED            shift and go to state 71


state 61

    (63) structDeclare -> errorStructDeclare STRUCT ID struct ; . cyDeclare
    (67) cyDeclare -> . declare
    (68) cyDeclare -> . empty
    (26) declare -> . basicDeclare
    (27) declare -> . structDeclare
    (28) declare -> . dictDeclare
    (150) empty -> .
    (61) basicDeclare -> . saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (63) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (65) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (3) saveType -> .
    (64) errorStructDeclare -> .
    (66) errorDictDeclare -> .

    MAIN            reduce using rule 150 (empty -> .)
    FUNC            reduce using rule 150 (empty -> .)
    }               reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)
    FLOAT           reduce using rule 3 (saveType -> .)
    STRING          reduce using rule 3 (saveType -> .)
    BOOL            reduce using rule 3 (saveType -> .)
    INT             reduce using rule 3 (saveType -> .)
    STRUCT          reduce using rule 64 (errorStructDeclare -> .)
    DICT            reduce using rule 66 (errorDictDeclare -> .)

    dictDeclare                    shift and go to state 18
    cyDeclare                      shift and go to state 72
    saveType                       shift and go to state 19
    errorDictDeclare               shift and go to state 20
    structDeclare                  shift and go to state 21
    basicDeclare                   shift and go to state 23
    declare                        shift and go to state 69
    empty                          shift and go to state 70
    errorStructDeclare             shift and go to state 22

state 62

    (94) structType -> DICT dict .

    [               reduce using rule 94 (structType -> DICT dict .)


state 63

    (18) main -> errorMain MAIN saveMain { opVars . body } clearVarsTable
    (69) body -> . errorBody cyInstruction
    (70) body -> . empty
    (71) errorBody -> .
    (150) empty -> .

    ID              reduce using rule 71 (errorBody -> .)
    IF              reduce using rule 71 (errorBody -> .)
    FOR             reduce using rule 71 (errorBody -> .)
    WHILE           reduce using rule 71 (errorBody -> .)
    }               reduce using rule 150 (empty -> .)

    body                           shift and go to state 73
    errorBody                      shift and go to state 74
    empty                          shift and go to state 75

state 64

    (47) function -> errorFunction FUNC saveType ID saveProc flagParameters . ( opParameters ) flagParameters opReturns } clearVarsTable

    (               shift and go to state 76


state 65

    (43) cyTypeParam -> , saveID . saveTypeParam ID cyTypeParam
    (45) saveTypeParam -> .

    ID              reduce using rule 45 (saveTypeParam -> .)

    saveTypeParam                  shift and go to state 77

state 66

    (61) basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID . ; cyDeclare

    ;               shift and go to state 78


state 67

    (102) dict -> errorDict ( type . : type )

    :               shift and go to state 79


state 68

    (65) dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .

    MAIN            reduce using rule 65 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    FUNC            reduce using rule 65 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    }               reduce using rule 65 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    ID              reduce using rule 65 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    IF              reduce using rule 65 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    FOR             reduce using rule 65 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    WHILE           reduce using rule 65 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    RETURN          reduce using rule 65 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)


state 69

    (67) cyDeclare -> declare .

    MAIN            reduce using rule 67 (cyDeclare -> declare .)
    FUNC            reduce using rule 67 (cyDeclare -> declare .)
    }               reduce using rule 67 (cyDeclare -> declare .)
    ID              reduce using rule 67 (cyDeclare -> declare .)
    IF              reduce using rule 67 (cyDeclare -> declare .)
    FOR             reduce using rule 67 (cyDeclare -> declare .)
    WHILE           reduce using rule 67 (cyDeclare -> declare .)
    RETURN          reduce using rule 67 (cyDeclare -> declare .)


state 70

    (68) cyDeclare -> empty .

    MAIN            reduce using rule 68 (cyDeclare -> empty .)
    FUNC            reduce using rule 68 (cyDeclare -> empty .)
    }               reduce using rule 68 (cyDeclare -> empty .)
    ID              reduce using rule 68 (cyDeclare -> empty .)
    IF              reduce using rule 68 (cyDeclare -> empty .)
    FOR             reduce using rule 68 (cyDeclare -> empty .)
    WHILE           reduce using rule 68 (cyDeclare -> empty .)
    RETURN          reduce using rule 68 (cyDeclare -> empty .)


state 71

    (92) struct -> structType [ CTED . ] optionalMatrix

    ]               shift and go to state 80


state 72

    (63) structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .

    MAIN            reduce using rule 63 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    FUNC            reduce using rule 63 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    }               reduce using rule 63 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    ID              reduce using rule 63 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    IF              reduce using rule 63 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    FOR             reduce using rule 63 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    WHILE           reduce using rule 63 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    RETURN          reduce using rule 63 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)


state 73

    (18) main -> errorMain MAIN saveMain { opVars body . } clearVarsTable

    }               shift and go to state 81


state 74

    (69) body -> errorBody . cyInstruction
    (72) cyInstruction -> . instr body
    (21) instr -> . basicStatements ;
    (22) instr -> . condition
    (23) instr -> . cycle
    (24) basicStatements -> . assign
    (25) basicStatements -> . funcCall
    (97) condition -> . errorCondition IF ( expresion ) { body } optionalElse
    (73) cycle -> . forCycle
    (74) cycle -> . whileCycle
    (79) assign -> . ID errorAssign assignOptions
    (87) funcCall -> . ID ( opParamCall )
    (98) errorCondition -> .
    (77) forCycle -> . errorForCycle FOR ( assign ; expresion ; assign ) { body }
    (75) whileCycle -> . errorWhileCycle WHILE ( expresion ) { body }
    (78) errorForCycle -> .
    (76) errorWhileCycle -> .

    ID              shift and go to state 91
    IF              reduce using rule 98 (errorCondition -> .)
    FOR             reduce using rule 78 (errorForCycle -> .)
    WHILE           reduce using rule 76 (errorWhileCycle -> .)

    errorWhileCycle                shift and go to state 85
    funcCall                       shift and go to state 92
    instr                          shift and go to state 82
    forCycle                       shift and go to state 84
    assign                         shift and go to state 94
    whileCycle                     shift and go to state 83
    basicStatements                shift and go to state 89
    errorForCycle                  shift and go to state 90
    errorCondition                 shift and go to state 93
    cyInstruction                  shift and go to state 86
    condition                      shift and go to state 87
    cycle                          shift and go to state 88

state 75

    (70) body -> empty .

    }               reduce using rule 70 (body -> empty .)
    RETURN          reduce using rule 70 (body -> empty .)


state 76

    (47) function -> errorFunction FUNC saveType ID saveProc flagParameters ( . opParameters ) flagParameters opReturns } clearVarsTable
    (52) opParameters -> . param saveParamToDirProc errorOpParameters
    (53) opParameters -> . empty
    (39) param -> . saveType type errorParam ID cyTypeParam cyParam
    (150) empty -> .
    (3) saveType -> .

    )               reduce using rule 150 (empty -> .)
    FLOAT           reduce using rule 3 (saveType -> .)
    STRING          reduce using rule 3 (saveType -> .)
    BOOL            reduce using rule 3 (saveType -> .)
    INT             reduce using rule 3 (saveType -> .)

    opParameters                   shift and go to state 97
    param                          shift and go to state 95
    saveType                       shift and go to state 96
    empty                          shift and go to state 98

state 77

    (43) cyTypeParam -> , saveID saveTypeParam . ID cyTypeParam

    ID              shift and go to state 99


state 78

    (61) basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; . cyDeclare
    (67) cyDeclare -> . declare
    (68) cyDeclare -> . empty
    (26) declare -> . basicDeclare
    (27) declare -> . structDeclare
    (28) declare -> . dictDeclare
    (150) empty -> .
    (61) basicDeclare -> . saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (63) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (65) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (3) saveType -> .
    (64) errorStructDeclare -> .
    (66) errorDictDeclare -> .

    MAIN            reduce using rule 150 (empty -> .)
    FUNC            reduce using rule 150 (empty -> .)
    }               reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)
    FLOAT           reduce using rule 3 (saveType -> .)
    STRING          reduce using rule 3 (saveType -> .)
    BOOL            reduce using rule 3 (saveType -> .)
    INT             reduce using rule 3 (saveType -> .)
    STRUCT          reduce using rule 64 (errorStructDeclare -> .)
    DICT            reduce using rule 66 (errorDictDeclare -> .)

    dictDeclare                    shift and go to state 18
    cyDeclare                      shift and go to state 100
    basicDeclare                   shift and go to state 23
    saveType                       shift and go to state 19
    errorDictDeclare               shift and go to state 20
    empty                          shift and go to state 70
    structDeclare                  shift and go to state 21
    errorStructDeclare             shift and go to state 22
    declare                        shift and go to state 69

state 79

    (102) dict -> errorDict ( type : . type )
    (13) type -> . errorType INT
    (14) type -> . FLOAT
    (15) type -> . STRING
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    BOOL            shift and go to state 32
    INT             reduce using rule 17 (errorType -> .)

    errorType                      shift and go to state 31
    type                           shift and go to state 101

state 80

    (92) struct -> structType [ CTED ] . optionalMatrix
    (95) optionalMatrix -> . [ CTED ]
    (96) optionalMatrix -> . empty
    (150) empty -> .

    [               shift and go to state 103
    ;               reduce using rule 150 (empty -> .)

    empty                          shift and go to state 104
    optionalMatrix                 shift and go to state 102

state 81

    (18) main -> errorMain MAIN saveMain { opVars body } . clearVarsTable
    (49) clearVarsTable -> .

    }               reduce using rule 49 (clearVarsTable -> .)

    clearVarsTable                 shift and go to state 105

state 82

    (72) cyInstruction -> instr . body
    (69) body -> . errorBody cyInstruction
    (70) body -> . empty
    (71) errorBody -> .
    (150) empty -> .

    ID              reduce using rule 71 (errorBody -> .)
    IF              reduce using rule 71 (errorBody -> .)
    FOR             reduce using rule 71 (errorBody -> .)
    WHILE           reduce using rule 71 (errorBody -> .)
    }               reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)

    body                           shift and go to state 106
    errorBody                      shift and go to state 74
    empty                          shift and go to state 75

state 83

    (74) cycle -> whileCycle .

    ID              reduce using rule 74 (cycle -> whileCycle .)
    IF              reduce using rule 74 (cycle -> whileCycle .)
    FOR             reduce using rule 74 (cycle -> whileCycle .)
    WHILE           reduce using rule 74 (cycle -> whileCycle .)
    }               reduce using rule 74 (cycle -> whileCycle .)
    RETURN          reduce using rule 74 (cycle -> whileCycle .)


state 84

    (73) cycle -> forCycle .

    ID              reduce using rule 73 (cycle -> forCycle .)
    IF              reduce using rule 73 (cycle -> forCycle .)
    FOR             reduce using rule 73 (cycle -> forCycle .)
    WHILE           reduce using rule 73 (cycle -> forCycle .)
    }               reduce using rule 73 (cycle -> forCycle .)
    RETURN          reduce using rule 73 (cycle -> forCycle .)


state 85

    (75) whileCycle -> errorWhileCycle . WHILE ( expresion ) { body }

    WHILE           shift and go to state 107


state 86

    (69) body -> errorBody cyInstruction .

    }               reduce using rule 69 (body -> errorBody cyInstruction .)
    RETURN          reduce using rule 69 (body -> errorBody cyInstruction .)


state 87

    (22) instr -> condition .

    ID              reduce using rule 22 (instr -> condition .)
    IF              reduce using rule 22 (instr -> condition .)
    FOR             reduce using rule 22 (instr -> condition .)
    WHILE           reduce using rule 22 (instr -> condition .)
    }               reduce using rule 22 (instr -> condition .)
    RETURN          reduce using rule 22 (instr -> condition .)


state 88

    (23) instr -> cycle .

    ID              reduce using rule 23 (instr -> cycle .)
    IF              reduce using rule 23 (instr -> cycle .)
    FOR             reduce using rule 23 (instr -> cycle .)
    WHILE           reduce using rule 23 (instr -> cycle .)
    }               reduce using rule 23 (instr -> cycle .)
    RETURN          reduce using rule 23 (instr -> cycle .)


state 89

    (21) instr -> basicStatements . ;

    ;               shift and go to state 108


state 90

    (77) forCycle -> errorForCycle . FOR ( assign ; expresion ; assign ) { body }

    FOR             shift and go to state 109


state 91

    (79) assign -> ID . errorAssign assignOptions
    (87) funcCall -> ID . ( opParamCall )
    (80) errorAssign -> .

    (               shift and go to state 110
    [               reduce using rule 80 (errorAssign -> .)
    ASGN            reduce using rule 80 (errorAssign -> .)

    errorAssign                    shift and go to state 111

state 92

    (25) basicStatements -> funcCall .

    ;               reduce using rule 25 (basicStatements -> funcCall .)


state 93

    (97) condition -> errorCondition . IF ( expresion ) { body } optionalElse

    IF              shift and go to state 112


state 94

    (24) basicStatements -> assign .

    ;               reduce using rule 24 (basicStatements -> assign .)


state 95

    (52) opParameters -> param . saveParamToDirProc errorOpParameters
    (55) saveParamToDirProc -> .

    )               reduce using rule 55 (saveParamToDirProc -> .)

    saveParamToDirProc             shift and go to state 113

state 96

    (39) param -> saveType . type errorParam ID cyTypeParam cyParam
    (13) type -> . errorType INT
    (14) type -> . FLOAT
    (15) type -> . STRING
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    BOOL            shift and go to state 32
    INT             reduce using rule 17 (errorType -> .)

    type                           shift and go to state 114
    errorType                      shift and go to state 31

state 97

    (47) function -> errorFunction FUNC saveType ID saveProc flagParameters ( opParameters . ) flagParameters opReturns } clearVarsTable

    )               shift and go to state 115


state 98

    (53) opParameters -> empty .

    )               reduce using rule 53 (opParameters -> empty .)


state 99

    (43) cyTypeParam -> , saveID saveTypeParam ID . cyTypeParam
    (43) cyTypeParam -> . , saveID saveTypeParam ID cyTypeParam
    (44) cyTypeParam -> . empty
    (150) empty -> .

    ,               shift and go to state 55
    ;               reduce using rule 150 (empty -> .)
    )               reduce using rule 150 (empty -> .)

    cyTypeParam                    shift and go to state 116
    empty                          shift and go to state 56

state 100

    (61) basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .

    MAIN            reduce using rule 61 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    FUNC            reduce using rule 61 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    }               reduce using rule 61 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    ID              reduce using rule 61 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    IF              reduce using rule 61 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    FOR             reduce using rule 61 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    WHILE           reduce using rule 61 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    RETURN          reduce using rule 61 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)


state 101

    (102) dict -> errorDict ( type : type . )

    )               shift and go to state 117


state 102

    (92) struct -> structType [ CTED ] optionalMatrix .

    ;               reduce using rule 92 (struct -> structType [ CTED ] optionalMatrix .)


state 103

    (95) optionalMatrix -> [ . CTED ]

    CTED            shift and go to state 118


state 104

    (96) optionalMatrix -> empty .

    ;               reduce using rule 96 (optionalMatrix -> empty .)


state 105

    (18) main -> errorMain MAIN saveMain { opVars body } clearVarsTable .

    }               reduce using rule 18 (main -> errorMain MAIN saveMain { opVars body } clearVarsTable .)


state 106

    (72) cyInstruction -> instr body .

    }               reduce using rule 72 (cyInstruction -> instr body .)
    RETURN          reduce using rule 72 (cyInstruction -> instr body .)


state 107

    (75) whileCycle -> errorWhileCycle WHILE . ( expresion ) { body }

    (               shift and go to state 119


state 108

    (21) instr -> basicStatements ; .

    ID              reduce using rule 21 (instr -> basicStatements ; .)
    IF              reduce using rule 21 (instr -> basicStatements ; .)
    FOR             reduce using rule 21 (instr -> basicStatements ; .)
    WHILE           reduce using rule 21 (instr -> basicStatements ; .)
    }               reduce using rule 21 (instr -> basicStatements ; .)
    RETURN          reduce using rule 21 (instr -> basicStatements ; .)


state 109

    (77) forCycle -> errorForCycle FOR . ( assign ; expresion ; assign ) { body }

    (               shift and go to state 120


state 110

    (87) funcCall -> ID ( . opParamCall )
    (88) opParamCall -> . expresion cyParamCall
    (89) opParamCall -> . empty
    (104) expresion -> . sExp cyExpresion errorExpresion
    (150) empty -> .
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    )               reduce using rule 150 (empty -> .)
    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 128
    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    fact                           shift and go to state 136
    exp                            shift and go to state 135
    opParamCall                    shift and go to state 121
    empty                          shift and go to state 125

state 111

    (79) assign -> ID errorAssign . assignOptions
    (81) assignOptions -> . init
    (82) assignOptions -> . initDict
    (83) assignOptions -> . [ expresion ] assignMatrix init
    (29) init -> . ASGN initWith errorInit
    (33) initDict -> . ASGN ( dictType : dictType ) errorInitDict

    [               shift and go to state 141
    ASGN            shift and go to state 139

    initDict                       shift and go to state 137
    assignOptions                  shift and go to state 138
    init                           shift and go to state 140

state 112

    (97) condition -> errorCondition IF . ( expresion ) { body } optionalElse

    (               shift and go to state 142


state 113

    (52) opParameters -> param saveParamToDirProc . errorOpParameters
    (56) errorOpParameters -> .

    )               reduce using rule 56 (errorOpParameters -> .)

    errorOpParameters              shift and go to state 143

state 114

    (39) param -> saveType type . errorParam ID cyTypeParam cyParam
    (40) errorParam -> .

    ID              reduce using rule 40 (errorParam -> .)

    errorParam                     shift and go to state 144

state 115

    (47) function -> errorFunction FUNC saveType ID saveProc flagParameters ( opParameters ) . flagParameters opReturns } clearVarsTable
    (54) flagParameters -> .

    {               reduce using rule 54 (flagParameters -> .)
    RETURNS         reduce using rule 54 (flagParameters -> .)

    flagParameters                 shift and go to state 145

state 116

    (43) cyTypeParam -> , saveID saveTypeParam ID cyTypeParam .

    ;               reduce using rule 43 (cyTypeParam -> , saveID saveTypeParam ID cyTypeParam .)
    )               reduce using rule 43 (cyTypeParam -> , saveID saveTypeParam ID cyTypeParam .)


state 117

    (102) dict -> errorDict ( type : type ) .

    ;               reduce using rule 102 (dict -> errorDict ( type : type ) .)
    [               reduce using rule 102 (dict -> errorDict ( type : type ) .)


state 118

    (95) optionalMatrix -> [ CTED . ]

    ]               shift and go to state 146


state 119

    (75) whileCycle -> errorWhileCycle WHILE ( . expresion ) { body }
    (104) expresion -> . sExp cyExpresion errorExpresion
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 147
    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 120

    (77) forCycle -> errorForCycle FOR ( . assign ; expresion ; assign ) { body }
    (79) assign -> . ID errorAssign assignOptions

    ID              shift and go to state 148

    assign                         shift and go to state 149

state 121

    (87) funcCall -> ID ( opParamCall . )

    )               shift and go to state 150


state 122

    (148) cte -> TRUE .

    MULT            reduce using rule 148 (cte -> TRUE .)
    DIV             reduce using rule 148 (cte -> TRUE .)
    PLUS            reduce using rule 148 (cte -> TRUE .)
    MINUS           reduce using rule 148 (cte -> TRUE .)
    EQ              reduce using rule 148 (cte -> TRUE .)
    DIF             reduce using rule 148 (cte -> TRUE .)
    LTOEQ           reduce using rule 148 (cte -> TRUE .)
    GTOEQ           reduce using rule 148 (cte -> TRUE .)
    GT              reduce using rule 148 (cte -> TRUE .)
    LT              reduce using rule 148 (cte -> TRUE .)
    AND             reduce using rule 148 (cte -> TRUE .)
    OR              reduce using rule 148 (cte -> TRUE .)
    ,               reduce using rule 148 (cte -> TRUE .)
    )               reduce using rule 148 (cte -> TRUE .)
    ;               reduce using rule 148 (cte -> TRUE .)
    ]               reduce using rule 148 (cte -> TRUE .)
    :               reduce using rule 148 (cte -> TRUE .)


state 123

    (131) fact -> ( . expresion )
    (104) expresion -> . sExp cyExpresion errorExpresion
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 151
    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 124

    (104) expresion -> sExp . cyExpresion errorExpresion
    (106) cyExpresion -> . AND expresion
    (107) cyExpresion -> . OR expresion
    (108) cyExpresion -> . empty
    (150) empty -> .

    AND             shift and go to state 152
    OR              shift and go to state 154
    ,               reduce using rule 150 (empty -> .)
    )               reduce using rule 150 (empty -> .)
    ;               reduce using rule 150 (empty -> .)
    ]               reduce using rule 150 (empty -> .)

    cyExpresion                    shift and go to state 153
    empty                          shift and go to state 155

state 125

    (89) opParamCall -> empty .

    )               reduce using rule 89 (opParamCall -> empty .)


state 126

    (146) cte -> CTED .

    MULT            reduce using rule 146 (cte -> CTED .)
    DIV             reduce using rule 146 (cte -> CTED .)
    PLUS            reduce using rule 146 (cte -> CTED .)
    MINUS           reduce using rule 146 (cte -> CTED .)
    EQ              reduce using rule 146 (cte -> CTED .)
    DIF             reduce using rule 146 (cte -> CTED .)
    LTOEQ           reduce using rule 146 (cte -> CTED .)
    GTOEQ           reduce using rule 146 (cte -> CTED .)
    GT              reduce using rule 146 (cte -> CTED .)
    LT              reduce using rule 146 (cte -> CTED .)
    AND             reduce using rule 146 (cte -> CTED .)
    OR              reduce using rule 146 (cte -> CTED .)
    ,               reduce using rule 146 (cte -> CTED .)
    )               reduce using rule 146 (cte -> CTED .)
    ;               reduce using rule 146 (cte -> CTED .)
    ]               reduce using rule 146 (cte -> CTED .)
    :               reduce using rule 146 (cte -> CTED .)


state 127

    (132) fact -> ID . opAccess errorOpAccess
    (87) funcCall -> ID . ( opParamCall )
    (134) opAccess -> . opStruct
    (135) opAccess -> . opDictionary
    (136) opAccess -> . empty
    (138) opStruct -> . errorOpStruct [ expresion ] opMatrix
    (143) opDictionary -> . . dictIndex
    (150) empty -> .
    (139) errorOpStruct -> .

    (               shift and go to state 110
    .               shift and go to state 160
    MULT            reduce using rule 150 (empty -> .)
    DIV             reduce using rule 150 (empty -> .)
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    EQ              reduce using rule 150 (empty -> .)
    DIF             reduce using rule 150 (empty -> .)
    LTOEQ           reduce using rule 150 (empty -> .)
    GTOEQ           reduce using rule 150 (empty -> .)
    GT              reduce using rule 150 (empty -> .)
    LT              reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    ,               reduce using rule 150 (empty -> .)
    )               reduce using rule 150 (empty -> .)
    ]               reduce using rule 150 (empty -> .)
    ;               reduce using rule 150 (empty -> .)
    [               reduce using rule 139 (errorOpStruct -> .)

    errorOpStruct                  shift and go to state 156
    opDictionary                   shift and go to state 161
    opStruct                       shift and go to state 157
    opAccess                       shift and go to state 158
    empty                          shift and go to state 159

state 128

    (88) opParamCall -> expresion . cyParamCall
    (90) cyParamCall -> . , expresion cyParamCall
    (91) cyParamCall -> . empty
    (150) empty -> .

    ,               shift and go to state 163
    )               reduce using rule 150 (empty -> .)

    cyParamCall                    shift and go to state 162
    empty                          shift and go to state 164

state 129

    (128) fact -> CTES .

    PLUS            reduce using rule 128 (fact -> CTES .)
    MINUS           reduce using rule 128 (fact -> CTES .)
    EQ              reduce using rule 128 (fact -> CTES .)
    DIF             reduce using rule 128 (fact -> CTES .)
    LTOEQ           reduce using rule 128 (fact -> CTES .)
    GTOEQ           reduce using rule 128 (fact -> CTES .)
    GT              reduce using rule 128 (fact -> CTES .)
    LT              reduce using rule 128 (fact -> CTES .)
    AND             reduce using rule 128 (fact -> CTES .)
    OR              reduce using rule 128 (fact -> CTES .)
    ,               reduce using rule 128 (fact -> CTES .)
    )               reduce using rule 128 (fact -> CTES .)
    ;               reduce using rule 128 (fact -> CTES .)
    ]               reduce using rule 128 (fact -> CTES .)
    MULT            reduce using rule 128 (fact -> CTES .)
    DIV             reduce using rule 128 (fact -> CTES .)


state 130

    (119) exp -> term . errorCyExp cyExp
    (123) errorCyExp -> .

    PLUS            reduce using rule 123 (errorCyExp -> .)
    MINUS           reduce using rule 123 (errorCyExp -> .)
    EQ              reduce using rule 123 (errorCyExp -> .)
    DIF             reduce using rule 123 (errorCyExp -> .)
    LTOEQ           reduce using rule 123 (errorCyExp -> .)
    GTOEQ           reduce using rule 123 (errorCyExp -> .)
    GT              reduce using rule 123 (errorCyExp -> .)
    LT              reduce using rule 123 (errorCyExp -> .)
    AND             reduce using rule 123 (errorCyExp -> .)
    OR              reduce using rule 123 (errorCyExp -> .)
    ,               reduce using rule 123 (errorCyExp -> .)
    )               reduce using rule 123 (errorCyExp -> .)
    ;               reduce using rule 123 (errorCyExp -> .)
    ]               reduce using rule 123 (errorCyExp -> .)

    errorCyExp                     shift and go to state 165

state 131

    (149) cte -> FALSE .

    MULT            reduce using rule 149 (cte -> FALSE .)
    DIV             reduce using rule 149 (cte -> FALSE .)
    PLUS            reduce using rule 149 (cte -> FALSE .)
    MINUS           reduce using rule 149 (cte -> FALSE .)
    EQ              reduce using rule 149 (cte -> FALSE .)
    DIF             reduce using rule 149 (cte -> FALSE .)
    LTOEQ           reduce using rule 149 (cte -> FALSE .)
    GTOEQ           reduce using rule 149 (cte -> FALSE .)
    GT              reduce using rule 149 (cte -> FALSE .)
    LT              reduce using rule 149 (cte -> FALSE .)
    AND             reduce using rule 149 (cte -> FALSE .)
    OR              reduce using rule 149 (cte -> FALSE .)
    ,               reduce using rule 149 (cte -> FALSE .)
    )               reduce using rule 149 (cte -> FALSE .)
    ;               reduce using rule 149 (cte -> FALSE .)
    ]               reduce using rule 149 (cte -> FALSE .)
    :               reduce using rule 149 (cte -> FALSE .)


state 132

    (130) fact -> funcCall .

    PLUS            reduce using rule 130 (fact -> funcCall .)
    MINUS           reduce using rule 130 (fact -> funcCall .)
    EQ              reduce using rule 130 (fact -> funcCall .)
    DIF             reduce using rule 130 (fact -> funcCall .)
    LTOEQ           reduce using rule 130 (fact -> funcCall .)
    GTOEQ           reduce using rule 130 (fact -> funcCall .)
    GT              reduce using rule 130 (fact -> funcCall .)
    LT              reduce using rule 130 (fact -> funcCall .)
    AND             reduce using rule 130 (fact -> funcCall .)
    OR              reduce using rule 130 (fact -> funcCall .)
    ,               reduce using rule 130 (fact -> funcCall .)
    )               reduce using rule 130 (fact -> funcCall .)
    ;               reduce using rule 130 (fact -> funcCall .)
    ]               reduce using rule 130 (fact -> funcCall .)
    MULT            reduce using rule 130 (fact -> funcCall .)
    DIV             reduce using rule 130 (fact -> funcCall .)


state 133

    (129) fact -> cte .

    PLUS            reduce using rule 129 (fact -> cte .)
    MINUS           reduce using rule 129 (fact -> cte .)
    EQ              reduce using rule 129 (fact -> cte .)
    DIF             reduce using rule 129 (fact -> cte .)
    LTOEQ           reduce using rule 129 (fact -> cte .)
    GTOEQ           reduce using rule 129 (fact -> cte .)
    GT              reduce using rule 129 (fact -> cte .)
    LT              reduce using rule 129 (fact -> cte .)
    AND             reduce using rule 129 (fact -> cte .)
    OR              reduce using rule 129 (fact -> cte .)
    ,               reduce using rule 129 (fact -> cte .)
    )               reduce using rule 129 (fact -> cte .)
    ;               reduce using rule 129 (fact -> cte .)
    ]               reduce using rule 129 (fact -> cte .)
    MULT            reduce using rule 129 (fact -> cte .)
    DIV             reduce using rule 129 (fact -> cte .)


state 134

    (147) cte -> CTEF .

    MULT            reduce using rule 147 (cte -> CTEF .)
    DIV             reduce using rule 147 (cte -> CTEF .)
    PLUS            reduce using rule 147 (cte -> CTEF .)
    MINUS           reduce using rule 147 (cte -> CTEF .)
    EQ              reduce using rule 147 (cte -> CTEF .)
    DIF             reduce using rule 147 (cte -> CTEF .)
    LTOEQ           reduce using rule 147 (cte -> CTEF .)
    GTOEQ           reduce using rule 147 (cte -> CTEF .)
    GT              reduce using rule 147 (cte -> CTEF .)
    LT              reduce using rule 147 (cte -> CTEF .)
    AND             reduce using rule 147 (cte -> CTEF .)
    OR              reduce using rule 147 (cte -> CTEF .)
    ,               reduce using rule 147 (cte -> CTEF .)
    )               reduce using rule 147 (cte -> CTEF .)
    ;               reduce using rule 147 (cte -> CTEF .)
    ]               reduce using rule 147 (cte -> CTEF .)
    :               reduce using rule 147 (cte -> CTEF .)


state 135

    (109) sExp -> exp . errorOpSExp opSExp
    (118) errorOpSExp -> .

    EQ              reduce using rule 118 (errorOpSExp -> .)
    DIF             reduce using rule 118 (errorOpSExp -> .)
    LTOEQ           reduce using rule 118 (errorOpSExp -> .)
    GTOEQ           reduce using rule 118 (errorOpSExp -> .)
    GT              reduce using rule 118 (errorOpSExp -> .)
    LT              reduce using rule 118 (errorOpSExp -> .)
    AND             reduce using rule 118 (errorOpSExp -> .)
    OR              reduce using rule 118 (errorOpSExp -> .)
    ,               reduce using rule 118 (errorOpSExp -> .)
    )               reduce using rule 118 (errorOpSExp -> .)
    ;               reduce using rule 118 (errorOpSExp -> .)
    ]               reduce using rule 118 (errorOpSExp -> .)

    errorOpSExp                    shift and go to state 166

state 136

    (124) term -> fact . cyTerm
    (125) cyTerm -> . MULT errorFact fact
    (126) cyTerm -> . DIV fact
    (127) cyTerm -> . empty
    (150) empty -> .

    MULT            shift and go to state 168
    DIV             shift and go to state 169
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    EQ              reduce using rule 150 (empty -> .)
    DIF             reduce using rule 150 (empty -> .)
    LTOEQ           reduce using rule 150 (empty -> .)
    GTOEQ           reduce using rule 150 (empty -> .)
    GT              reduce using rule 150 (empty -> .)
    LT              reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    ,               reduce using rule 150 (empty -> .)
    )               reduce using rule 150 (empty -> .)
    ;               reduce using rule 150 (empty -> .)
    ]               reduce using rule 150 (empty -> .)

    cyTerm                         shift and go to state 167
    empty                          shift and go to state 170

state 137

    (82) assignOptions -> initDict .

    ;               reduce using rule 82 (assignOptions -> initDict .)
    )               reduce using rule 82 (assignOptions -> initDict .)


state 138

    (79) assign -> ID errorAssign assignOptions .

    )               reduce using rule 79 (assign -> ID errorAssign assignOptions .)
    ;               reduce using rule 79 (assign -> ID errorAssign assignOptions .)


state 139

    (29) init -> ASGN . initWith errorInit
    (33) initDict -> ASGN . ( dictType : dictType ) errorInitDict
    (31) initWith -> . expresion
    (32) initWith -> . funcCall
    (104) expresion -> . sExp cyExpresion errorExpresion
    (87) funcCall -> . ID ( opParamCall )
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE

    (               shift and go to state 172
    ID              shift and go to state 173
    CTES            shift and go to state 129
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 174
    initWith                       shift and go to state 171
    funcCall                       shift and go to state 175
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    term                           shift and go to state 130
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 140

    (81) assignOptions -> init .

    ;               reduce using rule 81 (assignOptions -> init .)
    )               reduce using rule 81 (assignOptions -> init .)


state 141

    (83) assignOptions -> [ . expresion ] assignMatrix init
    (104) expresion -> . sExp cyExpresion errorExpresion
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 176
    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 142

    (97) condition -> errorCondition IF ( . expresion ) { body } optionalElse
    (104) expresion -> . sExp cyExpresion errorExpresion
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 177
    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 143

    (52) opParameters -> param saveParamToDirProc errorOpParameters .

    )               reduce using rule 52 (opParameters -> param saveParamToDirProc errorOpParameters .)


state 144

    (39) param -> saveType type errorParam . ID cyTypeParam cyParam

    ID              shift and go to state 178


state 145

    (47) function -> errorFunction FUNC saveType ID saveProc flagParameters ( opParameters ) flagParameters . opReturns } clearVarsTable
    (57) opReturns -> . errorOpReturns RETURNS type saveReturnType { opVars body return
    (58) opReturns -> . { opVars body
    (60) errorOpReturns -> .

    {               shift and go to state 180
    RETURNS         reduce using rule 60 (errorOpReturns -> .)

    errorOpReturns                 shift and go to state 179
    opReturns                      shift and go to state 181

state 146

    (95) optionalMatrix -> [ CTED ] .

    ;               reduce using rule 95 (optionalMatrix -> [ CTED ] .)


state 147

    (75) whileCycle -> errorWhileCycle WHILE ( expresion . ) { body }

    )               shift and go to state 182


state 148

    (79) assign -> ID . errorAssign assignOptions
    (80) errorAssign -> .

    [               reduce using rule 80 (errorAssign -> .)
    ASGN            reduce using rule 80 (errorAssign -> .)

    errorAssign                    shift and go to state 111

state 149

    (77) forCycle -> errorForCycle FOR ( assign . ; expresion ; assign ) { body }

    ;               shift and go to state 183


state 150

    (87) funcCall -> ID ( opParamCall ) .

    MULT            reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    DIV             reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    PLUS            reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    MINUS           reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    AND             reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    OR              reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    ,               reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    )               reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    ;               reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    ]               reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    EQ              reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    DIF             reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    LTOEQ           reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    GTOEQ           reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    GT              reduce using rule 87 (funcCall -> ID ( opParamCall ) .)
    LT              reduce using rule 87 (funcCall -> ID ( opParamCall ) .)


state 151

    (131) fact -> ( expresion . )

    )               shift and go to state 184


state 152

    (106) cyExpresion -> AND . expresion
    (104) expresion -> . sExp cyExpresion errorExpresion
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 185
    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 153

    (104) expresion -> sExp cyExpresion . errorExpresion
    (105) errorExpresion -> .

    ,               reduce using rule 105 (errorExpresion -> .)
    )               reduce using rule 105 (errorExpresion -> .)
    ;               reduce using rule 105 (errorExpresion -> .)
    ]               reduce using rule 105 (errorExpresion -> .)

    errorExpresion                 shift and go to state 186

state 154

    (107) cyExpresion -> OR . expresion
    (104) expresion -> . sExp cyExpresion errorExpresion
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 187
    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 155

    (108) cyExpresion -> empty .

    ,               reduce using rule 108 (cyExpresion -> empty .)
    )               reduce using rule 108 (cyExpresion -> empty .)
    ;               reduce using rule 108 (cyExpresion -> empty .)
    ]               reduce using rule 108 (cyExpresion -> empty .)


state 156

    (138) opStruct -> errorOpStruct . [ expresion ] opMatrix

    [               shift and go to state 188


state 157

    (134) opAccess -> opStruct .

    MULT            reduce using rule 134 (opAccess -> opStruct .)
    DIV             reduce using rule 134 (opAccess -> opStruct .)
    PLUS            reduce using rule 134 (opAccess -> opStruct .)
    MINUS           reduce using rule 134 (opAccess -> opStruct .)
    EQ              reduce using rule 134 (opAccess -> opStruct .)
    DIF             reduce using rule 134 (opAccess -> opStruct .)
    LTOEQ           reduce using rule 134 (opAccess -> opStruct .)
    GTOEQ           reduce using rule 134 (opAccess -> opStruct .)
    GT              reduce using rule 134 (opAccess -> opStruct .)
    LT              reduce using rule 134 (opAccess -> opStruct .)
    AND             reduce using rule 134 (opAccess -> opStruct .)
    OR              reduce using rule 134 (opAccess -> opStruct .)
    )               reduce using rule 134 (opAccess -> opStruct .)
    ;               reduce using rule 134 (opAccess -> opStruct .)
    ,               reduce using rule 134 (opAccess -> opStruct .)
    ]               reduce using rule 134 (opAccess -> opStruct .)


state 158

    (132) fact -> ID opAccess . errorOpAccess
    (137) errorOpAccess -> .

    MULT            reduce using rule 137 (errorOpAccess -> .)
    DIV             reduce using rule 137 (errorOpAccess -> .)
    PLUS            reduce using rule 137 (errorOpAccess -> .)
    MINUS           reduce using rule 137 (errorOpAccess -> .)
    EQ              reduce using rule 137 (errorOpAccess -> .)
    DIF             reduce using rule 137 (errorOpAccess -> .)
    LTOEQ           reduce using rule 137 (errorOpAccess -> .)
    GTOEQ           reduce using rule 137 (errorOpAccess -> .)
    GT              reduce using rule 137 (errorOpAccess -> .)
    LT              reduce using rule 137 (errorOpAccess -> .)
    AND             reduce using rule 137 (errorOpAccess -> .)
    OR              reduce using rule 137 (errorOpAccess -> .)
    ,               reduce using rule 137 (errorOpAccess -> .)
    )               reduce using rule 137 (errorOpAccess -> .)
    ;               reduce using rule 137 (errorOpAccess -> .)
    ]               reduce using rule 137 (errorOpAccess -> .)

    errorOpAccess                  shift and go to state 189

state 159

    (136) opAccess -> empty .

    MULT            reduce using rule 136 (opAccess -> empty .)
    DIV             reduce using rule 136 (opAccess -> empty .)
    PLUS            reduce using rule 136 (opAccess -> empty .)
    MINUS           reduce using rule 136 (opAccess -> empty .)
    EQ              reduce using rule 136 (opAccess -> empty .)
    DIF             reduce using rule 136 (opAccess -> empty .)
    LTOEQ           reduce using rule 136 (opAccess -> empty .)
    GTOEQ           reduce using rule 136 (opAccess -> empty .)
    GT              reduce using rule 136 (opAccess -> empty .)
    LT              reduce using rule 136 (opAccess -> empty .)
    AND             reduce using rule 136 (opAccess -> empty .)
    OR              reduce using rule 136 (opAccess -> empty .)
    )               reduce using rule 136 (opAccess -> empty .)
    ;               reduce using rule 136 (opAccess -> empty .)
    ,               reduce using rule 136 (opAccess -> empty .)
    ]               reduce using rule 136 (opAccess -> empty .)


state 160

    (143) opDictionary -> . . dictIndex
    (144) dictIndex -> . FIRST
    (145) dictIndex -> . LAST

    FIRST           shift and go to state 190
    LAST            shift and go to state 191

    dictIndex                      shift and go to state 192

state 161

    (135) opAccess -> opDictionary .

    MULT            reduce using rule 135 (opAccess -> opDictionary .)
    DIV             reduce using rule 135 (opAccess -> opDictionary .)
    PLUS            reduce using rule 135 (opAccess -> opDictionary .)
    MINUS           reduce using rule 135 (opAccess -> opDictionary .)
    EQ              reduce using rule 135 (opAccess -> opDictionary .)
    DIF             reduce using rule 135 (opAccess -> opDictionary .)
    LTOEQ           reduce using rule 135 (opAccess -> opDictionary .)
    GTOEQ           reduce using rule 135 (opAccess -> opDictionary .)
    GT              reduce using rule 135 (opAccess -> opDictionary .)
    LT              reduce using rule 135 (opAccess -> opDictionary .)
    AND             reduce using rule 135 (opAccess -> opDictionary .)
    OR              reduce using rule 135 (opAccess -> opDictionary .)
    )               reduce using rule 135 (opAccess -> opDictionary .)
    ;               reduce using rule 135 (opAccess -> opDictionary .)
    ,               reduce using rule 135 (opAccess -> opDictionary .)
    ]               reduce using rule 135 (opAccess -> opDictionary .)


state 162

    (88) opParamCall -> expresion cyParamCall .

    )               reduce using rule 88 (opParamCall -> expresion cyParamCall .)


state 163

    (90) cyParamCall -> , . expresion cyParamCall
    (104) expresion -> . sExp cyExpresion errorExpresion
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 193
    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 164

    (91) cyParamCall -> empty .

    )               reduce using rule 91 (cyParamCall -> empty .)


state 165

    (119) exp -> term errorCyExp . cyExp
    (120) cyExp -> . PLUS term
    (121) cyExp -> . MINUS term
    (122) cyExp -> . empty
    (150) empty -> .

    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    EQ              reduce using rule 150 (empty -> .)
    DIF             reduce using rule 150 (empty -> .)
    LTOEQ           reduce using rule 150 (empty -> .)
    GTOEQ           reduce using rule 150 (empty -> .)
    GT              reduce using rule 150 (empty -> .)
    LT              reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    ,               reduce using rule 150 (empty -> .)
    )               reduce using rule 150 (empty -> .)
    ;               reduce using rule 150 (empty -> .)
    ]               reduce using rule 150 (empty -> .)

    cyExp                          shift and go to state 194
    empty                          shift and go to state 197

state 166

    (109) sExp -> exp errorOpSExp . opSExp
    (110) opSExp -> . prueba EQ exp
    (111) opSExp -> . prueba DIF exp
    (112) opSExp -> . prueba LTOEQ exp
    (113) opSExp -> . prueba GTOEQ exp
    (114) opSExp -> . prueba GT exp
    (115) opSExp -> . prueba LT exp
    (116) opSExp -> . empty
    (117) prueba -> .
    (150) empty -> .

    EQ              reduce using rule 117 (prueba -> .)
    DIF             reduce using rule 117 (prueba -> .)
    LTOEQ           reduce using rule 117 (prueba -> .)
    GTOEQ           reduce using rule 117 (prueba -> .)
    GT              reduce using rule 117 (prueba -> .)
    LT              reduce using rule 117 (prueba -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    ,               reduce using rule 150 (empty -> .)
    )               reduce using rule 150 (empty -> .)
    ;               reduce using rule 150 (empty -> .)
    ]               reduce using rule 150 (empty -> .)

    empty                          shift and go to state 199
    prueba                         shift and go to state 198
    opSExp                         shift and go to state 200

state 167

    (124) term -> fact cyTerm .

    PLUS            reduce using rule 124 (term -> fact cyTerm .)
    MINUS           reduce using rule 124 (term -> fact cyTerm .)
    EQ              reduce using rule 124 (term -> fact cyTerm .)
    DIF             reduce using rule 124 (term -> fact cyTerm .)
    LTOEQ           reduce using rule 124 (term -> fact cyTerm .)
    GTOEQ           reduce using rule 124 (term -> fact cyTerm .)
    GT              reduce using rule 124 (term -> fact cyTerm .)
    LT              reduce using rule 124 (term -> fact cyTerm .)
    AND             reduce using rule 124 (term -> fact cyTerm .)
    OR              reduce using rule 124 (term -> fact cyTerm .)
    ]               reduce using rule 124 (term -> fact cyTerm .)
    )               reduce using rule 124 (term -> fact cyTerm .)
    ,               reduce using rule 124 (term -> fact cyTerm .)
    ;               reduce using rule 124 (term -> fact cyTerm .)


state 168

    (125) cyTerm -> MULT . errorFact fact
    (133) errorFact -> .

    CTES            reduce using rule 133 (errorFact -> .)
    (               reduce using rule 133 (errorFact -> .)
    ID              reduce using rule 133 (errorFact -> .)
    CTED            reduce using rule 133 (errorFact -> .)
    CTEF            reduce using rule 133 (errorFact -> .)
    TRUE            reduce using rule 133 (errorFact -> .)
    FALSE           reduce using rule 133 (errorFact -> .)

    errorFact                      shift and go to state 201

state 169

    (126) cyTerm -> DIV . fact
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    funcCall                       shift and go to state 132
    cte                            shift and go to state 133
    fact                           shift and go to state 202

state 170

    (127) cyTerm -> empty .

    PLUS            reduce using rule 127 (cyTerm -> empty .)
    MINUS           reduce using rule 127 (cyTerm -> empty .)
    EQ              reduce using rule 127 (cyTerm -> empty .)
    DIF             reduce using rule 127 (cyTerm -> empty .)
    LTOEQ           reduce using rule 127 (cyTerm -> empty .)
    GTOEQ           reduce using rule 127 (cyTerm -> empty .)
    GT              reduce using rule 127 (cyTerm -> empty .)
    LT              reduce using rule 127 (cyTerm -> empty .)
    AND             reduce using rule 127 (cyTerm -> empty .)
    OR              reduce using rule 127 (cyTerm -> empty .)
    ,               reduce using rule 127 (cyTerm -> empty .)
    )               reduce using rule 127 (cyTerm -> empty .)
    ;               reduce using rule 127 (cyTerm -> empty .)
    ]               reduce using rule 127 (cyTerm -> empty .)


state 171

    (29) init -> ASGN initWith . errorInit
    (30) errorInit -> .

    ;               reduce using rule 30 (errorInit -> .)
    )               reduce using rule 30 (errorInit -> .)

    errorInit                      shift and go to state 203

state 172

    (33) initDict -> ASGN ( . dictType : dictType ) errorInitDict
    (131) fact -> ( . expresion )
    (35) dictType -> . errorDictType CTES
    (36) dictType -> . cte
    (37) dictType -> . ID
    (104) expresion -> . sExp cyExpresion errorExpresion
    (38) errorDictType -> .
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (87) funcCall -> . ID ( opParamCall )

  ! shift/reduce conflict for CTES resolved as shift
    ID              shift and go to state 206
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131
    CTES            shift and go to state 129
    (               shift and go to state 123

  ! CTES            [ reduce using rule 38 (errorDictType -> .) ]

    dictType                       shift and go to state 204
    expresion                      shift and go to state 151
    term                           shift and go to state 130
    errorDictType                  shift and go to state 205
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 207
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 173

    (87) funcCall -> ID . ( opParamCall )
    (132) fact -> ID . opAccess errorOpAccess
    (134) opAccess -> . opStruct
    (135) opAccess -> . opDictionary
    (136) opAccess -> . empty
    (138) opStruct -> . errorOpStruct [ expresion ] opMatrix
    (143) opDictionary -> . . dictIndex
    (150) empty -> .
    (139) errorOpStruct -> .

    (               shift and go to state 110
    .               shift and go to state 160
    MULT            reduce using rule 150 (empty -> .)
    DIV             reduce using rule 150 (empty -> .)
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    EQ              reduce using rule 150 (empty -> .)
    DIF             reduce using rule 150 (empty -> .)
    LTOEQ           reduce using rule 150 (empty -> .)
    GTOEQ           reduce using rule 150 (empty -> .)
    GT              reduce using rule 150 (empty -> .)
    LT              reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    ;               reduce using rule 150 (empty -> .)
    )               reduce using rule 150 (empty -> .)
    [               reduce using rule 139 (errorOpStruct -> .)

    errorOpStruct                  shift and go to state 156
    opDictionary                   shift and go to state 161
    opStruct                       shift and go to state 157
    opAccess                       shift and go to state 158
    empty                          shift and go to state 159

state 174

    (31) initWith -> expresion .

    ;               reduce using rule 31 (initWith -> expresion .)
    )               reduce using rule 31 (initWith -> expresion .)


state 175

    (32) initWith -> funcCall .
    (130) fact -> funcCall .

  ! reduce/reduce conflict for ; resolved using rule 32 (initWith -> funcCall .)
  ! reduce/reduce conflict for ) resolved using rule 32 (initWith -> funcCall .)
    ;               reduce using rule 32 (initWith -> funcCall .)
    )               reduce using rule 32 (initWith -> funcCall .)
    MULT            reduce using rule 130 (fact -> funcCall .)
    DIV             reduce using rule 130 (fact -> funcCall .)
    PLUS            reduce using rule 130 (fact -> funcCall .)
    MINUS           reduce using rule 130 (fact -> funcCall .)
    EQ              reduce using rule 130 (fact -> funcCall .)
    DIF             reduce using rule 130 (fact -> funcCall .)
    LTOEQ           reduce using rule 130 (fact -> funcCall .)
    GTOEQ           reduce using rule 130 (fact -> funcCall .)
    GT              reduce using rule 130 (fact -> funcCall .)
    LT              reduce using rule 130 (fact -> funcCall .)
    AND             reduce using rule 130 (fact -> funcCall .)
    OR              reduce using rule 130 (fact -> funcCall .)

  ! ;               [ reduce using rule 130 (fact -> funcCall .) ]
  ! )               [ reduce using rule 130 (fact -> funcCall .) ]


state 176

    (83) assignOptions -> [ expresion . ] assignMatrix init

    ]               shift and go to state 208


state 177

    (97) condition -> errorCondition IF ( expresion . ) { body } optionalElse

    )               shift and go to state 209


state 178

    (39) param -> saveType type errorParam ID . cyTypeParam cyParam
    (43) cyTypeParam -> . , saveID saveTypeParam ID cyTypeParam
    (44) cyTypeParam -> . empty
    (150) empty -> .

    ,               shift and go to state 55
    ;               reduce using rule 150 (empty -> .)
    )               reduce using rule 150 (empty -> .)

    empty                          shift and go to state 56
    cyTypeParam                    shift and go to state 210

state 179

    (57) opReturns -> errorOpReturns . RETURNS type saveReturnType { opVars body return

    RETURNS         shift and go to state 211


state 180

    (58) opReturns -> { . opVars body
    (6) opVars -> . vars
    (7) opVars -> . empty
    (10) vars -> . errorVars VARS declare
    (150) empty -> .
    (12) errorVars -> .

    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    }               reduce using rule 150 (empty -> .)
    VARS            reduce using rule 12 (errorVars -> .)

    vars                           shift and go to state 8
    opVars                         shift and go to state 212
    errorVars                      shift and go to state 10
    empty                          shift and go to state 11

state 181

    (47) function -> errorFunction FUNC saveType ID saveProc flagParameters ( opParameters ) flagParameters opReturns . } clearVarsTable

    }               shift and go to state 213


state 182

    (75) whileCycle -> errorWhileCycle WHILE ( expresion ) . { body }

    {               shift and go to state 214


state 183

    (77) forCycle -> errorForCycle FOR ( assign ; . expresion ; assign ) { body }
    (104) expresion -> . sExp cyExpresion errorExpresion
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 215
    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 184

    (131) fact -> ( expresion ) .

    PLUS            reduce using rule 131 (fact -> ( expresion ) .)
    MINUS           reduce using rule 131 (fact -> ( expresion ) .)
    EQ              reduce using rule 131 (fact -> ( expresion ) .)
    DIF             reduce using rule 131 (fact -> ( expresion ) .)
    LTOEQ           reduce using rule 131 (fact -> ( expresion ) .)
    GTOEQ           reduce using rule 131 (fact -> ( expresion ) .)
    GT              reduce using rule 131 (fact -> ( expresion ) .)
    LT              reduce using rule 131 (fact -> ( expresion ) .)
    AND             reduce using rule 131 (fact -> ( expresion ) .)
    OR              reduce using rule 131 (fact -> ( expresion ) .)
    ,               reduce using rule 131 (fact -> ( expresion ) .)
    )               reduce using rule 131 (fact -> ( expresion ) .)
    ;               reduce using rule 131 (fact -> ( expresion ) .)
    ]               reduce using rule 131 (fact -> ( expresion ) .)
    MULT            reduce using rule 131 (fact -> ( expresion ) .)
    DIV             reduce using rule 131 (fact -> ( expresion ) .)


state 185

    (106) cyExpresion -> AND expresion .

    ,               reduce using rule 106 (cyExpresion -> AND expresion .)
    )               reduce using rule 106 (cyExpresion -> AND expresion .)
    ;               reduce using rule 106 (cyExpresion -> AND expresion .)
    ]               reduce using rule 106 (cyExpresion -> AND expresion .)


state 186

    (104) expresion -> sExp cyExpresion errorExpresion .

    ,               reduce using rule 104 (expresion -> sExp cyExpresion errorExpresion .)
    )               reduce using rule 104 (expresion -> sExp cyExpresion errorExpresion .)
    ;               reduce using rule 104 (expresion -> sExp cyExpresion errorExpresion .)
    ]               reduce using rule 104 (expresion -> sExp cyExpresion errorExpresion .)


state 187

    (107) cyExpresion -> OR expresion .

    ,               reduce using rule 107 (cyExpresion -> OR expresion .)
    )               reduce using rule 107 (cyExpresion -> OR expresion .)
    ;               reduce using rule 107 (cyExpresion -> OR expresion .)
    ]               reduce using rule 107 (cyExpresion -> OR expresion .)


state 188

    (138) opStruct -> errorOpStruct [ . expresion ] opMatrix
    (104) expresion -> . sExp cyExpresion errorExpresion
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 216
    term                           shift and go to state 130
    exp                            shift and go to state 135
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    fact                           shift and go to state 136

state 189

    (132) fact -> ID opAccess errorOpAccess .

    PLUS            reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    MINUS           reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    EQ              reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    DIF             reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    LTOEQ           reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    GTOEQ           reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    GT              reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    LT              reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    AND             reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    OR              reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    ,               reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    )               reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    ;               reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    ]               reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    MULT            reduce using rule 132 (fact -> ID opAccess errorOpAccess .)
    DIV             reduce using rule 132 (fact -> ID opAccess errorOpAccess .)


state 190

    (144) dictIndex -> FIRST .

    MULT            reduce using rule 144 (dictIndex -> FIRST .)
    DIV             reduce using rule 144 (dictIndex -> FIRST .)
    PLUS            reduce using rule 144 (dictIndex -> FIRST .)
    MINUS           reduce using rule 144 (dictIndex -> FIRST .)
    EQ              reduce using rule 144 (dictIndex -> FIRST .)
    DIF             reduce using rule 144 (dictIndex -> FIRST .)
    LTOEQ           reduce using rule 144 (dictIndex -> FIRST .)
    GTOEQ           reduce using rule 144 (dictIndex -> FIRST .)
    GT              reduce using rule 144 (dictIndex -> FIRST .)
    LT              reduce using rule 144 (dictIndex -> FIRST .)
    AND             reduce using rule 144 (dictIndex -> FIRST .)
    OR              reduce using rule 144 (dictIndex -> FIRST .)
    ,               reduce using rule 144 (dictIndex -> FIRST .)
    )               reduce using rule 144 (dictIndex -> FIRST .)
    ]               reduce using rule 144 (dictIndex -> FIRST .)
    ;               reduce using rule 144 (dictIndex -> FIRST .)


state 191

    (145) dictIndex -> LAST .

    MULT            reduce using rule 145 (dictIndex -> LAST .)
    DIV             reduce using rule 145 (dictIndex -> LAST .)
    PLUS            reduce using rule 145 (dictIndex -> LAST .)
    MINUS           reduce using rule 145 (dictIndex -> LAST .)
    EQ              reduce using rule 145 (dictIndex -> LAST .)
    DIF             reduce using rule 145 (dictIndex -> LAST .)
    LTOEQ           reduce using rule 145 (dictIndex -> LAST .)
    GTOEQ           reduce using rule 145 (dictIndex -> LAST .)
    GT              reduce using rule 145 (dictIndex -> LAST .)
    LT              reduce using rule 145 (dictIndex -> LAST .)
    AND             reduce using rule 145 (dictIndex -> LAST .)
    OR              reduce using rule 145 (dictIndex -> LAST .)
    ,               reduce using rule 145 (dictIndex -> LAST .)
    )               reduce using rule 145 (dictIndex -> LAST .)
    ]               reduce using rule 145 (dictIndex -> LAST .)
    ;               reduce using rule 145 (dictIndex -> LAST .)


state 192

    (143) opDictionary -> . dictIndex .

    MULT            reduce using rule 143 (opDictionary -> . dictIndex .)
    DIV             reduce using rule 143 (opDictionary -> . dictIndex .)
    PLUS            reduce using rule 143 (opDictionary -> . dictIndex .)
    MINUS           reduce using rule 143 (opDictionary -> . dictIndex .)
    EQ              reduce using rule 143 (opDictionary -> . dictIndex .)
    DIF             reduce using rule 143 (opDictionary -> . dictIndex .)
    LTOEQ           reduce using rule 143 (opDictionary -> . dictIndex .)
    GTOEQ           reduce using rule 143 (opDictionary -> . dictIndex .)
    GT              reduce using rule 143 (opDictionary -> . dictIndex .)
    LT              reduce using rule 143 (opDictionary -> . dictIndex .)
    AND             reduce using rule 143 (opDictionary -> . dictIndex .)
    OR              reduce using rule 143 (opDictionary -> . dictIndex .)
    ,               reduce using rule 143 (opDictionary -> . dictIndex .)
    )               reduce using rule 143 (opDictionary -> . dictIndex .)
    ]               reduce using rule 143 (opDictionary -> . dictIndex .)
    ;               reduce using rule 143 (opDictionary -> . dictIndex .)


state 193

    (90) cyParamCall -> , expresion . cyParamCall
    (90) cyParamCall -> . , expresion cyParamCall
    (91) cyParamCall -> . empty
    (150) empty -> .

    ,               shift and go to state 163
    )               reduce using rule 150 (empty -> .)

    cyParamCall                    shift and go to state 217
    empty                          shift and go to state 164

state 194

    (119) exp -> term errorCyExp cyExp .

    EQ              reduce using rule 119 (exp -> term errorCyExp cyExp .)
    DIF             reduce using rule 119 (exp -> term errorCyExp cyExp .)
    LTOEQ           reduce using rule 119 (exp -> term errorCyExp cyExp .)
    GTOEQ           reduce using rule 119 (exp -> term errorCyExp cyExp .)
    GT              reduce using rule 119 (exp -> term errorCyExp cyExp .)
    LT              reduce using rule 119 (exp -> term errorCyExp cyExp .)
    AND             reduce using rule 119 (exp -> term errorCyExp cyExp .)
    OR              reduce using rule 119 (exp -> term errorCyExp cyExp .)
    ;               reduce using rule 119 (exp -> term errorCyExp cyExp .)
    )               reduce using rule 119 (exp -> term errorCyExp cyExp .)
    ,               reduce using rule 119 (exp -> term errorCyExp cyExp .)
    ]               reduce using rule 119 (exp -> term errorCyExp cyExp .)


state 195

    (120) cyExp -> PLUS . term
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    term                           shift and go to state 218
    funcCall                       shift and go to state 132
    cte                            shift and go to state 133
    fact                           shift and go to state 136

state 196

    (121) cyExp -> MINUS . term
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    term                           shift and go to state 219
    funcCall                       shift and go to state 132
    cte                            shift and go to state 133
    fact                           shift and go to state 136

state 197

    (122) cyExp -> empty .

    EQ              reduce using rule 122 (cyExp -> empty .)
    DIF             reduce using rule 122 (cyExp -> empty .)
    LTOEQ           reduce using rule 122 (cyExp -> empty .)
    GTOEQ           reduce using rule 122 (cyExp -> empty .)
    GT              reduce using rule 122 (cyExp -> empty .)
    LT              reduce using rule 122 (cyExp -> empty .)
    AND             reduce using rule 122 (cyExp -> empty .)
    OR              reduce using rule 122 (cyExp -> empty .)
    ,               reduce using rule 122 (cyExp -> empty .)
    )               reduce using rule 122 (cyExp -> empty .)
    ;               reduce using rule 122 (cyExp -> empty .)
    ]               reduce using rule 122 (cyExp -> empty .)


state 198

    (110) opSExp -> prueba . EQ exp
    (111) opSExp -> prueba . DIF exp
    (112) opSExp -> prueba . LTOEQ exp
    (113) opSExp -> prueba . GTOEQ exp
    (114) opSExp -> prueba . GT exp
    (115) opSExp -> prueba . LT exp

    EQ              shift and go to state 221
    DIF             shift and go to state 222
    LTOEQ           shift and go to state 225
    GTOEQ           shift and go to state 224
    GT              shift and go to state 220
    LT              shift and go to state 223


state 199

    (116) opSExp -> empty .

    AND             reduce using rule 116 (opSExp -> empty .)
    OR              reduce using rule 116 (opSExp -> empty .)
    ,               reduce using rule 116 (opSExp -> empty .)
    )               reduce using rule 116 (opSExp -> empty .)
    ;               reduce using rule 116 (opSExp -> empty .)
    ]               reduce using rule 116 (opSExp -> empty .)


state 200

    (109) sExp -> exp errorOpSExp opSExp .

    AND             reduce using rule 109 (sExp -> exp errorOpSExp opSExp .)
    OR              reduce using rule 109 (sExp -> exp errorOpSExp opSExp .)
    ;               reduce using rule 109 (sExp -> exp errorOpSExp opSExp .)
    )               reduce using rule 109 (sExp -> exp errorOpSExp opSExp .)
    ,               reduce using rule 109 (sExp -> exp errorOpSExp opSExp .)
    ]               reduce using rule 109 (sExp -> exp errorOpSExp opSExp .)


state 201

    (125) cyTerm -> MULT errorFact . fact
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    funcCall                       shift and go to state 132
    cte                            shift and go to state 133
    fact                           shift and go to state 226

state 202

    (126) cyTerm -> DIV fact .

    PLUS            reduce using rule 126 (cyTerm -> DIV fact .)
    MINUS           reduce using rule 126 (cyTerm -> DIV fact .)
    EQ              reduce using rule 126 (cyTerm -> DIV fact .)
    DIF             reduce using rule 126 (cyTerm -> DIV fact .)
    LTOEQ           reduce using rule 126 (cyTerm -> DIV fact .)
    GTOEQ           reduce using rule 126 (cyTerm -> DIV fact .)
    GT              reduce using rule 126 (cyTerm -> DIV fact .)
    LT              reduce using rule 126 (cyTerm -> DIV fact .)
    AND             reduce using rule 126 (cyTerm -> DIV fact .)
    OR              reduce using rule 126 (cyTerm -> DIV fact .)
    ,               reduce using rule 126 (cyTerm -> DIV fact .)
    )               reduce using rule 126 (cyTerm -> DIV fact .)
    ;               reduce using rule 126 (cyTerm -> DIV fact .)
    ]               reduce using rule 126 (cyTerm -> DIV fact .)


state 203

    (29) init -> ASGN initWith errorInit .

    ;               reduce using rule 29 (init -> ASGN initWith errorInit .)
    )               reduce using rule 29 (init -> ASGN initWith errorInit .)


state 204

    (33) initDict -> ASGN ( dictType . : dictType ) errorInitDict

    :               shift and go to state 227


state 205

    (35) dictType -> errorDictType . CTES

    CTES            shift and go to state 228


state 206

    (37) dictType -> ID .
    (132) fact -> ID . opAccess errorOpAccess
    (87) funcCall -> ID . ( opParamCall )
    (134) opAccess -> . opStruct
    (135) opAccess -> . opDictionary
    (136) opAccess -> . empty
    (138) opStruct -> . errorOpStruct [ expresion ] opMatrix
    (143) opDictionary -> . . dictIndex
    (150) empty -> .
    (139) errorOpStruct -> .

    :               reduce using rule 37 (dictType -> ID .)
    (               shift and go to state 110
    .               shift and go to state 160
    MULT            reduce using rule 150 (empty -> .)
    DIV             reduce using rule 150 (empty -> .)
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    EQ              reduce using rule 150 (empty -> .)
    DIF             reduce using rule 150 (empty -> .)
    LTOEQ           reduce using rule 150 (empty -> .)
    GTOEQ           reduce using rule 150 (empty -> .)
    GT              reduce using rule 150 (empty -> .)
    LT              reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    )               reduce using rule 150 (empty -> .)
    [               reduce using rule 139 (errorOpStruct -> .)

    errorOpStruct                  shift and go to state 156
    opDictionary                   shift and go to state 161
    opStruct                       shift and go to state 157
    opAccess                       shift and go to state 158
    empty                          shift and go to state 159

state 207

    (36) dictType -> cte .
    (129) fact -> cte .

    :               reduce using rule 36 (dictType -> cte .)
    MULT            reduce using rule 129 (fact -> cte .)
    DIV             reduce using rule 129 (fact -> cte .)
    PLUS            reduce using rule 129 (fact -> cte .)
    MINUS           reduce using rule 129 (fact -> cte .)
    EQ              reduce using rule 129 (fact -> cte .)
    DIF             reduce using rule 129 (fact -> cte .)
    LTOEQ           reduce using rule 129 (fact -> cte .)
    GTOEQ           reduce using rule 129 (fact -> cte .)
    GT              reduce using rule 129 (fact -> cte .)
    LT              reduce using rule 129 (fact -> cte .)
    AND             reduce using rule 129 (fact -> cte .)
    OR              reduce using rule 129 (fact -> cte .)
    )               reduce using rule 129 (fact -> cte .)


state 208

    (83) assignOptions -> [ expresion ] . assignMatrix init
    (84) assignMatrix -> . [ expresion ] errorAssignMatrix
    (85) assignMatrix -> . empty
    (150) empty -> .

    [               shift and go to state 230
    ASGN            reduce using rule 150 (empty -> .)

    assignMatrix                   shift and go to state 229
    empty                          shift and go to state 231

state 209

    (97) condition -> errorCondition IF ( expresion ) . { body } optionalElse

    {               shift and go to state 232


state 210

    (39) param -> saveType type errorParam ID cyTypeParam . cyParam
    (41) cyParam -> . errorCyParam saveID saveTypeParam ; param
    (42) cyParam -> . empty saveID saveTypeParam
    (46) errorCyParam -> .
    (150) empty -> .

    ;               reduce using rule 46 (errorCyParam -> .)
    )               reduce using rule 150 (empty -> .)

    empty                          shift and go to state 233
    cyParam                        shift and go to state 235
    errorCyParam                   shift and go to state 234

state 211

    (57) opReturns -> errorOpReturns RETURNS . type saveReturnType { opVars body return
    (13) type -> . errorType INT
    (14) type -> . FLOAT
    (15) type -> . STRING
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    BOOL            shift and go to state 32
    INT             reduce using rule 17 (errorType -> .)

    errorType                      shift and go to state 31
    type                           shift and go to state 236

state 212

    (58) opReturns -> { opVars . body
    (69) body -> . errorBody cyInstruction
    (70) body -> . empty
    (71) errorBody -> .
    (150) empty -> .

    ID              reduce using rule 71 (errorBody -> .)
    IF              reduce using rule 71 (errorBody -> .)
    FOR             reduce using rule 71 (errorBody -> .)
    WHILE           reduce using rule 71 (errorBody -> .)
    }               reduce using rule 150 (empty -> .)

    body                           shift and go to state 237
    empty                          shift and go to state 75
    errorBody                      shift and go to state 74

state 213

    (47) function -> errorFunction FUNC saveType ID saveProc flagParameters ( opParameters ) flagParameters opReturns } . clearVarsTable
    (49) clearVarsTable -> .

    FUNC            reduce using rule 49 (clearVarsTable -> .)
    MAIN            reduce using rule 49 (clearVarsTable -> .)

    clearVarsTable                 shift and go to state 238

state 214

    (75) whileCycle -> errorWhileCycle WHILE ( expresion ) { . body }
    (69) body -> . errorBody cyInstruction
    (70) body -> . empty
    (71) errorBody -> .
    (150) empty -> .

    ID              reduce using rule 71 (errorBody -> .)
    IF              reduce using rule 71 (errorBody -> .)
    FOR             reduce using rule 71 (errorBody -> .)
    WHILE           reduce using rule 71 (errorBody -> .)
    }               reduce using rule 150 (empty -> .)

    body                           shift and go to state 239
    errorBody                      shift and go to state 74
    empty                          shift and go to state 75

state 215

    (77) forCycle -> errorForCycle FOR ( assign ; expresion . ; assign ) { body }

    ;               shift and go to state 240


state 216

    (138) opStruct -> errorOpStruct [ expresion . ] opMatrix

    ]               shift and go to state 241


state 217

    (90) cyParamCall -> , expresion cyParamCall .

    )               reduce using rule 90 (cyParamCall -> , expresion cyParamCall .)


state 218

    (120) cyExp -> PLUS term .

    EQ              reduce using rule 120 (cyExp -> PLUS term .)
    DIF             reduce using rule 120 (cyExp -> PLUS term .)
    LTOEQ           reduce using rule 120 (cyExp -> PLUS term .)
    GTOEQ           reduce using rule 120 (cyExp -> PLUS term .)
    GT              reduce using rule 120 (cyExp -> PLUS term .)
    LT              reduce using rule 120 (cyExp -> PLUS term .)
    AND             reduce using rule 120 (cyExp -> PLUS term .)
    OR              reduce using rule 120 (cyExp -> PLUS term .)
    ,               reduce using rule 120 (cyExp -> PLUS term .)
    )               reduce using rule 120 (cyExp -> PLUS term .)
    ;               reduce using rule 120 (cyExp -> PLUS term .)
    ]               reduce using rule 120 (cyExp -> PLUS term .)


state 219

    (121) cyExp -> MINUS term .

    EQ              reduce using rule 121 (cyExp -> MINUS term .)
    DIF             reduce using rule 121 (cyExp -> MINUS term .)
    LTOEQ           reduce using rule 121 (cyExp -> MINUS term .)
    GTOEQ           reduce using rule 121 (cyExp -> MINUS term .)
    GT              reduce using rule 121 (cyExp -> MINUS term .)
    LT              reduce using rule 121 (cyExp -> MINUS term .)
    AND             reduce using rule 121 (cyExp -> MINUS term .)
    OR              reduce using rule 121 (cyExp -> MINUS term .)
    ,               reduce using rule 121 (cyExp -> MINUS term .)
    )               reduce using rule 121 (cyExp -> MINUS term .)
    ;               reduce using rule 121 (cyExp -> MINUS term .)
    ]               reduce using rule 121 (cyExp -> MINUS term .)


state 220

    (114) opSExp -> prueba GT . exp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    cte                            shift and go to state 133
    exp                            shift and go to state 242
    fact                           shift and go to state 136

state 221

    (110) opSExp -> prueba EQ . exp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    cte                            shift and go to state 133
    exp                            shift and go to state 243
    fact                           shift and go to state 136

state 222

    (111) opSExp -> prueba DIF . exp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    cte                            shift and go to state 133
    exp                            shift and go to state 244
    fact                           shift and go to state 136

state 223

    (115) opSExp -> prueba LT . exp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    cte                            shift and go to state 133
    exp                            shift and go to state 245
    fact                           shift and go to state 136

state 224

    (113) opSExp -> prueba GTOEQ . exp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    cte                            shift and go to state 133
    exp                            shift and go to state 246
    fact                           shift and go to state 136

state 225

    (112) opSExp -> prueba LTOEQ . exp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    cte                            shift and go to state 133
    exp                            shift and go to state 247
    fact                           shift and go to state 136

state 226

    (125) cyTerm -> MULT errorFact fact .

    PLUS            reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    MINUS           reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    EQ              reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    DIF             reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    LTOEQ           reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    GTOEQ           reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    GT              reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    LT              reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    AND             reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    OR              reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    ,               reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    )               reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    ;               reduce using rule 125 (cyTerm -> MULT errorFact fact .)
    ]               reduce using rule 125 (cyTerm -> MULT errorFact fact .)


state 227

    (33) initDict -> ASGN ( dictType : . dictType ) errorInitDict
    (35) dictType -> . errorDictType CTES
    (36) dictType -> . cte
    (37) dictType -> . ID
    (38) errorDictType -> .
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE

    ID              shift and go to state 250
    CTES            reduce using rule 38 (errorDictType -> .)
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    dictType                       shift and go to state 248
    errorDictType                  shift and go to state 205
    cte                            shift and go to state 249

state 228

    (35) dictType -> errorDictType CTES .

    )               reduce using rule 35 (dictType -> errorDictType CTES .)
    :               reduce using rule 35 (dictType -> errorDictType CTES .)


state 229

    (83) assignOptions -> [ expresion ] assignMatrix . init
    (29) init -> . ASGN initWith errorInit

    ASGN            shift and go to state 251

    init                           shift and go to state 252

state 230

    (84) assignMatrix -> [ . expresion ] errorAssignMatrix
    (104) expresion -> . sExp cyExpresion errorExpresion
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 253
    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 231

    (85) assignMatrix -> empty .

    ASGN            reduce using rule 85 (assignMatrix -> empty .)


state 232

    (97) condition -> errorCondition IF ( expresion ) { . body } optionalElse
    (69) body -> . errorBody cyInstruction
    (70) body -> . empty
    (71) errorBody -> .
    (150) empty -> .

    ID              reduce using rule 71 (errorBody -> .)
    IF              reduce using rule 71 (errorBody -> .)
    FOR             reduce using rule 71 (errorBody -> .)
    WHILE           reduce using rule 71 (errorBody -> .)
    }               reduce using rule 150 (empty -> .)

    body                           shift and go to state 254
    errorBody                      shift and go to state 74
    empty                          shift and go to state 75

state 233

    (42) cyParam -> empty . saveID saveTypeParam
    (11) saveID -> .

    )               reduce using rule 11 (saveID -> .)

    saveID                         shift and go to state 255

state 234

    (41) cyParam -> errorCyParam . saveID saveTypeParam ; param
    (11) saveID -> .

    ;               reduce using rule 11 (saveID -> .)

    saveID                         shift and go to state 256

state 235

    (39) param -> saveType type errorParam ID cyTypeParam cyParam .

    )               reduce using rule 39 (param -> saveType type errorParam ID cyTypeParam cyParam .)


state 236

    (57) opReturns -> errorOpReturns RETURNS type . saveReturnType { opVars body return
    (59) saveReturnType -> .

    {               reduce using rule 59 (saveReturnType -> .)

    saveReturnType                 shift and go to state 257

state 237

    (58) opReturns -> { opVars body .

    }               reduce using rule 58 (opReturns -> { opVars body .)


state 238

    (47) function -> errorFunction FUNC saveType ID saveProc flagParameters ( opParameters ) flagParameters opReturns } clearVarsTable .

    FUNC            reduce using rule 47 (function -> errorFunction FUNC saveType ID saveProc flagParameters ( opParameters ) flagParameters opReturns } clearVarsTable .)
    MAIN            reduce using rule 47 (function -> errorFunction FUNC saveType ID saveProc flagParameters ( opParameters ) flagParameters opReturns } clearVarsTable .)


state 239

    (75) whileCycle -> errorWhileCycle WHILE ( expresion ) { body . }

    }               shift and go to state 258


state 240

    (77) forCycle -> errorForCycle FOR ( assign ; expresion ; . assign ) { body }
    (79) assign -> . ID errorAssign assignOptions

    ID              shift and go to state 148

    assign                         shift and go to state 259

state 241

    (138) opStruct -> errorOpStruct [ expresion ] . opMatrix
    (140) opMatrix -> . errorOpMatrix [ expresion ]
    (141) opMatrix -> . empty
    (142) errorOpMatrix -> .
    (150) empty -> .

    [               reduce using rule 142 (errorOpMatrix -> .)
    MULT            reduce using rule 150 (empty -> .)
    DIV             reduce using rule 150 (empty -> .)
    PLUS            reduce using rule 150 (empty -> .)
    MINUS           reduce using rule 150 (empty -> .)
    EQ              reduce using rule 150 (empty -> .)
    DIF             reduce using rule 150 (empty -> .)
    LTOEQ           reduce using rule 150 (empty -> .)
    GTOEQ           reduce using rule 150 (empty -> .)
    GT              reduce using rule 150 (empty -> .)
    LT              reduce using rule 150 (empty -> .)
    AND             reduce using rule 150 (empty -> .)
    OR              reduce using rule 150 (empty -> .)
    ,               reduce using rule 150 (empty -> .)
    )               reduce using rule 150 (empty -> .)
    ]               reduce using rule 150 (empty -> .)
    ;               reduce using rule 150 (empty -> .)

    empty                          shift and go to state 262
    errorOpMatrix                  shift and go to state 260
    opMatrix                       shift and go to state 261

state 242

    (114) opSExp -> prueba GT exp .

    AND             reduce using rule 114 (opSExp -> prueba GT exp .)
    OR              reduce using rule 114 (opSExp -> prueba GT exp .)
    ,               reduce using rule 114 (opSExp -> prueba GT exp .)
    )               reduce using rule 114 (opSExp -> prueba GT exp .)
    ;               reduce using rule 114 (opSExp -> prueba GT exp .)
    ]               reduce using rule 114 (opSExp -> prueba GT exp .)


state 243

    (110) opSExp -> prueba EQ exp .

    AND             reduce using rule 110 (opSExp -> prueba EQ exp .)
    OR              reduce using rule 110 (opSExp -> prueba EQ exp .)
    ,               reduce using rule 110 (opSExp -> prueba EQ exp .)
    )               reduce using rule 110 (opSExp -> prueba EQ exp .)
    ;               reduce using rule 110 (opSExp -> prueba EQ exp .)
    ]               reduce using rule 110 (opSExp -> prueba EQ exp .)


state 244

    (111) opSExp -> prueba DIF exp .

    AND             reduce using rule 111 (opSExp -> prueba DIF exp .)
    OR              reduce using rule 111 (opSExp -> prueba DIF exp .)
    ,               reduce using rule 111 (opSExp -> prueba DIF exp .)
    )               reduce using rule 111 (opSExp -> prueba DIF exp .)
    ;               reduce using rule 111 (opSExp -> prueba DIF exp .)
    ]               reduce using rule 111 (opSExp -> prueba DIF exp .)


state 245

    (115) opSExp -> prueba LT exp .

    AND             reduce using rule 115 (opSExp -> prueba LT exp .)
    OR              reduce using rule 115 (opSExp -> prueba LT exp .)
    ,               reduce using rule 115 (opSExp -> prueba LT exp .)
    )               reduce using rule 115 (opSExp -> prueba LT exp .)
    ;               reduce using rule 115 (opSExp -> prueba LT exp .)
    ]               reduce using rule 115 (opSExp -> prueba LT exp .)


state 246

    (113) opSExp -> prueba GTOEQ exp .

    AND             reduce using rule 113 (opSExp -> prueba GTOEQ exp .)
    OR              reduce using rule 113 (opSExp -> prueba GTOEQ exp .)
    ,               reduce using rule 113 (opSExp -> prueba GTOEQ exp .)
    )               reduce using rule 113 (opSExp -> prueba GTOEQ exp .)
    ;               reduce using rule 113 (opSExp -> prueba GTOEQ exp .)
    ]               reduce using rule 113 (opSExp -> prueba GTOEQ exp .)


state 247

    (112) opSExp -> prueba LTOEQ exp .

    AND             reduce using rule 112 (opSExp -> prueba LTOEQ exp .)
    OR              reduce using rule 112 (opSExp -> prueba LTOEQ exp .)
    ,               reduce using rule 112 (opSExp -> prueba LTOEQ exp .)
    )               reduce using rule 112 (opSExp -> prueba LTOEQ exp .)
    ;               reduce using rule 112 (opSExp -> prueba LTOEQ exp .)
    ]               reduce using rule 112 (opSExp -> prueba LTOEQ exp .)


state 248

    (33) initDict -> ASGN ( dictType : dictType . ) errorInitDict

    )               shift and go to state 263


state 249

    (36) dictType -> cte .

    )               reduce using rule 36 (dictType -> cte .)


state 250

    (37) dictType -> ID .

    )               reduce using rule 37 (dictType -> ID .)


state 251

    (29) init -> ASGN . initWith errorInit
    (31) initWith -> . expresion
    (32) initWith -> . funcCall
    (104) expresion -> . sExp cyExpresion errorExpresion
    (87) funcCall -> . ID ( opParamCall )
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE

    ID              shift and go to state 173
    CTES            shift and go to state 129
    (               shift and go to state 123
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 174
    initWith                       shift and go to state 171
    funcCall                       shift and go to state 175
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    term                           shift and go to state 130
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 252

    (83) assignOptions -> [ expresion ] assignMatrix init .

    ;               reduce using rule 83 (assignOptions -> [ expresion ] assignMatrix init .)
    )               reduce using rule 83 (assignOptions -> [ expresion ] assignMatrix init .)


state 253

    (84) assignMatrix -> [ expresion . ] errorAssignMatrix

    ]               shift and go to state 264


state 254

    (97) condition -> errorCondition IF ( expresion ) { body . } optionalElse

    }               shift and go to state 265


state 255

    (42) cyParam -> empty saveID . saveTypeParam
    (45) saveTypeParam -> .

    )               reduce using rule 45 (saveTypeParam -> .)

    saveTypeParam                  shift and go to state 266

state 256

    (41) cyParam -> errorCyParam saveID . saveTypeParam ; param
    (45) saveTypeParam -> .

    ;               reduce using rule 45 (saveTypeParam -> .)

    saveTypeParam                  shift and go to state 267

state 257

    (57) opReturns -> errorOpReturns RETURNS type saveReturnType . { opVars body return

    {               shift and go to state 268


state 258

    (75) whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .

    ID              reduce using rule 75 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    IF              reduce using rule 75 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    FOR             reduce using rule 75 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    WHILE           reduce using rule 75 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    }               reduce using rule 75 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    RETURN          reduce using rule 75 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)


state 259

    (77) forCycle -> errorForCycle FOR ( assign ; expresion ; assign . ) { body }

    )               shift and go to state 269


state 260

    (140) opMatrix -> errorOpMatrix . [ expresion ]

    [               shift and go to state 270


state 261

    (138) opStruct -> errorOpStruct [ expresion ] opMatrix .

    MULT            reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    DIV             reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    PLUS            reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    MINUS           reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    EQ              reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    DIF             reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    LTOEQ           reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    GTOEQ           reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    GT              reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    LT              reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    AND             reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    OR              reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    )               reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    ,               reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    ]               reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    ;               reduce using rule 138 (opStruct -> errorOpStruct [ expresion ] opMatrix .)


state 262

    (141) opMatrix -> empty .

    MULT            reduce using rule 141 (opMatrix -> empty .)
    DIV             reduce using rule 141 (opMatrix -> empty .)
    PLUS            reduce using rule 141 (opMatrix -> empty .)
    MINUS           reduce using rule 141 (opMatrix -> empty .)
    EQ              reduce using rule 141 (opMatrix -> empty .)
    DIF             reduce using rule 141 (opMatrix -> empty .)
    LTOEQ           reduce using rule 141 (opMatrix -> empty .)
    GTOEQ           reduce using rule 141 (opMatrix -> empty .)
    GT              reduce using rule 141 (opMatrix -> empty .)
    LT              reduce using rule 141 (opMatrix -> empty .)
    AND             reduce using rule 141 (opMatrix -> empty .)
    OR              reduce using rule 141 (opMatrix -> empty .)
    ,               reduce using rule 141 (opMatrix -> empty .)
    )               reduce using rule 141 (opMatrix -> empty .)
    ]               reduce using rule 141 (opMatrix -> empty .)
    ;               reduce using rule 141 (opMatrix -> empty .)


state 263

    (33) initDict -> ASGN ( dictType : dictType ) . errorInitDict
    (34) errorInitDict -> .

    ;               reduce using rule 34 (errorInitDict -> .)
    )               reduce using rule 34 (errorInitDict -> .)

    errorInitDict                  shift and go to state 271

state 264

    (84) assignMatrix -> [ expresion ] . errorAssignMatrix
    (86) errorAssignMatrix -> .

    ASGN            reduce using rule 86 (errorAssignMatrix -> .)

    errorAssignMatrix              shift and go to state 272

state 265

    (97) condition -> errorCondition IF ( expresion ) { body } . optionalElse
    (99) optionalElse -> . errorElse ELSE { body }
    (100) optionalElse -> . empty
    (101) errorElse -> .
    (150) empty -> .

    ELSE            reduce using rule 101 (errorElse -> .)
    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    }               reduce using rule 150 (empty -> .)
    RETURN          reduce using rule 150 (empty -> .)

    errorElse                      shift and go to state 273
    optionalElse                   shift and go to state 274
    empty                          shift and go to state 275

state 266

    (42) cyParam -> empty saveID saveTypeParam .

    )               reduce using rule 42 (cyParam -> empty saveID saveTypeParam .)


state 267

    (41) cyParam -> errorCyParam saveID saveTypeParam . ; param

    ;               shift and go to state 276


state 268

    (57) opReturns -> errorOpReturns RETURNS type saveReturnType { . opVars body return
    (6) opVars -> . vars
    (7) opVars -> . empty
    (10) vars -> . errorVars VARS declare
    (150) empty -> .
    (12) errorVars -> .

    RETURN          reduce using rule 150 (empty -> .)
    ID              reduce using rule 150 (empty -> .)
    IF              reduce using rule 150 (empty -> .)
    FOR             reduce using rule 150 (empty -> .)
    WHILE           reduce using rule 150 (empty -> .)
    VARS            reduce using rule 12 (errorVars -> .)

    vars                           shift and go to state 8
    opVars                         shift and go to state 277
    errorVars                      shift and go to state 10
    empty                          shift and go to state 11

state 269

    (77) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) . { body }

    {               shift and go to state 278


state 270

    (140) opMatrix -> errorOpMatrix [ . expresion ]
    (104) expresion -> . sExp cyExpresion errorExpresion
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 279
    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 271

    (33) initDict -> ASGN ( dictType : dictType ) errorInitDict .

    ;               reduce using rule 33 (initDict -> ASGN ( dictType : dictType ) errorInitDict .)
    )               reduce using rule 33 (initDict -> ASGN ( dictType : dictType ) errorInitDict .)


state 272

    (84) assignMatrix -> [ expresion ] errorAssignMatrix .

    ASGN            reduce using rule 84 (assignMatrix -> [ expresion ] errorAssignMatrix .)


state 273

    (99) optionalElse -> errorElse . ELSE { body }

    ELSE            shift and go to state 280


state 274

    (97) condition -> errorCondition IF ( expresion ) { body } optionalElse .

    ID              reduce using rule 97 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    IF              reduce using rule 97 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    FOR             reduce using rule 97 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    WHILE           reduce using rule 97 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    }               reduce using rule 97 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    RETURN          reduce using rule 97 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)


state 275

    (100) optionalElse -> empty .

    ID              reduce using rule 100 (optionalElse -> empty .)
    IF              reduce using rule 100 (optionalElse -> empty .)
    FOR             reduce using rule 100 (optionalElse -> empty .)
    WHILE           reduce using rule 100 (optionalElse -> empty .)
    }               reduce using rule 100 (optionalElse -> empty .)
    RETURN          reduce using rule 100 (optionalElse -> empty .)


state 276

    (41) cyParam -> errorCyParam saveID saveTypeParam ; . param
    (39) param -> . saveType type errorParam ID cyTypeParam cyParam
    (3) saveType -> .

    FLOAT           reduce using rule 3 (saveType -> .)
    STRING          reduce using rule 3 (saveType -> .)
    BOOL            reduce using rule 3 (saveType -> .)
    INT             reduce using rule 3 (saveType -> .)

    param                          shift and go to state 281
    saveType                       shift and go to state 96

state 277

    (57) opReturns -> errorOpReturns RETURNS type saveReturnType { opVars . body return
    (69) body -> . errorBody cyInstruction
    (70) body -> . empty
    (71) errorBody -> .
    (150) empty -> .

    ID              reduce using rule 71 (errorBody -> .)
    IF              reduce using rule 71 (errorBody -> .)
    FOR             reduce using rule 71 (errorBody -> .)
    WHILE           reduce using rule 71 (errorBody -> .)
    RETURN          reduce using rule 150 (empty -> .)

    body                           shift and go to state 282
    errorBody                      shift and go to state 74
    empty                          shift and go to state 75

state 278

    (77) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { . body }
    (69) body -> . errorBody cyInstruction
    (70) body -> . empty
    (71) errorBody -> .
    (150) empty -> .

    ID              reduce using rule 71 (errorBody -> .)
    IF              reduce using rule 71 (errorBody -> .)
    FOR             reduce using rule 71 (errorBody -> .)
    WHILE           reduce using rule 71 (errorBody -> .)
    }               reduce using rule 150 (empty -> .)

    body                           shift and go to state 283
    errorBody                      shift and go to state 74
    empty                          shift and go to state 75

state 279

    (140) opMatrix -> errorOpMatrix [ expresion . ]

    ]               shift and go to state 284


state 280

    (99) optionalElse -> errorElse ELSE . { body }

    {               shift and go to state 285


state 281

    (41) cyParam -> errorCyParam saveID saveTypeParam ; param .

    )               reduce using rule 41 (cyParam -> errorCyParam saveID saveTypeParam ; param .)


state 282

    (57) opReturns -> errorOpReturns RETURNS type saveReturnType { opVars body . return
    (50) return -> . errorReturn RETURN expresion ;
    (51) errorReturn -> .

    RETURN          reduce using rule 51 (errorReturn -> .)

    return                         shift and go to state 286
    errorReturn                    shift and go to state 287

state 283

    (77) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body . }

    }               shift and go to state 288


state 284

    (140) opMatrix -> errorOpMatrix [ expresion ] .

    MULT            reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    DIV             reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    PLUS            reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    MINUS           reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    EQ              reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    DIF             reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    LTOEQ           reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    GTOEQ           reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    GT              reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    LT              reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    AND             reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    OR              reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    ,               reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    )               reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    ]               reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)
    ;               reduce using rule 140 (opMatrix -> errorOpMatrix [ expresion ] .)


state 285

    (99) optionalElse -> errorElse ELSE { . body }
    (69) body -> . errorBody cyInstruction
    (70) body -> . empty
    (71) errorBody -> .
    (150) empty -> .

    ID              reduce using rule 71 (errorBody -> .)
    IF              reduce using rule 71 (errorBody -> .)
    FOR             reduce using rule 71 (errorBody -> .)
    WHILE           reduce using rule 71 (errorBody -> .)
    }               reduce using rule 150 (empty -> .)

    body                           shift and go to state 289
    empty                          shift and go to state 75
    errorBody                      shift and go to state 74

state 286

    (57) opReturns -> errorOpReturns RETURNS type saveReturnType { opVars body return .

    }               reduce using rule 57 (opReturns -> errorOpReturns RETURNS type saveReturnType { opVars body return .)


state 287

    (50) return -> errorReturn . RETURN expresion ;

    RETURN          shift and go to state 290


state 288

    (77) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .

    ID              reduce using rule 77 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    IF              reduce using rule 77 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    FOR             reduce using rule 77 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    WHILE           reduce using rule 77 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    }               reduce using rule 77 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    RETURN          reduce using rule 77 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)


state 289

    (99) optionalElse -> errorElse ELSE { body . }

    }               shift and go to state 291


state 290

    (50) return -> errorReturn RETURN . expresion ;
    (104) expresion -> . sExp cyExpresion errorExpresion
    (109) sExp -> . exp errorOpSExp opSExp
    (119) exp -> . term errorCyExp cyExp
    (124) term -> . fact cyTerm
    (128) fact -> . CTES
    (129) fact -> . cte
    (130) fact -> . funcCall
    (131) fact -> . ( expresion )
    (132) fact -> . ID opAccess errorOpAccess
    (146) cte -> . CTED
    (147) cte -> . CTEF
    (148) cte -> . TRUE
    (149) cte -> . FALSE
    (87) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 129
    (               shift and go to state 123
    ID              shift and go to state 127
    CTED            shift and go to state 126
    CTEF            shift and go to state 134
    TRUE            shift and go to state 122
    FALSE           shift and go to state 131

    expresion                      shift and go to state 292
    term                           shift and go to state 130
    funcCall                       shift and go to state 132
    sExp                           shift and go to state 124
    cte                            shift and go to state 133
    exp                            shift and go to state 135
    fact                           shift and go to state 136

state 291

    (99) optionalElse -> errorElse ELSE { body } .

    ID              reduce using rule 99 (optionalElse -> errorElse ELSE { body } .)
    IF              reduce using rule 99 (optionalElse -> errorElse ELSE { body } .)
    FOR             reduce using rule 99 (optionalElse -> errorElse ELSE { body } .)
    WHILE           reduce using rule 99 (optionalElse -> errorElse ELSE { body } .)
    }               reduce using rule 99 (optionalElse -> errorElse ELSE { body } .)
    RETURN          reduce using rule 99 (optionalElse -> errorElse ELSE { body } .)


state 292

    (50) return -> errorReturn RETURN expresion . ;

    ;               shift and go to state 293


state 293

    (50) return -> errorReturn RETURN expresion ; .

    }               reduce using rule 50 (return -> errorReturn RETURN expresion ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CTES in state 172 resolved as shift
WARNING: reduce/reduce conflict in state 175 resolved using rule (initWith -> funcCall)
WARNING: rejected rule (fact -> funcCall) in state 175
