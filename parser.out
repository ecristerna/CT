Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> errorProgram PROGRAM saveType ID saveProc { opVars opFunctions main }
Rule 2     saveType -> <empty>
Rule 3     saveProc -> <empty>
Rule 4     errorProgram -> <empty>
Rule 5     opVars -> vars
Rule 6     opVars -> empty
Rule 7     opFunctions -> function opFunctions
Rule 8     opFunctions -> empty
Rule 9     vars -> errorVars VARS declare
Rule 10    saveID -> <empty>
Rule 11    errorVars -> <empty>
Rule 12    type -> errorType INT
Rule 13    type -> FLOAT
Rule 14    type -> STRING
Rule 15    type -> OBJECT
Rule 16    type -> BOOL
Rule 17    errorType -> <empty>
Rule 18    main -> errorMain MAIN saveMain { opVars body }
Rule 19    saveMain -> <empty>
Rule 20    errorMain -> <empty>
Rule 21    instr -> basicStatements ;
Rule 22    instr -> condition
Rule 23    instr -> cycle
Rule 24    basicStatements -> assign
Rule 25    basicStatements -> funcCall
Rule 26    declare -> basicDeclare
Rule 27    declare -> structDeclare
Rule 28    declare -> dictDeclare
Rule 29    init -> = initWith errorInit
Rule 30    errorInit -> <empty>
Rule 31    initWith -> expresion
Rule 32    initWith -> funcCall
Rule 33    initDict -> = ( dictType : dictType ) errorInitDict
Rule 34    errorInitDict -> <empty>
Rule 35    dictType -> errorDictType CTES
Rule 36    dictType -> cte
Rule 37    dictType -> ID
Rule 38    errorDictType -> <empty>
Rule 39    param -> saveType type errorParam ID cyTypeParam cyParam
Rule 40    errorParam -> <empty>
Rule 41    cyParam -> errorCyParam saveID ; param
Rule 42    cyParam -> empty saveID
Rule 43    cyTypeParam -> , saveID ID cyTypeParam
Rule 44    cyTypeParam -> empty
Rule 45    errorCyParam -> <empty>
Rule 46    function -> errorFunction FUNC saveType ID saveProc opParameters opReturns }
Rule 47    saveFunction -> <empty>
Rule 48    errorFunction -> <empty>
Rule 49    return -> errorReturn RETURN expresion ;
Rule 50    errorReturn -> <empty>
Rule 51    opParameters -> ( param ) errorOpParameters
Rule 52    opParameters -> empty
Rule 53    errorOpParameters -> <empty>
Rule 54    opReturns -> errorOpReturns RETURNS type saveReturnType { opVars body return
Rule 55    opReturns -> { opVars body
Rule 56    saveReturnType -> <empty>
Rule 57    errorOpReturns -> <empty>
Rule 58    basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
Rule 59    errorBasicDeclare -> <empty>
Rule 60    structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare
Rule 61    errorStructDeclare -> <empty>
Rule 62    dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare
Rule 63    errorDictDeclare -> <empty>
Rule 64    cyDeclare -> declare
Rule 65    cyDeclare -> empty
Rule 66    body -> errorBody cyInstruction
Rule 67    body -> empty
Rule 68    errorBody -> <empty>
Rule 69    cyInstruction -> instr body
Rule 70    cycle -> forCycle
Rule 71    cycle -> whileCycle
Rule 72    whileCycle -> errorWhileCycle WHILE ( expresion ) { body }
Rule 73    errorWhileCycle -> <empty>
Rule 74    forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body }
Rule 75    errorForCycle -> <empty>
Rule 76    assign -> ID errorAssign assignOptions
Rule 77    errorAssign -> <empty>
Rule 78    assignOptions -> init
Rule 79    assignOptions -> initDict
Rule 80    assignOptions -> [ expresion ] assignMatrix init
Rule 81    assignMatrix -> [ expresion ] errorAssignMatrix
Rule 82    assignMatrix -> empty
Rule 83    errorAssignMatrix -> <empty>
Rule 84    funcCall -> ID ( opParamCall )
Rule 85    opParamCall -> expresion cyParamCall
Rule 86    opParamCall -> empty
Rule 87    cyParamCall -> , expresion cyParamCall
Rule 88    cyParamCall -> empty
Rule 89    struct -> structType [ CTED ] optionalMatrix
Rule 90    structType -> type
Rule 91    structType -> DICT dict
Rule 92    optionalMatrix -> [ CTED ]
Rule 93    optionalMatrix -> empty
Rule 94    condition -> errorCondition IF ( expresion ) { body } optionalElse
Rule 95    errorCondition -> <empty>
Rule 96    optionalElse -> errorElse ELSE { body }
Rule 97    optionalElse -> empty
Rule 98    errorElse -> <empty>
Rule 99    dict -> errorDict ( type : type )
Rule 100   errorDict -> <empty>
Rule 101   expresion -> sExp cyExpresion errorExpresion
Rule 102   errorExpresion -> <empty>
Rule 103   cyExpresion -> AND expresion
Rule 104   cyExpresion -> OR expresion
Rule 105   cyExpresion -> empty
Rule 106   sExp -> exp errorOpSExp opSExp
Rule 107   opSExp -> EQ exp
Rule 108   opSExp -> DIF exp
Rule 109   opSExp -> LTOEQ exp
Rule 110   opSExp -> GTOEQ exp
Rule 111   opSExp -> > exp
Rule 112   opSExp -> < exp
Rule 113   opSExp -> empty
Rule 114   errorOpSExp -> <empty>
Rule 115   exp -> term errorCyExp cyExp
Rule 116   cyExp -> + term
Rule 117   cyExp -> - term
Rule 118   cyExp -> empty
Rule 119   errorCyExp -> <empty>
Rule 120   term -> fact cyTerm
Rule 121   cyTerm -> * errorFact fact
Rule 122   cyTerm -> / fact
Rule 123   cyTerm -> empty
Rule 124   fact -> CTES
Rule 125   fact -> cte
Rule 126   fact -> funcCall
Rule 127   fact -> ( expresion )
Rule 128   fact -> ID opAccess errorOpAccess
Rule 129   errorFact -> <empty>
Rule 130   opAccess -> opStruct
Rule 131   opAccess -> opDictionary
Rule 132   opAccess -> empty
Rule 133   errorOpAccess -> <empty>
Rule 134   opStruct -> errorOpStruct [ expresion ] opMatrix
Rule 135   errorOpStruct -> <empty>
Rule 136   opMatrix -> errorOpMatrix [ expresion ]
Rule 137   opMatrix -> empty
Rule 138   errorOpMatrix -> <empty>
Rule 139   opDictionary -> . dictIndex
Rule 140   dictIndex -> FIRST
Rule 141   dictIndex -> LAST
Rule 142   cte -> CTED
Rule 143   cte -> CTEF
Rule 144   cte -> TRUE
Rule 145   cte -> FALSE
Rule 146   empty -> <empty>

Terminals, with rules where they appear

(                    : 33 51 72 74 84 94 99 127
)                    : 33 51 72 74 84 94 99 127
*                    : 121
+                    : 116
,                    : 43 87
-                    : 117
.                    : 139
/                    : 122
:                    : 33 99
;                    : 21 41 49 58 60 62 74 74
<                    : 112
=                    : 29 33
>                    : 111
AND                  : 103
BOOL                 : 16
CTED                 : 89 92 142
CTEF                 : 143
CTES                 : 35 124
DICT                 : 62 91
DIF                  : 108
ELSE                 : 96
EQ                   : 107
FALSE                : 145
FIRST                : 140
FLOAT                : 13
FOR                  : 74
FUNC                 : 46
GTOEQ                : 110
ID                   : 1 37 39 43 46 58 60 62 76 84 128
IF                   : 94
INT                  : 12
LAST                 : 141
LTOEQ                : 109
MAIN                 : 18
OBJECT               : 15
OR                   : 104
PROGRAM              : 1
RETURN               : 49
RETURNS              : 54
STRING               : 14
STRUCT               : 60
TRUE                 : 144
VARS                 : 9
WHILE                : 72
[                    : 80 81 89 92 134 136
]                    : 80 81 89 92 134 136
error                : 
{                    : 1 18 54 55 72 74 94 96
}                    : 1 18 46 72 74 94 96

Nonterminals, with rules where they appear

assign               : 24 74 74
assignMatrix         : 80
assignOptions        : 76
basicDeclare         : 26
basicStatements      : 21
body                 : 18 54 55 69 72 74 94 96
condition            : 22
cte                  : 36 125
cyDeclare            : 58 60 62
cyExp                : 115
cyExpresion          : 101
cyInstruction        : 66
cyParam              : 39
cyParamCall          : 85 87
cyTerm               : 120
cyTypeParam          : 39 43 58
cycle                : 23
declare              : 9 64
dict                 : 62 91
dictDeclare          : 28
dictIndex            : 139
dictType             : 33 33
empty                : 6 8 42 44 52 65 67 82 86 88 93 97 105 113 118 123 132 137
errorAssign          : 76
errorAssignMatrix    : 81
errorBasicDeclare    : 58
errorBody            : 66
errorCondition       : 94
errorCyExp           : 115
errorCyParam         : 41
errorDict            : 99
errorDictDeclare     : 62
errorDictType        : 35
errorElse            : 96
errorExpresion       : 101
errorFact            : 121
errorForCycle        : 74
errorFunction        : 46
errorInit            : 29
errorInitDict        : 33
errorMain            : 18
errorOpAccess        : 128
errorOpMatrix        : 136
errorOpParameters    : 51
errorOpReturns       : 54
errorOpSExp          : 106
errorOpStruct        : 134
errorParam           : 39
errorProgram         : 1
errorReturn          : 49
errorStructDeclare   : 60
errorType            : 12
errorVars            : 9
errorWhileCycle      : 72
exp                  : 106 107 108 109 110 111 112
expresion            : 31 49 72 74 80 81 85 87 94 103 104 127 134 136
fact                 : 120 121 122
forCycle             : 70
funcCall             : 25 32 126
function             : 7
init                 : 78 80
initDict             : 79
initWith             : 29
instr                : 69
main                 : 1
opAccess             : 128
opDictionary         : 131
opFunctions          : 1 7
opMatrix             : 134
opParamCall          : 84
opParameters         : 46
opReturns            : 46
opSExp               : 106
opStruct             : 130
opVars               : 1 18 54 55
optionalElse         : 94
optionalMatrix       : 89
param                : 41 51
program              : 0
return               : 54
sExp                 : 101
saveFunction         : 
saveID               : 41 42 43 58
saveMain             : 18
saveProc             : 1 46
saveReturnType       : 54
saveType             : 1 39 46 58
struct               : 60
structDeclare        : 27
structType           : 89
term                 : 115 116 117
type                 : 39 54 58 90 99 99
vars                 : 5
whileCycle           : 71

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . errorProgram PROGRAM saveType ID saveProc { opVars opFunctions main }
    (4) errorProgram -> .

    PROGRAM         reduce using rule 4 (errorProgram -> .)

    errorProgram                   shift and go to state 2
    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> errorProgram . PROGRAM saveType ID saveProc { opVars opFunctions main }

    PROGRAM         shift and go to state 3


state 3

    (1) program -> errorProgram PROGRAM . saveType ID saveProc { opVars opFunctions main }
    (2) saveType -> .

    ID              reduce using rule 2 (saveType -> .)

    saveType                       shift and go to state 4

state 4

    (1) program -> errorProgram PROGRAM saveType . ID saveProc { opVars opFunctions main }

    ID              shift and go to state 5


state 5

    (1) program -> errorProgram PROGRAM saveType ID . saveProc { opVars opFunctions main }
    (3) saveProc -> .

    {               reduce using rule 3 (saveProc -> .)

    saveProc                       shift and go to state 6

state 6

    (1) program -> errorProgram PROGRAM saveType ID saveProc . { opVars opFunctions main }

    {               shift and go to state 7


state 7

    (1) program -> errorProgram PROGRAM saveType ID saveProc { . opVars opFunctions main }
    (5) opVars -> . vars
    (6) opVars -> . empty
    (9) vars -> . errorVars VARS declare
    (146) empty -> .
    (11) errorVars -> .

    MAIN            reduce using rule 146 (empty -> .)
    FUNC            reduce using rule 146 (empty -> .)
    VARS            reduce using rule 11 (errorVars -> .)

    vars                           shift and go to state 8
    opVars                         shift and go to state 9
    errorVars                      shift and go to state 10
    empty                          shift and go to state 11

state 8

    (5) opVars -> vars .

    RETURN          reduce using rule 5 (opVars -> vars .)
    ID              reduce using rule 5 (opVars -> vars .)
    IF              reduce using rule 5 (opVars -> vars .)
    FOR             reduce using rule 5 (opVars -> vars .)
    WHILE           reduce using rule 5 (opVars -> vars .)
    }               reduce using rule 5 (opVars -> vars .)
    MAIN            reduce using rule 5 (opVars -> vars .)
    FUNC            reduce using rule 5 (opVars -> vars .)


state 9

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars . opFunctions main }
    (7) opFunctions -> . function opFunctions
    (8) opFunctions -> . empty
    (46) function -> . errorFunction FUNC saveType ID saveProc opParameters opReturns }
    (146) empty -> .
    (48) errorFunction -> .

    MAIN            reduce using rule 146 (empty -> .)
    FUNC            reduce using rule 48 (errorFunction -> .)

    function                       shift and go to state 12
    errorFunction                  shift and go to state 13
    empty                          shift and go to state 14
    opFunctions                    shift and go to state 15

state 10

    (9) vars -> errorVars . VARS declare

    VARS            shift and go to state 16


state 11

    (6) opVars -> empty .

    RETURN          reduce using rule 6 (opVars -> empty .)
    ID              reduce using rule 6 (opVars -> empty .)
    IF              reduce using rule 6 (opVars -> empty .)
    FOR             reduce using rule 6 (opVars -> empty .)
    WHILE           reduce using rule 6 (opVars -> empty .)
    }               reduce using rule 6 (opVars -> empty .)
    MAIN            reduce using rule 6 (opVars -> empty .)
    FUNC            reduce using rule 6 (opVars -> empty .)


state 12

    (7) opFunctions -> function . opFunctions
    (7) opFunctions -> . function opFunctions
    (8) opFunctions -> . empty
    (46) function -> . errorFunction FUNC saveType ID saveProc opParameters opReturns }
    (146) empty -> .
    (48) errorFunction -> .

    MAIN            reduce using rule 146 (empty -> .)
    FUNC            reduce using rule 48 (errorFunction -> .)

    function                       shift and go to state 12
    errorFunction                  shift and go to state 13
    empty                          shift and go to state 14
    opFunctions                    shift and go to state 17

state 13

    (46) function -> errorFunction . FUNC saveType ID saveProc opParameters opReturns }

    FUNC            shift and go to state 18


state 14

    (8) opFunctions -> empty .

    MAIN            reduce using rule 8 (opFunctions -> empty .)


state 15

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars opFunctions . main }
    (18) main -> . errorMain MAIN saveMain { opVars body }
    (20) errorMain -> .

    MAIN            reduce using rule 20 (errorMain -> .)

    errorMain                      shift and go to state 20
    main                           shift and go to state 19

state 16

    (9) vars -> errorVars VARS . declare
    (26) declare -> . basicDeclare
    (27) declare -> . structDeclare
    (28) declare -> . dictDeclare
    (58) basicDeclare -> . saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (60) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (62) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (2) saveType -> .
    (61) errorStructDeclare -> .
    (63) errorDictDeclare -> .

    FLOAT           reduce using rule 2 (saveType -> .)
    STRING          reduce using rule 2 (saveType -> .)
    OBJECT          reduce using rule 2 (saveType -> .)
    BOOL            reduce using rule 2 (saveType -> .)
    INT             reduce using rule 2 (saveType -> .)
    STRUCT          reduce using rule 61 (errorStructDeclare -> .)
    DICT            reduce using rule 63 (errorDictDeclare -> .)

    dictDeclare                    shift and go to state 21
    saveType                       shift and go to state 22
    errorDictDeclare               shift and go to state 23
    structDeclare                  shift and go to state 24
    errorStructDeclare             shift and go to state 25
    basicDeclare                   shift and go to state 26
    declare                        shift and go to state 27

state 17

    (7) opFunctions -> function opFunctions .

    MAIN            reduce using rule 7 (opFunctions -> function opFunctions .)


state 18

    (46) function -> errorFunction FUNC . saveType ID saveProc opParameters opReturns }
    (2) saveType -> .

    ID              reduce using rule 2 (saveType -> .)

    saveType                       shift and go to state 28

state 19

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars opFunctions main . }

    }               shift and go to state 29


state 20

    (18) main -> errorMain . MAIN saveMain { opVars body }

    MAIN            shift and go to state 30


state 21

    (28) declare -> dictDeclare .

    MAIN            reduce using rule 28 (declare -> dictDeclare .)
    FUNC            reduce using rule 28 (declare -> dictDeclare .)
    }               reduce using rule 28 (declare -> dictDeclare .)
    ID              reduce using rule 28 (declare -> dictDeclare .)
    IF              reduce using rule 28 (declare -> dictDeclare .)
    FOR             reduce using rule 28 (declare -> dictDeclare .)
    WHILE           reduce using rule 28 (declare -> dictDeclare .)
    RETURN          reduce using rule 28 (declare -> dictDeclare .)


state 22

    (58) basicDeclare -> saveType . type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    errorType                      shift and go to state 33
    type                           shift and go to state 36

state 23

    (62) dictDeclare -> errorDictDeclare . DICT ID dict ; cyDeclare

    DICT            shift and go to state 37


state 24

    (27) declare -> structDeclare .

    MAIN            reduce using rule 27 (declare -> structDeclare .)
    FUNC            reduce using rule 27 (declare -> structDeclare .)
    }               reduce using rule 27 (declare -> structDeclare .)
    ID              reduce using rule 27 (declare -> structDeclare .)
    IF              reduce using rule 27 (declare -> structDeclare .)
    FOR             reduce using rule 27 (declare -> structDeclare .)
    WHILE           reduce using rule 27 (declare -> structDeclare .)
    RETURN          reduce using rule 27 (declare -> structDeclare .)


state 25

    (60) structDeclare -> errorStructDeclare . STRUCT ID struct ; cyDeclare

    STRUCT          shift and go to state 38


state 26

    (26) declare -> basicDeclare .

    MAIN            reduce using rule 26 (declare -> basicDeclare .)
    FUNC            reduce using rule 26 (declare -> basicDeclare .)
    }               reduce using rule 26 (declare -> basicDeclare .)
    ID              reduce using rule 26 (declare -> basicDeclare .)
    IF              reduce using rule 26 (declare -> basicDeclare .)
    FOR             reduce using rule 26 (declare -> basicDeclare .)
    WHILE           reduce using rule 26 (declare -> basicDeclare .)
    RETURN          reduce using rule 26 (declare -> basicDeclare .)


state 27

    (9) vars -> errorVars VARS declare .

    RETURN          reduce using rule 9 (vars -> errorVars VARS declare .)
    ID              reduce using rule 9 (vars -> errorVars VARS declare .)
    IF              reduce using rule 9 (vars -> errorVars VARS declare .)
    FOR             reduce using rule 9 (vars -> errorVars VARS declare .)
    WHILE           reduce using rule 9 (vars -> errorVars VARS declare .)
    }               reduce using rule 9 (vars -> errorVars VARS declare .)
    MAIN            reduce using rule 9 (vars -> errorVars VARS declare .)
    FUNC            reduce using rule 9 (vars -> errorVars VARS declare .)


state 28

    (46) function -> errorFunction FUNC saveType . ID saveProc opParameters opReturns }

    ID              shift and go to state 39


state 29

    (1) program -> errorProgram PROGRAM saveType ID saveProc { opVars opFunctions main } .

    $end            reduce using rule 1 (program -> errorProgram PROGRAM saveType ID saveProc { opVars opFunctions main } .)


state 30

    (18) main -> errorMain MAIN . saveMain { opVars body }
    (19) saveMain -> .

    {               reduce using rule 19 (saveMain -> .)

    saveMain                       shift and go to state 40

state 31

    (13) type -> FLOAT .

    [               reduce using rule 13 (type -> FLOAT .)
    {               reduce using rule 13 (type -> FLOAT .)
    )               reduce using rule 13 (type -> FLOAT .)
    ID              reduce using rule 13 (type -> FLOAT .)
    :               reduce using rule 13 (type -> FLOAT .)


state 32

    (14) type -> STRING .

    [               reduce using rule 14 (type -> STRING .)
    {               reduce using rule 14 (type -> STRING .)
    )               reduce using rule 14 (type -> STRING .)
    ID              reduce using rule 14 (type -> STRING .)
    :               reduce using rule 14 (type -> STRING .)


state 33

    (12) type -> errorType . INT

    INT             shift and go to state 41


state 34

    (15) type -> OBJECT .

    [               reduce using rule 15 (type -> OBJECT .)
    {               reduce using rule 15 (type -> OBJECT .)
    )               reduce using rule 15 (type -> OBJECT .)
    ID              reduce using rule 15 (type -> OBJECT .)
    :               reduce using rule 15 (type -> OBJECT .)


state 35

    (16) type -> BOOL .

    [               reduce using rule 16 (type -> BOOL .)
    {               reduce using rule 16 (type -> BOOL .)
    )               reduce using rule 16 (type -> BOOL .)
    ID              reduce using rule 16 (type -> BOOL .)
    :               reduce using rule 16 (type -> BOOL .)


state 36

    (58) basicDeclare -> saveType type . errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (59) errorBasicDeclare -> .

    ID              reduce using rule 59 (errorBasicDeclare -> .)

    errorBasicDeclare              shift and go to state 42

state 37

    (62) dictDeclare -> errorDictDeclare DICT . ID dict ; cyDeclare

    ID              shift and go to state 43


state 38

    (60) structDeclare -> errorStructDeclare STRUCT . ID struct ; cyDeclare

    ID              shift and go to state 44


state 39

    (46) function -> errorFunction FUNC saveType ID . saveProc opParameters opReturns }
    (3) saveProc -> .

    (               reduce using rule 3 (saveProc -> .)
    {               reduce using rule 3 (saveProc -> .)
    RETURNS         reduce using rule 3 (saveProc -> .)

    saveProc                       shift and go to state 45

state 40

    (18) main -> errorMain MAIN saveMain . { opVars body }

    {               shift and go to state 46


state 41

    (12) type -> errorType INT .

    [               reduce using rule 12 (type -> errorType INT .)
    {               reduce using rule 12 (type -> errorType INT .)
    )               reduce using rule 12 (type -> errorType INT .)
    ID              reduce using rule 12 (type -> errorType INT .)
    :               reduce using rule 12 (type -> errorType INT .)


state 42

    (58) basicDeclare -> saveType type errorBasicDeclare . ID cyTypeParam saveID ; cyDeclare

    ID              shift and go to state 47


state 43

    (62) dictDeclare -> errorDictDeclare DICT ID . dict ; cyDeclare
    (99) dict -> . errorDict ( type : type )
    (100) errorDict -> .

    (               reduce using rule 100 (errorDict -> .)

    dict                           shift and go to state 49
    errorDict                      shift and go to state 48

state 44

    (60) structDeclare -> errorStructDeclare STRUCT ID . struct ; cyDeclare
    (89) struct -> . structType [ CTED ] optionalMatrix
    (90) structType -> . type
    (91) structType -> . DICT dict
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    DICT            shift and go to state 52
    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    structType                     shift and go to state 50
    struct                         shift and go to state 51
    errorType                      shift and go to state 33
    type                           shift and go to state 53

state 45

    (46) function -> errorFunction FUNC saveType ID saveProc . opParameters opReturns }
    (51) opParameters -> . ( param ) errorOpParameters
    (52) opParameters -> . empty
    (146) empty -> .

    (               shift and go to state 55
    {               reduce using rule 146 (empty -> .)
    RETURNS         reduce using rule 146 (empty -> .)

    opParameters                   shift and go to state 54
    empty                          shift and go to state 56

state 46

    (18) main -> errorMain MAIN saveMain { . opVars body }
    (5) opVars -> . vars
    (6) opVars -> . empty
    (9) vars -> . errorVars VARS declare
    (146) empty -> .
    (11) errorVars -> .

    }               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    IF              reduce using rule 146 (empty -> .)
    FOR             reduce using rule 146 (empty -> .)
    WHILE           reduce using rule 146 (empty -> .)
    VARS            reduce using rule 11 (errorVars -> .)

    vars                           shift and go to state 8
    opVars                         shift and go to state 57
    errorVars                      shift and go to state 10
    empty                          shift and go to state 11

state 47

    (58) basicDeclare -> saveType type errorBasicDeclare ID . cyTypeParam saveID ; cyDeclare
    (43) cyTypeParam -> . , saveID ID cyTypeParam
    (44) cyTypeParam -> . empty
    (146) empty -> .

    ,               shift and go to state 58
    ;               reduce using rule 146 (empty -> .)

    empty                          shift and go to state 59
    cyTypeParam                    shift and go to state 60

state 48

    (99) dict -> errorDict . ( type : type )

    (               shift and go to state 61


state 49

    (62) dictDeclare -> errorDictDeclare DICT ID dict . ; cyDeclare

    ;               shift and go to state 62


state 50

    (89) struct -> structType . [ CTED ] optionalMatrix

    [               shift and go to state 63


state 51

    (60) structDeclare -> errorStructDeclare STRUCT ID struct . ; cyDeclare

    ;               shift and go to state 64


state 52

    (91) structType -> DICT . dict
    (99) dict -> . errorDict ( type : type )
    (100) errorDict -> .

    (               reduce using rule 100 (errorDict -> .)

    dict                           shift and go to state 65
    errorDict                      shift and go to state 48

state 53

    (90) structType -> type .

    [               reduce using rule 90 (structType -> type .)


state 54

    (46) function -> errorFunction FUNC saveType ID saveProc opParameters . opReturns }
    (54) opReturns -> . errorOpReturns RETURNS type saveReturnType { opVars body return
    (55) opReturns -> . { opVars body
    (57) errorOpReturns -> .

    {               shift and go to state 67
    RETURNS         reduce using rule 57 (errorOpReturns -> .)

    errorOpReturns                 shift and go to state 66
    opReturns                      shift and go to state 68

state 55

    (51) opParameters -> ( . param ) errorOpParameters
    (39) param -> . saveType type errorParam ID cyTypeParam cyParam
    (2) saveType -> .

    FLOAT           reduce using rule 2 (saveType -> .)
    STRING          reduce using rule 2 (saveType -> .)
    OBJECT          reduce using rule 2 (saveType -> .)
    BOOL            reduce using rule 2 (saveType -> .)
    INT             reduce using rule 2 (saveType -> .)

    param                          shift and go to state 69
    saveType                       shift and go to state 70

state 56

    (52) opParameters -> empty .

    {               reduce using rule 52 (opParameters -> empty .)
    RETURNS         reduce using rule 52 (opParameters -> empty .)


state 57

    (18) main -> errorMain MAIN saveMain { opVars . body }
    (66) body -> . errorBody cyInstruction
    (67) body -> . empty
    (68) errorBody -> .
    (146) empty -> .

    ID              reduce using rule 68 (errorBody -> .)
    IF              reduce using rule 68 (errorBody -> .)
    FOR             reduce using rule 68 (errorBody -> .)
    WHILE           reduce using rule 68 (errorBody -> .)
    }               reduce using rule 146 (empty -> .)

    body                           shift and go to state 71
    errorBody                      shift and go to state 72
    empty                          shift and go to state 73

state 58

    (43) cyTypeParam -> , . saveID ID cyTypeParam
    (10) saveID -> .

    ID              reduce using rule 10 (saveID -> .)

    saveID                         shift and go to state 74

state 59

    (44) cyTypeParam -> empty .

    ;               reduce using rule 44 (cyTypeParam -> empty .)
    )               reduce using rule 44 (cyTypeParam -> empty .)


state 60

    (58) basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam . saveID ; cyDeclare
    (10) saveID -> .

    ;               reduce using rule 10 (saveID -> .)

    saveID                         shift and go to state 75

state 61

    (99) dict -> errorDict ( . type : type )
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    errorType                      shift and go to state 33
    type                           shift and go to state 76

state 62

    (62) dictDeclare -> errorDictDeclare DICT ID dict ; . cyDeclare
    (64) cyDeclare -> . declare
    (65) cyDeclare -> . empty
    (26) declare -> . basicDeclare
    (27) declare -> . structDeclare
    (28) declare -> . dictDeclare
    (146) empty -> .
    (58) basicDeclare -> . saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (60) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (62) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (2) saveType -> .
    (61) errorStructDeclare -> .
    (63) errorDictDeclare -> .

    MAIN            reduce using rule 146 (empty -> .)
    FUNC            reduce using rule 146 (empty -> .)
    }               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    IF              reduce using rule 146 (empty -> .)
    FOR             reduce using rule 146 (empty -> .)
    WHILE           reduce using rule 146 (empty -> .)
    RETURN          reduce using rule 146 (empty -> .)
    FLOAT           reduce using rule 2 (saveType -> .)
    STRING          reduce using rule 2 (saveType -> .)
    OBJECT          reduce using rule 2 (saveType -> .)
    BOOL            reduce using rule 2 (saveType -> .)
    INT             reduce using rule 2 (saveType -> .)
    STRUCT          reduce using rule 61 (errorStructDeclare -> .)
    DICT            reduce using rule 63 (errorDictDeclare -> .)

    dictDeclare                    shift and go to state 21
    cyDeclare                      shift and go to state 77
    saveType                       shift and go to state 22
    structDeclare                  shift and go to state 24
    errorDictDeclare               shift and go to state 23
    errorStructDeclare             shift and go to state 25
    basicDeclare                   shift and go to state 26
    declare                        shift and go to state 78
    empty                          shift and go to state 79

state 63

    (89) struct -> structType [ . CTED ] optionalMatrix

    CTED            shift and go to state 80


state 64

    (60) structDeclare -> errorStructDeclare STRUCT ID struct ; . cyDeclare
    (64) cyDeclare -> . declare
    (65) cyDeclare -> . empty
    (26) declare -> . basicDeclare
    (27) declare -> . structDeclare
    (28) declare -> . dictDeclare
    (146) empty -> .
    (58) basicDeclare -> . saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (60) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (62) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (2) saveType -> .
    (61) errorStructDeclare -> .
    (63) errorDictDeclare -> .

    MAIN            reduce using rule 146 (empty -> .)
    FUNC            reduce using rule 146 (empty -> .)
    }               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    IF              reduce using rule 146 (empty -> .)
    FOR             reduce using rule 146 (empty -> .)
    WHILE           reduce using rule 146 (empty -> .)
    RETURN          reduce using rule 146 (empty -> .)
    FLOAT           reduce using rule 2 (saveType -> .)
    STRING          reduce using rule 2 (saveType -> .)
    OBJECT          reduce using rule 2 (saveType -> .)
    BOOL            reduce using rule 2 (saveType -> .)
    INT             reduce using rule 2 (saveType -> .)
    STRUCT          reduce using rule 61 (errorStructDeclare -> .)
    DICT            reduce using rule 63 (errorDictDeclare -> .)

    dictDeclare                    shift and go to state 21
    cyDeclare                      shift and go to state 81
    saveType                       shift and go to state 22
    errorDictDeclare               shift and go to state 23
    structDeclare                  shift and go to state 24
    basicDeclare                   shift and go to state 26
    declare                        shift and go to state 78
    empty                          shift and go to state 79
    errorStructDeclare             shift and go to state 25

state 65

    (91) structType -> DICT dict .

    [               reduce using rule 91 (structType -> DICT dict .)


state 66

    (54) opReturns -> errorOpReturns . RETURNS type saveReturnType { opVars body return

    RETURNS         shift and go to state 82


state 67

    (55) opReturns -> { . opVars body
    (5) opVars -> . vars
    (6) opVars -> . empty
    (9) vars -> . errorVars VARS declare
    (146) empty -> .
    (11) errorVars -> .

    ID              reduce using rule 146 (empty -> .)
    IF              reduce using rule 146 (empty -> .)
    FOR             reduce using rule 146 (empty -> .)
    WHILE           reduce using rule 146 (empty -> .)
    }               reduce using rule 146 (empty -> .)
    VARS            reduce using rule 11 (errorVars -> .)

    vars                           shift and go to state 8
    opVars                         shift and go to state 83
    errorVars                      shift and go to state 10
    empty                          shift and go to state 11

state 68

    (46) function -> errorFunction FUNC saveType ID saveProc opParameters opReturns . }

    }               shift and go to state 84


state 69

    (51) opParameters -> ( param . ) errorOpParameters

    )               shift and go to state 85


state 70

    (39) param -> saveType . type errorParam ID cyTypeParam cyParam
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    type                           shift and go to state 86
    errorType                      shift and go to state 33

state 71

    (18) main -> errorMain MAIN saveMain { opVars body . }

    }               shift and go to state 87


state 72

    (66) body -> errorBody . cyInstruction
    (69) cyInstruction -> . instr body
    (21) instr -> . basicStatements ;
    (22) instr -> . condition
    (23) instr -> . cycle
    (24) basicStatements -> . assign
    (25) basicStatements -> . funcCall
    (94) condition -> . errorCondition IF ( expresion ) { body } optionalElse
    (70) cycle -> . forCycle
    (71) cycle -> . whileCycle
    (76) assign -> . ID errorAssign assignOptions
    (84) funcCall -> . ID ( opParamCall )
    (95) errorCondition -> .
    (74) forCycle -> . errorForCycle FOR ( assign ; expresion ; assign ) { body }
    (72) whileCycle -> . errorWhileCycle WHILE ( expresion ) { body }
    (75) errorForCycle -> .
    (73) errorWhileCycle -> .

    ID              shift and go to state 97
    IF              reduce using rule 95 (errorCondition -> .)
    FOR             reduce using rule 75 (errorForCycle -> .)
    WHILE           reduce using rule 73 (errorWhileCycle -> .)

    errorWhileCycle                shift and go to state 91
    funcCall                       shift and go to state 98
    instr                          shift and go to state 88
    forCycle                       shift and go to state 90
    assign                         shift and go to state 100
    whileCycle                     shift and go to state 89
    basicStatements                shift and go to state 95
    errorForCycle                  shift and go to state 96
    errorCondition                 shift and go to state 99
    cyInstruction                  shift and go to state 92
    condition                      shift and go to state 93
    cycle                          shift and go to state 94

state 73

    (67) body -> empty .

    }               reduce using rule 67 (body -> empty .)
    RETURN          reduce using rule 67 (body -> empty .)


state 74

    (43) cyTypeParam -> , saveID . ID cyTypeParam

    ID              shift and go to state 101


state 75

    (58) basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID . ; cyDeclare

    ;               shift and go to state 102


state 76

    (99) dict -> errorDict ( type . : type )

    :               shift and go to state 103


state 77

    (62) dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .

    MAIN            reduce using rule 62 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    FUNC            reduce using rule 62 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    }               reduce using rule 62 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    ID              reduce using rule 62 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    IF              reduce using rule 62 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    FOR             reduce using rule 62 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    WHILE           reduce using rule 62 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)
    RETURN          reduce using rule 62 (dictDeclare -> errorDictDeclare DICT ID dict ; cyDeclare .)


state 78

    (64) cyDeclare -> declare .

    MAIN            reduce using rule 64 (cyDeclare -> declare .)
    FUNC            reduce using rule 64 (cyDeclare -> declare .)
    }               reduce using rule 64 (cyDeclare -> declare .)
    ID              reduce using rule 64 (cyDeclare -> declare .)
    IF              reduce using rule 64 (cyDeclare -> declare .)
    FOR             reduce using rule 64 (cyDeclare -> declare .)
    WHILE           reduce using rule 64 (cyDeclare -> declare .)
    RETURN          reduce using rule 64 (cyDeclare -> declare .)


state 79

    (65) cyDeclare -> empty .

    MAIN            reduce using rule 65 (cyDeclare -> empty .)
    FUNC            reduce using rule 65 (cyDeclare -> empty .)
    }               reduce using rule 65 (cyDeclare -> empty .)
    ID              reduce using rule 65 (cyDeclare -> empty .)
    IF              reduce using rule 65 (cyDeclare -> empty .)
    FOR             reduce using rule 65 (cyDeclare -> empty .)
    WHILE           reduce using rule 65 (cyDeclare -> empty .)
    RETURN          reduce using rule 65 (cyDeclare -> empty .)


state 80

    (89) struct -> structType [ CTED . ] optionalMatrix

    ]               shift and go to state 104


state 81

    (60) structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .

    MAIN            reduce using rule 60 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    FUNC            reduce using rule 60 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    }               reduce using rule 60 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    ID              reduce using rule 60 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    IF              reduce using rule 60 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    FOR             reduce using rule 60 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    WHILE           reduce using rule 60 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)
    RETURN          reduce using rule 60 (structDeclare -> errorStructDeclare STRUCT ID struct ; cyDeclare .)


state 82

    (54) opReturns -> errorOpReturns RETURNS . type saveReturnType { opVars body return
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    errorType                      shift and go to state 33
    type                           shift and go to state 105

state 83

    (55) opReturns -> { opVars . body
    (66) body -> . errorBody cyInstruction
    (67) body -> . empty
    (68) errorBody -> .
    (146) empty -> .

    ID              reduce using rule 68 (errorBody -> .)
    IF              reduce using rule 68 (errorBody -> .)
    FOR             reduce using rule 68 (errorBody -> .)
    WHILE           reduce using rule 68 (errorBody -> .)
    }               reduce using rule 146 (empty -> .)

    body                           shift and go to state 106
    empty                          shift and go to state 73
    errorBody                      shift and go to state 72

state 84

    (46) function -> errorFunction FUNC saveType ID saveProc opParameters opReturns } .

    FUNC            reduce using rule 46 (function -> errorFunction FUNC saveType ID saveProc opParameters opReturns } .)
    MAIN            reduce using rule 46 (function -> errorFunction FUNC saveType ID saveProc opParameters opReturns } .)


state 85

    (51) opParameters -> ( param ) . errorOpParameters
    (53) errorOpParameters -> .

    {               reduce using rule 53 (errorOpParameters -> .)
    RETURNS         reduce using rule 53 (errorOpParameters -> .)

    errorOpParameters              shift and go to state 107

state 86

    (39) param -> saveType type . errorParam ID cyTypeParam cyParam
    (40) errorParam -> .

    ID              reduce using rule 40 (errorParam -> .)

    errorParam                     shift and go to state 108

state 87

    (18) main -> errorMain MAIN saveMain { opVars body } .

    }               reduce using rule 18 (main -> errorMain MAIN saveMain { opVars body } .)


state 88

    (69) cyInstruction -> instr . body
    (66) body -> . errorBody cyInstruction
    (67) body -> . empty
    (68) errorBody -> .
    (146) empty -> .

    ID              reduce using rule 68 (errorBody -> .)
    IF              reduce using rule 68 (errorBody -> .)
    FOR             reduce using rule 68 (errorBody -> .)
    WHILE           reduce using rule 68 (errorBody -> .)
    }               reduce using rule 146 (empty -> .)
    RETURN          reduce using rule 146 (empty -> .)

    body                           shift and go to state 109
    errorBody                      shift and go to state 72
    empty                          shift and go to state 73

state 89

    (71) cycle -> whileCycle .

    ID              reduce using rule 71 (cycle -> whileCycle .)
    IF              reduce using rule 71 (cycle -> whileCycle .)
    FOR             reduce using rule 71 (cycle -> whileCycle .)
    WHILE           reduce using rule 71 (cycle -> whileCycle .)
    }               reduce using rule 71 (cycle -> whileCycle .)
    RETURN          reduce using rule 71 (cycle -> whileCycle .)


state 90

    (70) cycle -> forCycle .

    ID              reduce using rule 70 (cycle -> forCycle .)
    IF              reduce using rule 70 (cycle -> forCycle .)
    FOR             reduce using rule 70 (cycle -> forCycle .)
    WHILE           reduce using rule 70 (cycle -> forCycle .)
    }               reduce using rule 70 (cycle -> forCycle .)
    RETURN          reduce using rule 70 (cycle -> forCycle .)


state 91

    (72) whileCycle -> errorWhileCycle . WHILE ( expresion ) { body }

    WHILE           shift and go to state 110


state 92

    (66) body -> errorBody cyInstruction .

    }               reduce using rule 66 (body -> errorBody cyInstruction .)
    RETURN          reduce using rule 66 (body -> errorBody cyInstruction .)


state 93

    (22) instr -> condition .

    ID              reduce using rule 22 (instr -> condition .)
    IF              reduce using rule 22 (instr -> condition .)
    FOR             reduce using rule 22 (instr -> condition .)
    WHILE           reduce using rule 22 (instr -> condition .)
    }               reduce using rule 22 (instr -> condition .)
    RETURN          reduce using rule 22 (instr -> condition .)


state 94

    (23) instr -> cycle .

    ID              reduce using rule 23 (instr -> cycle .)
    IF              reduce using rule 23 (instr -> cycle .)
    FOR             reduce using rule 23 (instr -> cycle .)
    WHILE           reduce using rule 23 (instr -> cycle .)
    }               reduce using rule 23 (instr -> cycle .)
    RETURN          reduce using rule 23 (instr -> cycle .)


state 95

    (21) instr -> basicStatements . ;

    ;               shift and go to state 111


state 96

    (74) forCycle -> errorForCycle . FOR ( assign ; expresion ; assign ) { body }

    FOR             shift and go to state 112


state 97

    (76) assign -> ID . errorAssign assignOptions
    (84) funcCall -> ID . ( opParamCall )
    (77) errorAssign -> .

    (               shift and go to state 113
    [               reduce using rule 77 (errorAssign -> .)
    =               reduce using rule 77 (errorAssign -> .)

    errorAssign                    shift and go to state 114

state 98

    (25) basicStatements -> funcCall .

    ;               reduce using rule 25 (basicStatements -> funcCall .)


state 99

    (94) condition -> errorCondition . IF ( expresion ) { body } optionalElse

    IF              shift and go to state 115


state 100

    (24) basicStatements -> assign .

    ;               reduce using rule 24 (basicStatements -> assign .)


state 101

    (43) cyTypeParam -> , saveID ID . cyTypeParam
    (43) cyTypeParam -> . , saveID ID cyTypeParam
    (44) cyTypeParam -> . empty
    (146) empty -> .

    ,               shift and go to state 58
    ;               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)

    cyTypeParam                    shift and go to state 116
    empty                          shift and go to state 59

state 102

    (58) basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; . cyDeclare
    (64) cyDeclare -> . declare
    (65) cyDeclare -> . empty
    (26) declare -> . basicDeclare
    (27) declare -> . structDeclare
    (28) declare -> . dictDeclare
    (146) empty -> .
    (58) basicDeclare -> . saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare
    (60) structDeclare -> . errorStructDeclare STRUCT ID struct ; cyDeclare
    (62) dictDeclare -> . errorDictDeclare DICT ID dict ; cyDeclare
    (2) saveType -> .
    (61) errorStructDeclare -> .
    (63) errorDictDeclare -> .

    MAIN            reduce using rule 146 (empty -> .)
    FUNC            reduce using rule 146 (empty -> .)
    }               reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    IF              reduce using rule 146 (empty -> .)
    FOR             reduce using rule 146 (empty -> .)
    WHILE           reduce using rule 146 (empty -> .)
    RETURN          reduce using rule 146 (empty -> .)
    FLOAT           reduce using rule 2 (saveType -> .)
    STRING          reduce using rule 2 (saveType -> .)
    OBJECT          reduce using rule 2 (saveType -> .)
    BOOL            reduce using rule 2 (saveType -> .)
    INT             reduce using rule 2 (saveType -> .)
    STRUCT          reduce using rule 61 (errorStructDeclare -> .)
    DICT            reduce using rule 63 (errorDictDeclare -> .)

    dictDeclare                    shift and go to state 21
    cyDeclare                      shift and go to state 117
    basicDeclare                   shift and go to state 26
    saveType                       shift and go to state 22
    errorDictDeclare               shift and go to state 23
    empty                          shift and go to state 79
    structDeclare                  shift and go to state 24
    errorStructDeclare             shift and go to state 25
    declare                        shift and go to state 78

state 103

    (99) dict -> errorDict ( type : . type )
    (12) type -> . errorType INT
    (13) type -> . FLOAT
    (14) type -> . STRING
    (15) type -> . OBJECT
    (16) type -> . BOOL
    (17) errorType -> .

    FLOAT           shift and go to state 31
    STRING          shift and go to state 32
    OBJECT          shift and go to state 34
    BOOL            shift and go to state 35
    INT             reduce using rule 17 (errorType -> .)

    errorType                      shift and go to state 33
    type                           shift and go to state 118

state 104

    (89) struct -> structType [ CTED ] . optionalMatrix
    (92) optionalMatrix -> . [ CTED ]
    (93) optionalMatrix -> . empty
    (146) empty -> .

    [               shift and go to state 120
    ;               reduce using rule 146 (empty -> .)

    empty                          shift and go to state 121
    optionalMatrix                 shift and go to state 119

state 105

    (54) opReturns -> errorOpReturns RETURNS type . saveReturnType { opVars body return
    (56) saveReturnType -> .

    {               reduce using rule 56 (saveReturnType -> .)

    saveReturnType                 shift and go to state 122

state 106

    (55) opReturns -> { opVars body .

    }               reduce using rule 55 (opReturns -> { opVars body .)


state 107

    (51) opParameters -> ( param ) errorOpParameters .

    {               reduce using rule 51 (opParameters -> ( param ) errorOpParameters .)
    RETURNS         reduce using rule 51 (opParameters -> ( param ) errorOpParameters .)


state 108

    (39) param -> saveType type errorParam . ID cyTypeParam cyParam

    ID              shift and go to state 123


state 109

    (69) cyInstruction -> instr body .

    }               reduce using rule 69 (cyInstruction -> instr body .)
    RETURN          reduce using rule 69 (cyInstruction -> instr body .)


state 110

    (72) whileCycle -> errorWhileCycle WHILE . ( expresion ) { body }

    (               shift and go to state 124


state 111

    (21) instr -> basicStatements ; .

    ID              reduce using rule 21 (instr -> basicStatements ; .)
    IF              reduce using rule 21 (instr -> basicStatements ; .)
    FOR             reduce using rule 21 (instr -> basicStatements ; .)
    WHILE           reduce using rule 21 (instr -> basicStatements ; .)
    }               reduce using rule 21 (instr -> basicStatements ; .)
    RETURN          reduce using rule 21 (instr -> basicStatements ; .)


state 112

    (74) forCycle -> errorForCycle FOR . ( assign ; expresion ; assign ) { body }

    (               shift and go to state 125


state 113

    (84) funcCall -> ID ( . opParamCall )
    (85) opParamCall -> . expresion cyParamCall
    (86) opParamCall -> . empty
    (101) expresion -> . sExp cyExpresion errorExpresion
    (146) empty -> .
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    )               reduce using rule 146 (empty -> .)
    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 133
    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    fact                           shift and go to state 141
    exp                            shift and go to state 140
    opParamCall                    shift and go to state 126
    empty                          shift and go to state 130

state 114

    (76) assign -> ID errorAssign . assignOptions
    (78) assignOptions -> . init
    (79) assignOptions -> . initDict
    (80) assignOptions -> . [ expresion ] assignMatrix init
    (29) init -> . = initWith errorInit
    (33) initDict -> . = ( dictType : dictType ) errorInitDict

    [               shift and go to state 146
    =               shift and go to state 142

    initDict                       shift and go to state 143
    assignOptions                  shift and go to state 144
    init                           shift and go to state 145

state 115

    (94) condition -> errorCondition IF . ( expresion ) { body } optionalElse

    (               shift and go to state 147


state 116

    (43) cyTypeParam -> , saveID ID cyTypeParam .

    ;               reduce using rule 43 (cyTypeParam -> , saveID ID cyTypeParam .)
    )               reduce using rule 43 (cyTypeParam -> , saveID ID cyTypeParam .)


state 117

    (58) basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .

    MAIN            reduce using rule 58 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    FUNC            reduce using rule 58 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    }               reduce using rule 58 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    ID              reduce using rule 58 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    IF              reduce using rule 58 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    FOR             reduce using rule 58 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    WHILE           reduce using rule 58 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)
    RETURN          reduce using rule 58 (basicDeclare -> saveType type errorBasicDeclare ID cyTypeParam saveID ; cyDeclare .)


state 118

    (99) dict -> errorDict ( type : type . )

    )               shift and go to state 148


state 119

    (89) struct -> structType [ CTED ] optionalMatrix .

    ;               reduce using rule 89 (struct -> structType [ CTED ] optionalMatrix .)


state 120

    (92) optionalMatrix -> [ . CTED ]

    CTED            shift and go to state 149


state 121

    (93) optionalMatrix -> empty .

    ;               reduce using rule 93 (optionalMatrix -> empty .)


state 122

    (54) opReturns -> errorOpReturns RETURNS type saveReturnType . { opVars body return

    {               shift and go to state 150


state 123

    (39) param -> saveType type errorParam ID . cyTypeParam cyParam
    (43) cyTypeParam -> . , saveID ID cyTypeParam
    (44) cyTypeParam -> . empty
    (146) empty -> .

    ,               shift and go to state 58
    ;               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)

    empty                          shift and go to state 59
    cyTypeParam                    shift and go to state 151

state 124

    (72) whileCycle -> errorWhileCycle WHILE ( . expresion ) { body }
    (101) expresion -> . sExp cyExpresion errorExpresion
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 152
    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 125

    (74) forCycle -> errorForCycle FOR ( . assign ; expresion ; assign ) { body }
    (76) assign -> . ID errorAssign assignOptions

    ID              shift and go to state 153

    assign                         shift and go to state 154

state 126

    (84) funcCall -> ID ( opParamCall . )

    )               shift and go to state 155


state 127

    (144) cte -> TRUE .

    *               reduce using rule 144 (cte -> TRUE .)
    /               reduce using rule 144 (cte -> TRUE .)
    +               reduce using rule 144 (cte -> TRUE .)
    -               reduce using rule 144 (cte -> TRUE .)
    EQ              reduce using rule 144 (cte -> TRUE .)
    DIF             reduce using rule 144 (cte -> TRUE .)
    LTOEQ           reduce using rule 144 (cte -> TRUE .)
    GTOEQ           reduce using rule 144 (cte -> TRUE .)
    >               reduce using rule 144 (cte -> TRUE .)
    <               reduce using rule 144 (cte -> TRUE .)
    AND             reduce using rule 144 (cte -> TRUE .)
    OR              reduce using rule 144 (cte -> TRUE .)
    ,               reduce using rule 144 (cte -> TRUE .)
    )               reduce using rule 144 (cte -> TRUE .)
    ;               reduce using rule 144 (cte -> TRUE .)
    ]               reduce using rule 144 (cte -> TRUE .)
    :               reduce using rule 144 (cte -> TRUE .)


state 128

    (127) fact -> ( . expresion )
    (101) expresion -> . sExp cyExpresion errorExpresion
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 156
    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 129

    (101) expresion -> sExp . cyExpresion errorExpresion
    (103) cyExpresion -> . AND expresion
    (104) cyExpresion -> . OR expresion
    (105) cyExpresion -> . empty
    (146) empty -> .

    AND             shift and go to state 157
    OR              shift and go to state 159
    ,               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    ;               reduce using rule 146 (empty -> .)
    ]               reduce using rule 146 (empty -> .)

    cyExpresion                    shift and go to state 158
    empty                          shift and go to state 160

state 130

    (86) opParamCall -> empty .

    )               reduce using rule 86 (opParamCall -> empty .)


state 131

    (142) cte -> CTED .

    *               reduce using rule 142 (cte -> CTED .)
    /               reduce using rule 142 (cte -> CTED .)
    +               reduce using rule 142 (cte -> CTED .)
    -               reduce using rule 142 (cte -> CTED .)
    EQ              reduce using rule 142 (cte -> CTED .)
    DIF             reduce using rule 142 (cte -> CTED .)
    LTOEQ           reduce using rule 142 (cte -> CTED .)
    GTOEQ           reduce using rule 142 (cte -> CTED .)
    >               reduce using rule 142 (cte -> CTED .)
    <               reduce using rule 142 (cte -> CTED .)
    AND             reduce using rule 142 (cte -> CTED .)
    OR              reduce using rule 142 (cte -> CTED .)
    ,               reduce using rule 142 (cte -> CTED .)
    )               reduce using rule 142 (cte -> CTED .)
    ;               reduce using rule 142 (cte -> CTED .)
    ]               reduce using rule 142 (cte -> CTED .)
    :               reduce using rule 142 (cte -> CTED .)


state 132

    (128) fact -> ID . opAccess errorOpAccess
    (84) funcCall -> ID . ( opParamCall )
    (130) opAccess -> . opStruct
    (131) opAccess -> . opDictionary
    (132) opAccess -> . empty
    (134) opStruct -> . errorOpStruct [ expresion ] opMatrix
    (139) opDictionary -> . . dictIndex
    (146) empty -> .
    (135) errorOpStruct -> .

    (               shift and go to state 113
    .               shift and go to state 165
    *               reduce using rule 146 (empty -> .)
    /               reduce using rule 146 (empty -> .)
    +               reduce using rule 146 (empty -> .)
    -               reduce using rule 146 (empty -> .)
    EQ              reduce using rule 146 (empty -> .)
    DIF             reduce using rule 146 (empty -> .)
    LTOEQ           reduce using rule 146 (empty -> .)
    GTOEQ           reduce using rule 146 (empty -> .)
    >               reduce using rule 146 (empty -> .)
    <               reduce using rule 146 (empty -> .)
    AND             reduce using rule 146 (empty -> .)
    OR              reduce using rule 146 (empty -> .)
    ,               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    ]               reduce using rule 146 (empty -> .)
    ;               reduce using rule 146 (empty -> .)
    [               reduce using rule 135 (errorOpStruct -> .)

    errorOpStruct                  shift and go to state 161
    opDictionary                   shift and go to state 166
    opStruct                       shift and go to state 162
    opAccess                       shift and go to state 163
    empty                          shift and go to state 164

state 133

    (85) opParamCall -> expresion . cyParamCall
    (87) cyParamCall -> . , expresion cyParamCall
    (88) cyParamCall -> . empty
    (146) empty -> .

    ,               shift and go to state 168
    )               reduce using rule 146 (empty -> .)

    cyParamCall                    shift and go to state 167
    empty                          shift and go to state 169

state 134

    (124) fact -> CTES .

    *               reduce using rule 124 (fact -> CTES .)
    /               reduce using rule 124 (fact -> CTES .)
    +               reduce using rule 124 (fact -> CTES .)
    -               reduce using rule 124 (fact -> CTES .)
    EQ              reduce using rule 124 (fact -> CTES .)
    DIF             reduce using rule 124 (fact -> CTES .)
    LTOEQ           reduce using rule 124 (fact -> CTES .)
    GTOEQ           reduce using rule 124 (fact -> CTES .)
    >               reduce using rule 124 (fact -> CTES .)
    <               reduce using rule 124 (fact -> CTES .)
    AND             reduce using rule 124 (fact -> CTES .)
    OR              reduce using rule 124 (fact -> CTES .)
    ;               reduce using rule 124 (fact -> CTES .)
    )               reduce using rule 124 (fact -> CTES .)
    ,               reduce using rule 124 (fact -> CTES .)
    ]               reduce using rule 124 (fact -> CTES .)


state 135

    (115) exp -> term . errorCyExp cyExp
    (119) errorCyExp -> .

    +               reduce using rule 119 (errorCyExp -> .)
    -               reduce using rule 119 (errorCyExp -> .)
    EQ              reduce using rule 119 (errorCyExp -> .)
    DIF             reduce using rule 119 (errorCyExp -> .)
    LTOEQ           reduce using rule 119 (errorCyExp -> .)
    GTOEQ           reduce using rule 119 (errorCyExp -> .)
    >               reduce using rule 119 (errorCyExp -> .)
    <               reduce using rule 119 (errorCyExp -> .)
    AND             reduce using rule 119 (errorCyExp -> .)
    OR              reduce using rule 119 (errorCyExp -> .)
    ,               reduce using rule 119 (errorCyExp -> .)
    )               reduce using rule 119 (errorCyExp -> .)
    ;               reduce using rule 119 (errorCyExp -> .)
    ]               reduce using rule 119 (errorCyExp -> .)

    errorCyExp                     shift and go to state 170

state 136

    (145) cte -> FALSE .

    *               reduce using rule 145 (cte -> FALSE .)
    /               reduce using rule 145 (cte -> FALSE .)
    +               reduce using rule 145 (cte -> FALSE .)
    -               reduce using rule 145 (cte -> FALSE .)
    EQ              reduce using rule 145 (cte -> FALSE .)
    DIF             reduce using rule 145 (cte -> FALSE .)
    LTOEQ           reduce using rule 145 (cte -> FALSE .)
    GTOEQ           reduce using rule 145 (cte -> FALSE .)
    >               reduce using rule 145 (cte -> FALSE .)
    <               reduce using rule 145 (cte -> FALSE .)
    AND             reduce using rule 145 (cte -> FALSE .)
    OR              reduce using rule 145 (cte -> FALSE .)
    ,               reduce using rule 145 (cte -> FALSE .)
    )               reduce using rule 145 (cte -> FALSE .)
    ;               reduce using rule 145 (cte -> FALSE .)
    ]               reduce using rule 145 (cte -> FALSE .)
    :               reduce using rule 145 (cte -> FALSE .)


state 137

    (126) fact -> funcCall .

    *               reduce using rule 126 (fact -> funcCall .)
    /               reduce using rule 126 (fact -> funcCall .)
    EQ              reduce using rule 126 (fact -> funcCall .)
    DIF             reduce using rule 126 (fact -> funcCall .)
    LTOEQ           reduce using rule 126 (fact -> funcCall .)
    GTOEQ           reduce using rule 126 (fact -> funcCall .)
    >               reduce using rule 126 (fact -> funcCall .)
    <               reduce using rule 126 (fact -> funcCall .)
    AND             reduce using rule 126 (fact -> funcCall .)
    OR              reduce using rule 126 (fact -> funcCall .)
    ,               reduce using rule 126 (fact -> funcCall .)
    )               reduce using rule 126 (fact -> funcCall .)
    ;               reduce using rule 126 (fact -> funcCall .)
    ]               reduce using rule 126 (fact -> funcCall .)
    +               reduce using rule 126 (fact -> funcCall .)
    -               reduce using rule 126 (fact -> funcCall .)


state 138

    (125) fact -> cte .

    *               reduce using rule 125 (fact -> cte .)
    /               reduce using rule 125 (fact -> cte .)
    +               reduce using rule 125 (fact -> cte .)
    -               reduce using rule 125 (fact -> cte .)
    EQ              reduce using rule 125 (fact -> cte .)
    DIF             reduce using rule 125 (fact -> cte .)
    LTOEQ           reduce using rule 125 (fact -> cte .)
    GTOEQ           reduce using rule 125 (fact -> cte .)
    >               reduce using rule 125 (fact -> cte .)
    <               reduce using rule 125 (fact -> cte .)
    AND             reduce using rule 125 (fact -> cte .)
    OR              reduce using rule 125 (fact -> cte .)
    ;               reduce using rule 125 (fact -> cte .)
    )               reduce using rule 125 (fact -> cte .)
    ,               reduce using rule 125 (fact -> cte .)
    ]               reduce using rule 125 (fact -> cte .)


state 139

    (143) cte -> CTEF .

    *               reduce using rule 143 (cte -> CTEF .)
    /               reduce using rule 143 (cte -> CTEF .)
    +               reduce using rule 143 (cte -> CTEF .)
    -               reduce using rule 143 (cte -> CTEF .)
    EQ              reduce using rule 143 (cte -> CTEF .)
    DIF             reduce using rule 143 (cte -> CTEF .)
    LTOEQ           reduce using rule 143 (cte -> CTEF .)
    GTOEQ           reduce using rule 143 (cte -> CTEF .)
    >               reduce using rule 143 (cte -> CTEF .)
    <               reduce using rule 143 (cte -> CTEF .)
    AND             reduce using rule 143 (cte -> CTEF .)
    OR              reduce using rule 143 (cte -> CTEF .)
    ,               reduce using rule 143 (cte -> CTEF .)
    )               reduce using rule 143 (cte -> CTEF .)
    ;               reduce using rule 143 (cte -> CTEF .)
    ]               reduce using rule 143 (cte -> CTEF .)
    :               reduce using rule 143 (cte -> CTEF .)


state 140

    (106) sExp -> exp . errorOpSExp opSExp
    (114) errorOpSExp -> .

    EQ              reduce using rule 114 (errorOpSExp -> .)
    DIF             reduce using rule 114 (errorOpSExp -> .)
    LTOEQ           reduce using rule 114 (errorOpSExp -> .)
    GTOEQ           reduce using rule 114 (errorOpSExp -> .)
    >               reduce using rule 114 (errorOpSExp -> .)
    <               reduce using rule 114 (errorOpSExp -> .)
    AND             reduce using rule 114 (errorOpSExp -> .)
    OR              reduce using rule 114 (errorOpSExp -> .)
    ,               reduce using rule 114 (errorOpSExp -> .)
    )               reduce using rule 114 (errorOpSExp -> .)
    ;               reduce using rule 114 (errorOpSExp -> .)
    ]               reduce using rule 114 (errorOpSExp -> .)

    errorOpSExp                    shift and go to state 171

state 141

    (120) term -> fact . cyTerm
    (121) cyTerm -> . * errorFact fact
    (122) cyTerm -> . / fact
    (123) cyTerm -> . empty
    (146) empty -> .

    *               shift and go to state 172
    /               shift and go to state 173
    +               reduce using rule 146 (empty -> .)
    -               reduce using rule 146 (empty -> .)
    EQ              reduce using rule 146 (empty -> .)
    DIF             reduce using rule 146 (empty -> .)
    LTOEQ           reduce using rule 146 (empty -> .)
    GTOEQ           reduce using rule 146 (empty -> .)
    >               reduce using rule 146 (empty -> .)
    <               reduce using rule 146 (empty -> .)
    AND             reduce using rule 146 (empty -> .)
    OR              reduce using rule 146 (empty -> .)
    ,               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    ;               reduce using rule 146 (empty -> .)
    ]               reduce using rule 146 (empty -> .)

    cyTerm                         shift and go to state 174
    empty                          shift and go to state 175

state 142

    (29) init -> = . initWith errorInit
    (33) initDict -> = . ( dictType : dictType ) errorInitDict
    (31) initWith -> . expresion
    (32) initWith -> . funcCall
    (101) expresion -> . sExp cyExpresion errorExpresion
    (84) funcCall -> . ID ( opParamCall )
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE

    (               shift and go to state 177
    ID              shift and go to state 178
    CTES            shift and go to state 134
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 179
    initWith                       shift and go to state 176
    funcCall                       shift and go to state 180
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    term                           shift and go to state 135
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 143

    (79) assignOptions -> initDict .

    ;               reduce using rule 79 (assignOptions -> initDict .)
    )               reduce using rule 79 (assignOptions -> initDict .)


state 144

    (76) assign -> ID errorAssign assignOptions .

    )               reduce using rule 76 (assign -> ID errorAssign assignOptions .)
    ;               reduce using rule 76 (assign -> ID errorAssign assignOptions .)


state 145

    (78) assignOptions -> init .

    ;               reduce using rule 78 (assignOptions -> init .)
    )               reduce using rule 78 (assignOptions -> init .)


state 146

    (80) assignOptions -> [ . expresion ] assignMatrix init
    (101) expresion -> . sExp cyExpresion errorExpresion
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 181
    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 147

    (94) condition -> errorCondition IF ( . expresion ) { body } optionalElse
    (101) expresion -> . sExp cyExpresion errorExpresion
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 182
    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 148

    (99) dict -> errorDict ( type : type ) .

    [               reduce using rule 99 (dict -> errorDict ( type : type ) .)
    ;               reduce using rule 99 (dict -> errorDict ( type : type ) .)


state 149

    (92) optionalMatrix -> [ CTED . ]

    ]               shift and go to state 183


state 150

    (54) opReturns -> errorOpReturns RETURNS type saveReturnType { . opVars body return
    (5) opVars -> . vars
    (6) opVars -> . empty
    (9) vars -> . errorVars VARS declare
    (146) empty -> .
    (11) errorVars -> .

    RETURN          reduce using rule 146 (empty -> .)
    ID              reduce using rule 146 (empty -> .)
    IF              reduce using rule 146 (empty -> .)
    FOR             reduce using rule 146 (empty -> .)
    WHILE           reduce using rule 146 (empty -> .)
    VARS            reduce using rule 11 (errorVars -> .)

    vars                           shift and go to state 8
    opVars                         shift and go to state 184
    errorVars                      shift and go to state 10
    empty                          shift and go to state 11

state 151

    (39) param -> saveType type errorParam ID cyTypeParam . cyParam
    (41) cyParam -> . errorCyParam saveID ; param
    (42) cyParam -> . empty saveID
    (45) errorCyParam -> .
    (146) empty -> .

    ;               reduce using rule 45 (errorCyParam -> .)
    )               reduce using rule 146 (empty -> .)

    empty                          shift and go to state 185
    cyParam                        shift and go to state 187
    errorCyParam                   shift and go to state 186

state 152

    (72) whileCycle -> errorWhileCycle WHILE ( expresion . ) { body }

    )               shift and go to state 188


state 153

    (76) assign -> ID . errorAssign assignOptions
    (77) errorAssign -> .

    [               reduce using rule 77 (errorAssign -> .)
    =               reduce using rule 77 (errorAssign -> .)

    errorAssign                    shift and go to state 114

state 154

    (74) forCycle -> errorForCycle FOR ( assign . ; expresion ; assign ) { body }

    ;               shift and go to state 189


state 155

    (84) funcCall -> ID ( opParamCall ) .

    *               reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    /               reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    +               reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    -               reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    AND             reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    OR              reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    ,               reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    )               reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    ;               reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    ]               reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    EQ              reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    DIF             reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    LTOEQ           reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    GTOEQ           reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    >               reduce using rule 84 (funcCall -> ID ( opParamCall ) .)
    <               reduce using rule 84 (funcCall -> ID ( opParamCall ) .)


state 156

    (127) fact -> ( expresion . )

    )               shift and go to state 190


state 157

    (103) cyExpresion -> AND . expresion
    (101) expresion -> . sExp cyExpresion errorExpresion
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 191
    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 158

    (101) expresion -> sExp cyExpresion . errorExpresion
    (102) errorExpresion -> .

    ,               reduce using rule 102 (errorExpresion -> .)
    )               reduce using rule 102 (errorExpresion -> .)
    ;               reduce using rule 102 (errorExpresion -> .)
    ]               reduce using rule 102 (errorExpresion -> .)

    errorExpresion                 shift and go to state 192

state 159

    (104) cyExpresion -> OR . expresion
    (101) expresion -> . sExp cyExpresion errorExpresion
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 193
    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 160

    (105) cyExpresion -> empty .

    ,               reduce using rule 105 (cyExpresion -> empty .)
    )               reduce using rule 105 (cyExpresion -> empty .)
    ;               reduce using rule 105 (cyExpresion -> empty .)
    ]               reduce using rule 105 (cyExpresion -> empty .)


state 161

    (134) opStruct -> errorOpStruct . [ expresion ] opMatrix

    [               shift and go to state 194


state 162

    (130) opAccess -> opStruct .

    *               reduce using rule 130 (opAccess -> opStruct .)
    /               reduce using rule 130 (opAccess -> opStruct .)
    +               reduce using rule 130 (opAccess -> opStruct .)
    -               reduce using rule 130 (opAccess -> opStruct .)
    EQ              reduce using rule 130 (opAccess -> opStruct .)
    DIF             reduce using rule 130 (opAccess -> opStruct .)
    LTOEQ           reduce using rule 130 (opAccess -> opStruct .)
    GTOEQ           reduce using rule 130 (opAccess -> opStruct .)
    >               reduce using rule 130 (opAccess -> opStruct .)
    <               reduce using rule 130 (opAccess -> opStruct .)
    AND             reduce using rule 130 (opAccess -> opStruct .)
    OR              reduce using rule 130 (opAccess -> opStruct .)
    )               reduce using rule 130 (opAccess -> opStruct .)
    ,               reduce using rule 130 (opAccess -> opStruct .)
    ]               reduce using rule 130 (opAccess -> opStruct .)
    ;               reduce using rule 130 (opAccess -> opStruct .)


state 163

    (128) fact -> ID opAccess . errorOpAccess
    (133) errorOpAccess -> .

    *               reduce using rule 133 (errorOpAccess -> .)
    /               reduce using rule 133 (errorOpAccess -> .)
    +               reduce using rule 133 (errorOpAccess -> .)
    -               reduce using rule 133 (errorOpAccess -> .)
    EQ              reduce using rule 133 (errorOpAccess -> .)
    DIF             reduce using rule 133 (errorOpAccess -> .)
    LTOEQ           reduce using rule 133 (errorOpAccess -> .)
    GTOEQ           reduce using rule 133 (errorOpAccess -> .)
    >               reduce using rule 133 (errorOpAccess -> .)
    <               reduce using rule 133 (errorOpAccess -> .)
    AND             reduce using rule 133 (errorOpAccess -> .)
    OR              reduce using rule 133 (errorOpAccess -> .)
    ,               reduce using rule 133 (errorOpAccess -> .)
    )               reduce using rule 133 (errorOpAccess -> .)
    ;               reduce using rule 133 (errorOpAccess -> .)
    ]               reduce using rule 133 (errorOpAccess -> .)

    errorOpAccess                  shift and go to state 195

state 164

    (132) opAccess -> empty .

    *               reduce using rule 132 (opAccess -> empty .)
    /               reduce using rule 132 (opAccess -> empty .)
    +               reduce using rule 132 (opAccess -> empty .)
    -               reduce using rule 132 (opAccess -> empty .)
    EQ              reduce using rule 132 (opAccess -> empty .)
    DIF             reduce using rule 132 (opAccess -> empty .)
    LTOEQ           reduce using rule 132 (opAccess -> empty .)
    GTOEQ           reduce using rule 132 (opAccess -> empty .)
    >               reduce using rule 132 (opAccess -> empty .)
    <               reduce using rule 132 (opAccess -> empty .)
    AND             reduce using rule 132 (opAccess -> empty .)
    OR              reduce using rule 132 (opAccess -> empty .)
    )               reduce using rule 132 (opAccess -> empty .)
    ,               reduce using rule 132 (opAccess -> empty .)
    ]               reduce using rule 132 (opAccess -> empty .)
    ;               reduce using rule 132 (opAccess -> empty .)


state 165

    (139) opDictionary -> . . dictIndex
    (140) dictIndex -> . FIRST
    (141) dictIndex -> . LAST

    FIRST           shift and go to state 196
    LAST            shift and go to state 197

    dictIndex                      shift and go to state 198

state 166

    (131) opAccess -> opDictionary .

    *               reduce using rule 131 (opAccess -> opDictionary .)
    /               reduce using rule 131 (opAccess -> opDictionary .)
    +               reduce using rule 131 (opAccess -> opDictionary .)
    -               reduce using rule 131 (opAccess -> opDictionary .)
    EQ              reduce using rule 131 (opAccess -> opDictionary .)
    DIF             reduce using rule 131 (opAccess -> opDictionary .)
    LTOEQ           reduce using rule 131 (opAccess -> opDictionary .)
    GTOEQ           reduce using rule 131 (opAccess -> opDictionary .)
    >               reduce using rule 131 (opAccess -> opDictionary .)
    <               reduce using rule 131 (opAccess -> opDictionary .)
    AND             reduce using rule 131 (opAccess -> opDictionary .)
    OR              reduce using rule 131 (opAccess -> opDictionary .)
    )               reduce using rule 131 (opAccess -> opDictionary .)
    ,               reduce using rule 131 (opAccess -> opDictionary .)
    ]               reduce using rule 131 (opAccess -> opDictionary .)
    ;               reduce using rule 131 (opAccess -> opDictionary .)


state 167

    (85) opParamCall -> expresion cyParamCall .

    )               reduce using rule 85 (opParamCall -> expresion cyParamCall .)


state 168

    (87) cyParamCall -> , . expresion cyParamCall
    (101) expresion -> . sExp cyExpresion errorExpresion
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 199
    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 169

    (88) cyParamCall -> empty .

    )               reduce using rule 88 (cyParamCall -> empty .)


state 170

    (115) exp -> term errorCyExp . cyExp
    (116) cyExp -> . + term
    (117) cyExp -> . - term
    (118) cyExp -> . empty
    (146) empty -> .

    +               shift and go to state 201
    -               shift and go to state 202
    EQ              reduce using rule 146 (empty -> .)
    DIF             reduce using rule 146 (empty -> .)
    LTOEQ           reduce using rule 146 (empty -> .)
    GTOEQ           reduce using rule 146 (empty -> .)
    >               reduce using rule 146 (empty -> .)
    <               reduce using rule 146 (empty -> .)
    AND             reduce using rule 146 (empty -> .)
    OR              reduce using rule 146 (empty -> .)
    ,               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    ;               reduce using rule 146 (empty -> .)
    ]               reduce using rule 146 (empty -> .)

    cyExp                          shift and go to state 200
    empty                          shift and go to state 203

state 171

    (106) sExp -> exp errorOpSExp . opSExp
    (107) opSExp -> . EQ exp
    (108) opSExp -> . DIF exp
    (109) opSExp -> . LTOEQ exp
    (110) opSExp -> . GTOEQ exp
    (111) opSExp -> . > exp
    (112) opSExp -> . < exp
    (113) opSExp -> . empty
    (146) empty -> .

    EQ              shift and go to state 204
    DIF             shift and go to state 205
    LTOEQ           shift and go to state 208
    GTOEQ           shift and go to state 206
    >               shift and go to state 207
    <               shift and go to state 209
    AND             reduce using rule 146 (empty -> .)
    OR              reduce using rule 146 (empty -> .)
    ,               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    ;               reduce using rule 146 (empty -> .)
    ]               reduce using rule 146 (empty -> .)

    empty                          shift and go to state 210
    opSExp                         shift and go to state 211

state 172

    (121) cyTerm -> * . errorFact fact
    (129) errorFact -> .

    CTES            reduce using rule 129 (errorFact -> .)
    (               reduce using rule 129 (errorFact -> .)
    ID              reduce using rule 129 (errorFact -> .)
    CTED            reduce using rule 129 (errorFact -> .)
    CTEF            reduce using rule 129 (errorFact -> .)
    TRUE            reduce using rule 129 (errorFact -> .)
    FALSE           reduce using rule 129 (errorFact -> .)

    errorFact                      shift and go to state 212

state 173

    (122) cyTerm -> / . fact
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    funcCall                       shift and go to state 137
    cte                            shift and go to state 138
    fact                           shift and go to state 213

state 174

    (120) term -> fact cyTerm .

    +               reduce using rule 120 (term -> fact cyTerm .)
    -               reduce using rule 120 (term -> fact cyTerm .)
    EQ              reduce using rule 120 (term -> fact cyTerm .)
    DIF             reduce using rule 120 (term -> fact cyTerm .)
    LTOEQ           reduce using rule 120 (term -> fact cyTerm .)
    GTOEQ           reduce using rule 120 (term -> fact cyTerm .)
    >               reduce using rule 120 (term -> fact cyTerm .)
    <               reduce using rule 120 (term -> fact cyTerm .)
    AND             reduce using rule 120 (term -> fact cyTerm .)
    OR              reduce using rule 120 (term -> fact cyTerm .)
    ]               reduce using rule 120 (term -> fact cyTerm .)
    ,               reduce using rule 120 (term -> fact cyTerm .)
    )               reduce using rule 120 (term -> fact cyTerm .)
    ;               reduce using rule 120 (term -> fact cyTerm .)


state 175

    (123) cyTerm -> empty .

    +               reduce using rule 123 (cyTerm -> empty .)
    -               reduce using rule 123 (cyTerm -> empty .)
    EQ              reduce using rule 123 (cyTerm -> empty .)
    DIF             reduce using rule 123 (cyTerm -> empty .)
    LTOEQ           reduce using rule 123 (cyTerm -> empty .)
    GTOEQ           reduce using rule 123 (cyTerm -> empty .)
    >               reduce using rule 123 (cyTerm -> empty .)
    <               reduce using rule 123 (cyTerm -> empty .)
    AND             reduce using rule 123 (cyTerm -> empty .)
    OR              reduce using rule 123 (cyTerm -> empty .)
    ,               reduce using rule 123 (cyTerm -> empty .)
    )               reduce using rule 123 (cyTerm -> empty .)
    ;               reduce using rule 123 (cyTerm -> empty .)
    ]               reduce using rule 123 (cyTerm -> empty .)


state 176

    (29) init -> = initWith . errorInit
    (30) errorInit -> .

    ;               reduce using rule 30 (errorInit -> .)
    )               reduce using rule 30 (errorInit -> .)

    errorInit                      shift and go to state 214

state 177

    (33) initDict -> = ( . dictType : dictType ) errorInitDict
    (127) fact -> ( . expresion )
    (35) dictType -> . errorDictType CTES
    (36) dictType -> . cte
    (37) dictType -> . ID
    (101) expresion -> . sExp cyExpresion errorExpresion
    (38) errorDictType -> .
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (84) funcCall -> . ID ( opParamCall )

  ! shift/reduce conflict for CTES resolved as shift
    ID              shift and go to state 217
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136
    CTES            shift and go to state 134
    (               shift and go to state 128

  ! CTES            [ reduce using rule 38 (errorDictType -> .) ]

    dictType                       shift and go to state 215
    expresion                      shift and go to state 156
    term                           shift and go to state 135
    errorDictType                  shift and go to state 216
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 218
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 178

    (84) funcCall -> ID . ( opParamCall )
    (128) fact -> ID . opAccess errorOpAccess
    (130) opAccess -> . opStruct
    (131) opAccess -> . opDictionary
    (132) opAccess -> . empty
    (134) opStruct -> . errorOpStruct [ expresion ] opMatrix
    (139) opDictionary -> . . dictIndex
    (146) empty -> .
    (135) errorOpStruct -> .

    (               shift and go to state 113
    .               shift and go to state 165
    *               reduce using rule 146 (empty -> .)
    /               reduce using rule 146 (empty -> .)
    +               reduce using rule 146 (empty -> .)
    -               reduce using rule 146 (empty -> .)
    EQ              reduce using rule 146 (empty -> .)
    DIF             reduce using rule 146 (empty -> .)
    LTOEQ           reduce using rule 146 (empty -> .)
    GTOEQ           reduce using rule 146 (empty -> .)
    >               reduce using rule 146 (empty -> .)
    <               reduce using rule 146 (empty -> .)
    AND             reduce using rule 146 (empty -> .)
    OR              reduce using rule 146 (empty -> .)
    ;               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    [               reduce using rule 135 (errorOpStruct -> .)

    errorOpStruct                  shift and go to state 161
    opDictionary                   shift and go to state 166
    opStruct                       shift and go to state 162
    opAccess                       shift and go to state 163
    empty                          shift and go to state 164

state 179

    (31) initWith -> expresion .

    ;               reduce using rule 31 (initWith -> expresion .)
    )               reduce using rule 31 (initWith -> expresion .)


state 180

    (32) initWith -> funcCall .
    (126) fact -> funcCall .

  ! reduce/reduce conflict for ; resolved using rule 32 (initWith -> funcCall .)
  ! reduce/reduce conflict for ) resolved using rule 32 (initWith -> funcCall .)
    ;               reduce using rule 32 (initWith -> funcCall .)
    )               reduce using rule 32 (initWith -> funcCall .)
    *               reduce using rule 126 (fact -> funcCall .)
    /               reduce using rule 126 (fact -> funcCall .)
    +               reduce using rule 126 (fact -> funcCall .)
    -               reduce using rule 126 (fact -> funcCall .)
    EQ              reduce using rule 126 (fact -> funcCall .)
    DIF             reduce using rule 126 (fact -> funcCall .)
    LTOEQ           reduce using rule 126 (fact -> funcCall .)
    GTOEQ           reduce using rule 126 (fact -> funcCall .)
    >               reduce using rule 126 (fact -> funcCall .)
    <               reduce using rule 126 (fact -> funcCall .)
    AND             reduce using rule 126 (fact -> funcCall .)
    OR              reduce using rule 126 (fact -> funcCall .)

  ! ;               [ reduce using rule 126 (fact -> funcCall .) ]
  ! )               [ reduce using rule 126 (fact -> funcCall .) ]


state 181

    (80) assignOptions -> [ expresion . ] assignMatrix init

    ]               shift and go to state 219


state 182

    (94) condition -> errorCondition IF ( expresion . ) { body } optionalElse

    )               shift and go to state 220


state 183

    (92) optionalMatrix -> [ CTED ] .

    ;               reduce using rule 92 (optionalMatrix -> [ CTED ] .)


state 184

    (54) opReturns -> errorOpReturns RETURNS type saveReturnType { opVars . body return
    (66) body -> . errorBody cyInstruction
    (67) body -> . empty
    (68) errorBody -> .
    (146) empty -> .

    ID              reduce using rule 68 (errorBody -> .)
    IF              reduce using rule 68 (errorBody -> .)
    FOR             reduce using rule 68 (errorBody -> .)
    WHILE           reduce using rule 68 (errorBody -> .)
    RETURN          reduce using rule 146 (empty -> .)

    body                           shift and go to state 221
    errorBody                      shift and go to state 72
    empty                          shift and go to state 73

state 185

    (42) cyParam -> empty . saveID
    (10) saveID -> .

    )               reduce using rule 10 (saveID -> .)

    saveID                         shift and go to state 222

state 186

    (41) cyParam -> errorCyParam . saveID ; param
    (10) saveID -> .

    ;               reduce using rule 10 (saveID -> .)

    saveID                         shift and go to state 223

state 187

    (39) param -> saveType type errorParam ID cyTypeParam cyParam .

    )               reduce using rule 39 (param -> saveType type errorParam ID cyTypeParam cyParam .)


state 188

    (72) whileCycle -> errorWhileCycle WHILE ( expresion ) . { body }

    {               shift and go to state 224


state 189

    (74) forCycle -> errorForCycle FOR ( assign ; . expresion ; assign ) { body }
    (101) expresion -> . sExp cyExpresion errorExpresion
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 225
    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 190

    (127) fact -> ( expresion ) .

    *               reduce using rule 127 (fact -> ( expresion ) .)
    /               reduce using rule 127 (fact -> ( expresion ) .)
    +               reduce using rule 127 (fact -> ( expresion ) .)
    -               reduce using rule 127 (fact -> ( expresion ) .)
    EQ              reduce using rule 127 (fact -> ( expresion ) .)
    DIF             reduce using rule 127 (fact -> ( expresion ) .)
    LTOEQ           reduce using rule 127 (fact -> ( expresion ) .)
    GTOEQ           reduce using rule 127 (fact -> ( expresion ) .)
    >               reduce using rule 127 (fact -> ( expresion ) .)
    <               reduce using rule 127 (fact -> ( expresion ) .)
    AND             reduce using rule 127 (fact -> ( expresion ) .)
    OR              reduce using rule 127 (fact -> ( expresion ) .)
    ;               reduce using rule 127 (fact -> ( expresion ) .)
    )               reduce using rule 127 (fact -> ( expresion ) .)
    ,               reduce using rule 127 (fact -> ( expresion ) .)
    ]               reduce using rule 127 (fact -> ( expresion ) .)


state 191

    (103) cyExpresion -> AND expresion .

    ,               reduce using rule 103 (cyExpresion -> AND expresion .)
    )               reduce using rule 103 (cyExpresion -> AND expresion .)
    ;               reduce using rule 103 (cyExpresion -> AND expresion .)
    ]               reduce using rule 103 (cyExpresion -> AND expresion .)


state 192

    (101) expresion -> sExp cyExpresion errorExpresion .

    ]               reduce using rule 101 (expresion -> sExp cyExpresion errorExpresion .)
    ;               reduce using rule 101 (expresion -> sExp cyExpresion errorExpresion .)
    )               reduce using rule 101 (expresion -> sExp cyExpresion errorExpresion .)
    ,               reduce using rule 101 (expresion -> sExp cyExpresion errorExpresion .)


state 193

    (104) cyExpresion -> OR expresion .

    ,               reduce using rule 104 (cyExpresion -> OR expresion .)
    )               reduce using rule 104 (cyExpresion -> OR expresion .)
    ;               reduce using rule 104 (cyExpresion -> OR expresion .)
    ]               reduce using rule 104 (cyExpresion -> OR expresion .)


state 194

    (134) opStruct -> errorOpStruct [ . expresion ] opMatrix
    (101) expresion -> . sExp cyExpresion errorExpresion
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 226
    term                           shift and go to state 135
    exp                            shift and go to state 140
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    fact                           shift and go to state 141

state 195

    (128) fact -> ID opAccess errorOpAccess .

    *               reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    /               reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    +               reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    -               reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    EQ              reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    DIF             reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    LTOEQ           reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    GTOEQ           reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    >               reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    <               reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    AND             reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    OR              reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    ;               reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    )               reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    ,               reduce using rule 128 (fact -> ID opAccess errorOpAccess .)
    ]               reduce using rule 128 (fact -> ID opAccess errorOpAccess .)


state 196

    (140) dictIndex -> FIRST .

    *               reduce using rule 140 (dictIndex -> FIRST .)
    /               reduce using rule 140 (dictIndex -> FIRST .)
    +               reduce using rule 140 (dictIndex -> FIRST .)
    -               reduce using rule 140 (dictIndex -> FIRST .)
    EQ              reduce using rule 140 (dictIndex -> FIRST .)
    DIF             reduce using rule 140 (dictIndex -> FIRST .)
    LTOEQ           reduce using rule 140 (dictIndex -> FIRST .)
    GTOEQ           reduce using rule 140 (dictIndex -> FIRST .)
    >               reduce using rule 140 (dictIndex -> FIRST .)
    <               reduce using rule 140 (dictIndex -> FIRST .)
    AND             reduce using rule 140 (dictIndex -> FIRST .)
    OR              reduce using rule 140 (dictIndex -> FIRST .)
    ,               reduce using rule 140 (dictIndex -> FIRST .)
    )               reduce using rule 140 (dictIndex -> FIRST .)
    ]               reduce using rule 140 (dictIndex -> FIRST .)
    ;               reduce using rule 140 (dictIndex -> FIRST .)


state 197

    (141) dictIndex -> LAST .

    *               reduce using rule 141 (dictIndex -> LAST .)
    /               reduce using rule 141 (dictIndex -> LAST .)
    +               reduce using rule 141 (dictIndex -> LAST .)
    -               reduce using rule 141 (dictIndex -> LAST .)
    EQ              reduce using rule 141 (dictIndex -> LAST .)
    DIF             reduce using rule 141 (dictIndex -> LAST .)
    LTOEQ           reduce using rule 141 (dictIndex -> LAST .)
    GTOEQ           reduce using rule 141 (dictIndex -> LAST .)
    >               reduce using rule 141 (dictIndex -> LAST .)
    <               reduce using rule 141 (dictIndex -> LAST .)
    AND             reduce using rule 141 (dictIndex -> LAST .)
    OR              reduce using rule 141 (dictIndex -> LAST .)
    ,               reduce using rule 141 (dictIndex -> LAST .)
    )               reduce using rule 141 (dictIndex -> LAST .)
    ]               reduce using rule 141 (dictIndex -> LAST .)
    ;               reduce using rule 141 (dictIndex -> LAST .)


state 198

    (139) opDictionary -> . dictIndex .

    *               reduce using rule 139 (opDictionary -> . dictIndex .)
    /               reduce using rule 139 (opDictionary -> . dictIndex .)
    +               reduce using rule 139 (opDictionary -> . dictIndex .)
    -               reduce using rule 139 (opDictionary -> . dictIndex .)
    EQ              reduce using rule 139 (opDictionary -> . dictIndex .)
    DIF             reduce using rule 139 (opDictionary -> . dictIndex .)
    LTOEQ           reduce using rule 139 (opDictionary -> . dictIndex .)
    GTOEQ           reduce using rule 139 (opDictionary -> . dictIndex .)
    >               reduce using rule 139 (opDictionary -> . dictIndex .)
    <               reduce using rule 139 (opDictionary -> . dictIndex .)
    AND             reduce using rule 139 (opDictionary -> . dictIndex .)
    OR              reduce using rule 139 (opDictionary -> . dictIndex .)
    ;               reduce using rule 139 (opDictionary -> . dictIndex .)
    )               reduce using rule 139 (opDictionary -> . dictIndex .)
    ,               reduce using rule 139 (opDictionary -> . dictIndex .)
    ]               reduce using rule 139 (opDictionary -> . dictIndex .)


state 199

    (87) cyParamCall -> , expresion . cyParamCall
    (87) cyParamCall -> . , expresion cyParamCall
    (88) cyParamCall -> . empty
    (146) empty -> .

    ,               shift and go to state 168
    )               reduce using rule 146 (empty -> .)

    cyParamCall                    shift and go to state 227
    empty                          shift and go to state 169

state 200

    (115) exp -> term errorCyExp cyExp .

    AND             reduce using rule 115 (exp -> term errorCyExp cyExp .)
    OR              reduce using rule 115 (exp -> term errorCyExp cyExp .)
    ,               reduce using rule 115 (exp -> term errorCyExp cyExp .)
    )               reduce using rule 115 (exp -> term errorCyExp cyExp .)
    ;               reduce using rule 115 (exp -> term errorCyExp cyExp .)
    ]               reduce using rule 115 (exp -> term errorCyExp cyExp .)
    EQ              reduce using rule 115 (exp -> term errorCyExp cyExp .)
    DIF             reduce using rule 115 (exp -> term errorCyExp cyExp .)
    LTOEQ           reduce using rule 115 (exp -> term errorCyExp cyExp .)
    GTOEQ           reduce using rule 115 (exp -> term errorCyExp cyExp .)
    >               reduce using rule 115 (exp -> term errorCyExp cyExp .)
    <               reduce using rule 115 (exp -> term errorCyExp cyExp .)


state 201

    (116) cyExp -> + . term
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    term                           shift and go to state 228
    funcCall                       shift and go to state 137
    cte                            shift and go to state 138
    fact                           shift and go to state 141

state 202

    (117) cyExp -> - . term
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    term                           shift and go to state 229
    funcCall                       shift and go to state 137
    cte                            shift and go to state 138
    fact                           shift and go to state 141

state 203

    (118) cyExp -> empty .

    EQ              reduce using rule 118 (cyExp -> empty .)
    DIF             reduce using rule 118 (cyExp -> empty .)
    LTOEQ           reduce using rule 118 (cyExp -> empty .)
    GTOEQ           reduce using rule 118 (cyExp -> empty .)
    >               reduce using rule 118 (cyExp -> empty .)
    <               reduce using rule 118 (cyExp -> empty .)
    AND             reduce using rule 118 (cyExp -> empty .)
    OR              reduce using rule 118 (cyExp -> empty .)
    ,               reduce using rule 118 (cyExp -> empty .)
    )               reduce using rule 118 (cyExp -> empty .)
    ;               reduce using rule 118 (cyExp -> empty .)
    ]               reduce using rule 118 (cyExp -> empty .)


state 204

    (107) opSExp -> EQ . exp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    cte                            shift and go to state 138
    exp                            shift and go to state 230
    fact                           shift and go to state 141

state 205

    (108) opSExp -> DIF . exp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    cte                            shift and go to state 138
    exp                            shift and go to state 231
    fact                           shift and go to state 141

state 206

    (110) opSExp -> GTOEQ . exp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    cte                            shift and go to state 138
    exp                            shift and go to state 232
    fact                           shift and go to state 141

state 207

    (111) opSExp -> > . exp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    cte                            shift and go to state 138
    exp                            shift and go to state 233
    fact                           shift and go to state 141

state 208

    (109) opSExp -> LTOEQ . exp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    cte                            shift and go to state 138
    exp                            shift and go to state 234
    fact                           shift and go to state 141

state 209

    (112) opSExp -> < . exp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    cte                            shift and go to state 138
    exp                            shift and go to state 235
    fact                           shift and go to state 141

state 210

    (113) opSExp -> empty .

    AND             reduce using rule 113 (opSExp -> empty .)
    OR              reduce using rule 113 (opSExp -> empty .)
    ,               reduce using rule 113 (opSExp -> empty .)
    )               reduce using rule 113 (opSExp -> empty .)
    ;               reduce using rule 113 (opSExp -> empty .)
    ]               reduce using rule 113 (opSExp -> empty .)


state 211

    (106) sExp -> exp errorOpSExp opSExp .

    AND             reduce using rule 106 (sExp -> exp errorOpSExp opSExp .)
    OR              reduce using rule 106 (sExp -> exp errorOpSExp opSExp .)
    )               reduce using rule 106 (sExp -> exp errorOpSExp opSExp .)
    ;               reduce using rule 106 (sExp -> exp errorOpSExp opSExp .)
    ,               reduce using rule 106 (sExp -> exp errorOpSExp opSExp .)
    ]               reduce using rule 106 (sExp -> exp errorOpSExp opSExp .)


state 212

    (121) cyTerm -> * errorFact . fact
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    funcCall                       shift and go to state 137
    cte                            shift and go to state 138
    fact                           shift and go to state 236

state 213

    (122) cyTerm -> / fact .

    +               reduce using rule 122 (cyTerm -> / fact .)
    -               reduce using rule 122 (cyTerm -> / fact .)
    EQ              reduce using rule 122 (cyTerm -> / fact .)
    DIF             reduce using rule 122 (cyTerm -> / fact .)
    LTOEQ           reduce using rule 122 (cyTerm -> / fact .)
    GTOEQ           reduce using rule 122 (cyTerm -> / fact .)
    >               reduce using rule 122 (cyTerm -> / fact .)
    <               reduce using rule 122 (cyTerm -> / fact .)
    AND             reduce using rule 122 (cyTerm -> / fact .)
    OR              reduce using rule 122 (cyTerm -> / fact .)
    ,               reduce using rule 122 (cyTerm -> / fact .)
    )               reduce using rule 122 (cyTerm -> / fact .)
    ;               reduce using rule 122 (cyTerm -> / fact .)
    ]               reduce using rule 122 (cyTerm -> / fact .)


state 214

    (29) init -> = initWith errorInit .

    ;               reduce using rule 29 (init -> = initWith errorInit .)
    )               reduce using rule 29 (init -> = initWith errorInit .)


state 215

    (33) initDict -> = ( dictType . : dictType ) errorInitDict

    :               shift and go to state 237


state 216

    (35) dictType -> errorDictType . CTES

    CTES            shift and go to state 238


state 217

    (37) dictType -> ID .
    (128) fact -> ID . opAccess errorOpAccess
    (84) funcCall -> ID . ( opParamCall )
    (130) opAccess -> . opStruct
    (131) opAccess -> . opDictionary
    (132) opAccess -> . empty
    (134) opStruct -> . errorOpStruct [ expresion ] opMatrix
    (139) opDictionary -> . . dictIndex
    (146) empty -> .
    (135) errorOpStruct -> .

    :               reduce using rule 37 (dictType -> ID .)
    (               shift and go to state 113
    .               shift and go to state 165
    *               reduce using rule 146 (empty -> .)
    /               reduce using rule 146 (empty -> .)
    +               reduce using rule 146 (empty -> .)
    -               reduce using rule 146 (empty -> .)
    EQ              reduce using rule 146 (empty -> .)
    DIF             reduce using rule 146 (empty -> .)
    LTOEQ           reduce using rule 146 (empty -> .)
    GTOEQ           reduce using rule 146 (empty -> .)
    >               reduce using rule 146 (empty -> .)
    <               reduce using rule 146 (empty -> .)
    AND             reduce using rule 146 (empty -> .)
    OR              reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    [               reduce using rule 135 (errorOpStruct -> .)

    errorOpStruct                  shift and go to state 161
    opDictionary                   shift and go to state 166
    opStruct                       shift and go to state 162
    opAccess                       shift and go to state 163
    empty                          shift and go to state 164

state 218

    (36) dictType -> cte .
    (125) fact -> cte .

    :               reduce using rule 36 (dictType -> cte .)
    *               reduce using rule 125 (fact -> cte .)
    /               reduce using rule 125 (fact -> cte .)
    +               reduce using rule 125 (fact -> cte .)
    -               reduce using rule 125 (fact -> cte .)
    EQ              reduce using rule 125 (fact -> cte .)
    DIF             reduce using rule 125 (fact -> cte .)
    LTOEQ           reduce using rule 125 (fact -> cte .)
    GTOEQ           reduce using rule 125 (fact -> cte .)
    >               reduce using rule 125 (fact -> cte .)
    <               reduce using rule 125 (fact -> cte .)
    AND             reduce using rule 125 (fact -> cte .)
    OR              reduce using rule 125 (fact -> cte .)
    )               reduce using rule 125 (fact -> cte .)


state 219

    (80) assignOptions -> [ expresion ] . assignMatrix init
    (81) assignMatrix -> . [ expresion ] errorAssignMatrix
    (82) assignMatrix -> . empty
    (146) empty -> .

    [               shift and go to state 240
    =               reduce using rule 146 (empty -> .)

    assignMatrix                   shift and go to state 239
    empty                          shift and go to state 241

state 220

    (94) condition -> errorCondition IF ( expresion ) . { body } optionalElse

    {               shift and go to state 242


state 221

    (54) opReturns -> errorOpReturns RETURNS type saveReturnType { opVars body . return
    (49) return -> . errorReturn RETURN expresion ;
    (50) errorReturn -> .

    RETURN          reduce using rule 50 (errorReturn -> .)

    return                         shift and go to state 243
    errorReturn                    shift and go to state 244

state 222

    (42) cyParam -> empty saveID .

    )               reduce using rule 42 (cyParam -> empty saveID .)


state 223

    (41) cyParam -> errorCyParam saveID . ; param

    ;               shift and go to state 245


state 224

    (72) whileCycle -> errorWhileCycle WHILE ( expresion ) { . body }
    (66) body -> . errorBody cyInstruction
    (67) body -> . empty
    (68) errorBody -> .
    (146) empty -> .

    ID              reduce using rule 68 (errorBody -> .)
    IF              reduce using rule 68 (errorBody -> .)
    FOR             reduce using rule 68 (errorBody -> .)
    WHILE           reduce using rule 68 (errorBody -> .)
    }               reduce using rule 146 (empty -> .)

    body                           shift and go to state 246
    errorBody                      shift and go to state 72
    empty                          shift and go to state 73

state 225

    (74) forCycle -> errorForCycle FOR ( assign ; expresion . ; assign ) { body }

    ;               shift and go to state 247


state 226

    (134) opStruct -> errorOpStruct [ expresion . ] opMatrix

    ]               shift and go to state 248


state 227

    (87) cyParamCall -> , expresion cyParamCall .

    )               reduce using rule 87 (cyParamCall -> , expresion cyParamCall .)


state 228

    (116) cyExp -> + term .

    EQ              reduce using rule 116 (cyExp -> + term .)
    DIF             reduce using rule 116 (cyExp -> + term .)
    LTOEQ           reduce using rule 116 (cyExp -> + term .)
    GTOEQ           reduce using rule 116 (cyExp -> + term .)
    >               reduce using rule 116 (cyExp -> + term .)
    <               reduce using rule 116 (cyExp -> + term .)
    AND             reduce using rule 116 (cyExp -> + term .)
    OR              reduce using rule 116 (cyExp -> + term .)
    ,               reduce using rule 116 (cyExp -> + term .)
    )               reduce using rule 116 (cyExp -> + term .)
    ;               reduce using rule 116 (cyExp -> + term .)
    ]               reduce using rule 116 (cyExp -> + term .)


state 229

    (117) cyExp -> - term .

    EQ              reduce using rule 117 (cyExp -> - term .)
    DIF             reduce using rule 117 (cyExp -> - term .)
    LTOEQ           reduce using rule 117 (cyExp -> - term .)
    GTOEQ           reduce using rule 117 (cyExp -> - term .)
    >               reduce using rule 117 (cyExp -> - term .)
    <               reduce using rule 117 (cyExp -> - term .)
    AND             reduce using rule 117 (cyExp -> - term .)
    OR              reduce using rule 117 (cyExp -> - term .)
    ,               reduce using rule 117 (cyExp -> - term .)
    )               reduce using rule 117 (cyExp -> - term .)
    ;               reduce using rule 117 (cyExp -> - term .)
    ]               reduce using rule 117 (cyExp -> - term .)


state 230

    (107) opSExp -> EQ exp .

    AND             reduce using rule 107 (opSExp -> EQ exp .)
    OR              reduce using rule 107 (opSExp -> EQ exp .)
    ,               reduce using rule 107 (opSExp -> EQ exp .)
    )               reduce using rule 107 (opSExp -> EQ exp .)
    ;               reduce using rule 107 (opSExp -> EQ exp .)
    ]               reduce using rule 107 (opSExp -> EQ exp .)


state 231

    (108) opSExp -> DIF exp .

    AND             reduce using rule 108 (opSExp -> DIF exp .)
    OR              reduce using rule 108 (opSExp -> DIF exp .)
    ,               reduce using rule 108 (opSExp -> DIF exp .)
    )               reduce using rule 108 (opSExp -> DIF exp .)
    ;               reduce using rule 108 (opSExp -> DIF exp .)
    ]               reduce using rule 108 (opSExp -> DIF exp .)


state 232

    (110) opSExp -> GTOEQ exp .

    AND             reduce using rule 110 (opSExp -> GTOEQ exp .)
    OR              reduce using rule 110 (opSExp -> GTOEQ exp .)
    ,               reduce using rule 110 (opSExp -> GTOEQ exp .)
    )               reduce using rule 110 (opSExp -> GTOEQ exp .)
    ;               reduce using rule 110 (opSExp -> GTOEQ exp .)
    ]               reduce using rule 110 (opSExp -> GTOEQ exp .)


state 233

    (111) opSExp -> > exp .

    AND             reduce using rule 111 (opSExp -> > exp .)
    OR              reduce using rule 111 (opSExp -> > exp .)
    ,               reduce using rule 111 (opSExp -> > exp .)
    )               reduce using rule 111 (opSExp -> > exp .)
    ;               reduce using rule 111 (opSExp -> > exp .)
    ]               reduce using rule 111 (opSExp -> > exp .)


state 234

    (109) opSExp -> LTOEQ exp .

    AND             reduce using rule 109 (opSExp -> LTOEQ exp .)
    OR              reduce using rule 109 (opSExp -> LTOEQ exp .)
    ,               reduce using rule 109 (opSExp -> LTOEQ exp .)
    )               reduce using rule 109 (opSExp -> LTOEQ exp .)
    ;               reduce using rule 109 (opSExp -> LTOEQ exp .)
    ]               reduce using rule 109 (opSExp -> LTOEQ exp .)


state 235

    (112) opSExp -> < exp .

    AND             reduce using rule 112 (opSExp -> < exp .)
    OR              reduce using rule 112 (opSExp -> < exp .)
    ,               reduce using rule 112 (opSExp -> < exp .)
    )               reduce using rule 112 (opSExp -> < exp .)
    ;               reduce using rule 112 (opSExp -> < exp .)
    ]               reduce using rule 112 (opSExp -> < exp .)


state 236

    (121) cyTerm -> * errorFact fact .

    +               reduce using rule 121 (cyTerm -> * errorFact fact .)
    -               reduce using rule 121 (cyTerm -> * errorFact fact .)
    EQ              reduce using rule 121 (cyTerm -> * errorFact fact .)
    DIF             reduce using rule 121 (cyTerm -> * errorFact fact .)
    LTOEQ           reduce using rule 121 (cyTerm -> * errorFact fact .)
    GTOEQ           reduce using rule 121 (cyTerm -> * errorFact fact .)
    >               reduce using rule 121 (cyTerm -> * errorFact fact .)
    <               reduce using rule 121 (cyTerm -> * errorFact fact .)
    AND             reduce using rule 121 (cyTerm -> * errorFact fact .)
    OR              reduce using rule 121 (cyTerm -> * errorFact fact .)
    ,               reduce using rule 121 (cyTerm -> * errorFact fact .)
    )               reduce using rule 121 (cyTerm -> * errorFact fact .)
    ;               reduce using rule 121 (cyTerm -> * errorFact fact .)
    ]               reduce using rule 121 (cyTerm -> * errorFact fact .)


state 237

    (33) initDict -> = ( dictType : . dictType ) errorInitDict
    (35) dictType -> . errorDictType CTES
    (36) dictType -> . cte
    (37) dictType -> . ID
    (38) errorDictType -> .
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE

    ID              shift and go to state 251
    CTES            reduce using rule 38 (errorDictType -> .)
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    dictType                       shift and go to state 249
    errorDictType                  shift and go to state 216
    cte                            shift and go to state 250

state 238

    (35) dictType -> errorDictType CTES .

    )               reduce using rule 35 (dictType -> errorDictType CTES .)
    :               reduce using rule 35 (dictType -> errorDictType CTES .)


state 239

    (80) assignOptions -> [ expresion ] assignMatrix . init
    (29) init -> . = initWith errorInit

    =               shift and go to state 253

    init                           shift and go to state 252

state 240

    (81) assignMatrix -> [ . expresion ] errorAssignMatrix
    (101) expresion -> . sExp cyExpresion errorExpresion
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 254
    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 241

    (82) assignMatrix -> empty .

    =               reduce using rule 82 (assignMatrix -> empty .)


state 242

    (94) condition -> errorCondition IF ( expresion ) { . body } optionalElse
    (66) body -> . errorBody cyInstruction
    (67) body -> . empty
    (68) errorBody -> .
    (146) empty -> .

    ID              reduce using rule 68 (errorBody -> .)
    IF              reduce using rule 68 (errorBody -> .)
    FOR             reduce using rule 68 (errorBody -> .)
    WHILE           reduce using rule 68 (errorBody -> .)
    }               reduce using rule 146 (empty -> .)

    body                           shift and go to state 255
    errorBody                      shift and go to state 72
    empty                          shift and go to state 73

state 243

    (54) opReturns -> errorOpReturns RETURNS type saveReturnType { opVars body return .

    }               reduce using rule 54 (opReturns -> errorOpReturns RETURNS type saveReturnType { opVars body return .)


state 244

    (49) return -> errorReturn . RETURN expresion ;

    RETURN          shift and go to state 256


state 245

    (41) cyParam -> errorCyParam saveID ; . param
    (39) param -> . saveType type errorParam ID cyTypeParam cyParam
    (2) saveType -> .

    FLOAT           reduce using rule 2 (saveType -> .)
    STRING          reduce using rule 2 (saveType -> .)
    OBJECT          reduce using rule 2 (saveType -> .)
    BOOL            reduce using rule 2 (saveType -> .)
    INT             reduce using rule 2 (saveType -> .)

    param                          shift and go to state 257
    saveType                       shift and go to state 70

state 246

    (72) whileCycle -> errorWhileCycle WHILE ( expresion ) { body . }

    }               shift and go to state 258


state 247

    (74) forCycle -> errorForCycle FOR ( assign ; expresion ; . assign ) { body }
    (76) assign -> . ID errorAssign assignOptions

    ID              shift and go to state 153

    assign                         shift and go to state 259

state 248

    (134) opStruct -> errorOpStruct [ expresion ] . opMatrix
    (136) opMatrix -> . errorOpMatrix [ expresion ]
    (137) opMatrix -> . empty
    (138) errorOpMatrix -> .
    (146) empty -> .

    [               reduce using rule 138 (errorOpMatrix -> .)
    *               reduce using rule 146 (empty -> .)
    /               reduce using rule 146 (empty -> .)
    +               reduce using rule 146 (empty -> .)
    -               reduce using rule 146 (empty -> .)
    EQ              reduce using rule 146 (empty -> .)
    DIF             reduce using rule 146 (empty -> .)
    LTOEQ           reduce using rule 146 (empty -> .)
    GTOEQ           reduce using rule 146 (empty -> .)
    >               reduce using rule 146 (empty -> .)
    <               reduce using rule 146 (empty -> .)
    AND             reduce using rule 146 (empty -> .)
    OR              reduce using rule 146 (empty -> .)
    ,               reduce using rule 146 (empty -> .)
    )               reduce using rule 146 (empty -> .)
    ]               reduce using rule 146 (empty -> .)
    ;               reduce using rule 146 (empty -> .)

    empty                          shift and go to state 262
    errorOpMatrix                  shift and go to state 260
    opMatrix                       shift and go to state 261

state 249

    (33) initDict -> = ( dictType : dictType . ) errorInitDict

    )               shift and go to state 263


state 250

    (36) dictType -> cte .

    )               reduce using rule 36 (dictType -> cte .)


state 251

    (37) dictType -> ID .

    )               reduce using rule 37 (dictType -> ID .)


state 252

    (80) assignOptions -> [ expresion ] assignMatrix init .

    ;               reduce using rule 80 (assignOptions -> [ expresion ] assignMatrix init .)
    )               reduce using rule 80 (assignOptions -> [ expresion ] assignMatrix init .)


state 253

    (29) init -> = . initWith errorInit
    (31) initWith -> . expresion
    (32) initWith -> . funcCall
    (101) expresion -> . sExp cyExpresion errorExpresion
    (84) funcCall -> . ID ( opParamCall )
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE

    ID              shift and go to state 178
    CTES            shift and go to state 134
    (               shift and go to state 128
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 179
    initWith                       shift and go to state 176
    funcCall                       shift and go to state 180
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    term                           shift and go to state 135
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 254

    (81) assignMatrix -> [ expresion . ] errorAssignMatrix

    ]               shift and go to state 264


state 255

    (94) condition -> errorCondition IF ( expresion ) { body . } optionalElse

    }               shift and go to state 265


state 256

    (49) return -> errorReturn RETURN . expresion ;
    (101) expresion -> . sExp cyExpresion errorExpresion
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 266
    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 257

    (41) cyParam -> errorCyParam saveID ; param .

    )               reduce using rule 41 (cyParam -> errorCyParam saveID ; param .)


state 258

    (72) whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .

    ID              reduce using rule 72 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    IF              reduce using rule 72 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    FOR             reduce using rule 72 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    WHILE           reduce using rule 72 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    }               reduce using rule 72 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)
    RETURN          reduce using rule 72 (whileCycle -> errorWhileCycle WHILE ( expresion ) { body } .)


state 259

    (74) forCycle -> errorForCycle FOR ( assign ; expresion ; assign . ) { body }

    )               shift and go to state 267


state 260

    (136) opMatrix -> errorOpMatrix . [ expresion ]

    [               shift and go to state 268


state 261

    (134) opStruct -> errorOpStruct [ expresion ] opMatrix .

    *               reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    /               reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    +               reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    -               reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    EQ              reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    DIF             reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    LTOEQ           reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    GTOEQ           reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    >               reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    <               reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    AND             reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    OR              reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    )               reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    ;               reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    ,               reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)
    ]               reduce using rule 134 (opStruct -> errorOpStruct [ expresion ] opMatrix .)


state 262

    (137) opMatrix -> empty .

    *               reduce using rule 137 (opMatrix -> empty .)
    /               reduce using rule 137 (opMatrix -> empty .)
    +               reduce using rule 137 (opMatrix -> empty .)
    -               reduce using rule 137 (opMatrix -> empty .)
    EQ              reduce using rule 137 (opMatrix -> empty .)
    DIF             reduce using rule 137 (opMatrix -> empty .)
    LTOEQ           reduce using rule 137 (opMatrix -> empty .)
    GTOEQ           reduce using rule 137 (opMatrix -> empty .)
    >               reduce using rule 137 (opMatrix -> empty .)
    <               reduce using rule 137 (opMatrix -> empty .)
    AND             reduce using rule 137 (opMatrix -> empty .)
    OR              reduce using rule 137 (opMatrix -> empty .)
    ,               reduce using rule 137 (opMatrix -> empty .)
    )               reduce using rule 137 (opMatrix -> empty .)
    ]               reduce using rule 137 (opMatrix -> empty .)
    ;               reduce using rule 137 (opMatrix -> empty .)


state 263

    (33) initDict -> = ( dictType : dictType ) . errorInitDict
    (34) errorInitDict -> .

    ;               reduce using rule 34 (errorInitDict -> .)
    )               reduce using rule 34 (errorInitDict -> .)

    errorInitDict                  shift and go to state 269

state 264

    (81) assignMatrix -> [ expresion ] . errorAssignMatrix
    (83) errorAssignMatrix -> .

    =               reduce using rule 83 (errorAssignMatrix -> .)

    errorAssignMatrix              shift and go to state 270

state 265

    (94) condition -> errorCondition IF ( expresion ) { body } . optionalElse
    (96) optionalElse -> . errorElse ELSE { body }
    (97) optionalElse -> . empty
    (98) errorElse -> .
    (146) empty -> .

    ELSE            reduce using rule 98 (errorElse -> .)
    ID              reduce using rule 146 (empty -> .)
    IF              reduce using rule 146 (empty -> .)
    FOR             reduce using rule 146 (empty -> .)
    WHILE           reduce using rule 146 (empty -> .)
    }               reduce using rule 146 (empty -> .)
    RETURN          reduce using rule 146 (empty -> .)

    errorElse                      shift and go to state 271
    optionalElse                   shift and go to state 272
    empty                          shift and go to state 273

state 266

    (49) return -> errorReturn RETURN expresion . ;

    ;               shift and go to state 274


state 267

    (74) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) . { body }

    {               shift and go to state 275


state 268

    (136) opMatrix -> errorOpMatrix [ . expresion ]
    (101) expresion -> . sExp cyExpresion errorExpresion
    (106) sExp -> . exp errorOpSExp opSExp
    (115) exp -> . term errorCyExp cyExp
    (120) term -> . fact cyTerm
    (124) fact -> . CTES
    (125) fact -> . cte
    (126) fact -> . funcCall
    (127) fact -> . ( expresion )
    (128) fact -> . ID opAccess errorOpAccess
    (142) cte -> . CTED
    (143) cte -> . CTEF
    (144) cte -> . TRUE
    (145) cte -> . FALSE
    (84) funcCall -> . ID ( opParamCall )

    CTES            shift and go to state 134
    (               shift and go to state 128
    ID              shift and go to state 132
    CTED            shift and go to state 131
    CTEF            shift and go to state 139
    TRUE            shift and go to state 127
    FALSE           shift and go to state 136

    expresion                      shift and go to state 276
    term                           shift and go to state 135
    funcCall                       shift and go to state 137
    sExp                           shift and go to state 129
    cte                            shift and go to state 138
    exp                            shift and go to state 140
    fact                           shift and go to state 141

state 269

    (33) initDict -> = ( dictType : dictType ) errorInitDict .

    ;               reduce using rule 33 (initDict -> = ( dictType : dictType ) errorInitDict .)
    )               reduce using rule 33 (initDict -> = ( dictType : dictType ) errorInitDict .)


state 270

    (81) assignMatrix -> [ expresion ] errorAssignMatrix .

    =               reduce using rule 81 (assignMatrix -> [ expresion ] errorAssignMatrix .)


state 271

    (96) optionalElse -> errorElse . ELSE { body }

    ELSE            shift and go to state 277


state 272

    (94) condition -> errorCondition IF ( expresion ) { body } optionalElse .

    ID              reduce using rule 94 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    IF              reduce using rule 94 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    FOR             reduce using rule 94 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    WHILE           reduce using rule 94 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    }               reduce using rule 94 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)
    RETURN          reduce using rule 94 (condition -> errorCondition IF ( expresion ) { body } optionalElse .)


state 273

    (97) optionalElse -> empty .

    ID              reduce using rule 97 (optionalElse -> empty .)
    IF              reduce using rule 97 (optionalElse -> empty .)
    FOR             reduce using rule 97 (optionalElse -> empty .)
    WHILE           reduce using rule 97 (optionalElse -> empty .)
    }               reduce using rule 97 (optionalElse -> empty .)
    RETURN          reduce using rule 97 (optionalElse -> empty .)


state 274

    (49) return -> errorReturn RETURN expresion ; .

    }               reduce using rule 49 (return -> errorReturn RETURN expresion ; .)


state 275

    (74) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { . body }
    (66) body -> . errorBody cyInstruction
    (67) body -> . empty
    (68) errorBody -> .
    (146) empty -> .

    ID              reduce using rule 68 (errorBody -> .)
    IF              reduce using rule 68 (errorBody -> .)
    FOR             reduce using rule 68 (errorBody -> .)
    WHILE           reduce using rule 68 (errorBody -> .)
    }               reduce using rule 146 (empty -> .)

    body                           shift and go to state 278
    errorBody                      shift and go to state 72
    empty                          shift and go to state 73

state 276

    (136) opMatrix -> errorOpMatrix [ expresion . ]

    ]               shift and go to state 279


state 277

    (96) optionalElse -> errorElse ELSE . { body }

    {               shift and go to state 280


state 278

    (74) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body . }

    }               shift and go to state 281


state 279

    (136) opMatrix -> errorOpMatrix [ expresion ] .

    *               reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    /               reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    +               reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    -               reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    EQ              reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    DIF             reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    LTOEQ           reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    GTOEQ           reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    >               reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    <               reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    AND             reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    OR              reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    ,               reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    )               reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    ]               reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)
    ;               reduce using rule 136 (opMatrix -> errorOpMatrix [ expresion ] .)


state 280

    (96) optionalElse -> errorElse ELSE { . body }
    (66) body -> . errorBody cyInstruction
    (67) body -> . empty
    (68) errorBody -> .
    (146) empty -> .

    ID              reduce using rule 68 (errorBody -> .)
    IF              reduce using rule 68 (errorBody -> .)
    FOR             reduce using rule 68 (errorBody -> .)
    WHILE           reduce using rule 68 (errorBody -> .)
    }               reduce using rule 146 (empty -> .)

    body                           shift and go to state 282
    empty                          shift and go to state 73
    errorBody                      shift and go to state 72

state 281

    (74) forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .

    ID              reduce using rule 74 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    IF              reduce using rule 74 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    FOR             reduce using rule 74 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    WHILE           reduce using rule 74 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    }               reduce using rule 74 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)
    RETURN          reduce using rule 74 (forCycle -> errorForCycle FOR ( assign ; expresion ; assign ) { body } .)


state 282

    (96) optionalElse -> errorElse ELSE { body . }

    }               shift and go to state 283


state 283

    (96) optionalElse -> errorElse ELSE { body } .

    ID              reduce using rule 96 (optionalElse -> errorElse ELSE { body } .)
    IF              reduce using rule 96 (optionalElse -> errorElse ELSE { body } .)
    FOR             reduce using rule 96 (optionalElse -> errorElse ELSE { body } .)
    WHILE           reduce using rule 96 (optionalElse -> errorElse ELSE { body } .)
    }               reduce using rule 96 (optionalElse -> errorElse ELSE { body } .)
    RETURN          reduce using rule 96 (optionalElse -> errorElse ELSE { body } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CTES in state 177 resolved as shift
WARNING: reduce/reduce conflict in state 180 resolved using rule (initWith -> funcCall)
WARNING: rejected rule (fact -> funcCall) in state 180
